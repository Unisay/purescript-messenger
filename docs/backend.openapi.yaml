openapi: 3.0.0
info:
  version: "0.1.0"
  title: "Messenger Backend"
servers:
  - url: "http://localhost:8081"
paths:
  /users/{username}:
    put:
      summary: Signup new user
      operationId: signup
      security: []
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: User Info
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfo"
      responses:
        "200":
          description: "Signup is successfull"
        "409":
          description: "Username is already registered"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        default:
          description: Unexpected problem
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /users/{username}/session/:
    put:
      summary: Signin user
      operationId: signin
      security: []
      tags:
        - auth
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: User Session
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  minLength: 8
      responses:
        "200":
          description: User session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "403":
          description: Access denied

  /chat/users:
    get:
      summary: List of users in the chat
      tags:
        - chat
      security:
        - auth: []
      responses:
        "200":
          description: List of active users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "403":
          description: Access denied

  /chat/users/{username}:
    put:
      summary: User enters chat
      tags:
        - chat
      security:
        - auth: []
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        "201":
          description: User successfully entered chat
        "204":
          description: User is in the chat
    delete:
      summary: User exits chat
      tags:
        - chat
      security:
        - auth: []
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        "204":
          description: User successfully exited chat
        "404":
          description: User is not in the chat

components:
  parameters:
    username:
      in: path
      name: username
      schema:
        type: string
        minLength: 2
      required: true
      example: john
      description:
        Username is used to uniquely identify a user within the system.
        It could only contain alphanumeric characters.
  schemas:
    UserInfo:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 8
    UserList:
      type: array
      items:
        type: object
        properties:
          username:
            type: string
            example: john
          status:
            $ref: "#/components/schemas/Status"
          self:
            type: boolean
        required:
          - username
          - status
    Status:
      type: string
      enum:
        - online
        - offline
        - away
    Session:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          format: jwt
    Problem:
      description: A Problem Details object (RFC 7807)
      type: object
      properties:
        type:
          type: string
          format: uri
          description: An absolute URI that identifies the problem type
          default: about:blank  # kept for backwards-compatibility, type will be mandatory in problem-v2
        href:
          type: string
          format: uri
          description: An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
        title:
          type: string
          description: A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
          example: Service Unavailable
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          format: uri
          description: An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
  securitySchemes:
    auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
