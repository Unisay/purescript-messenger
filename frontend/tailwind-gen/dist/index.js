#!/bin/env node

// Generated by purs bundle 0.14.1
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                     
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Unit = $PS["Data.Unit"];                
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  var guard = function (dictAlternative) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty(dictAlternative.Plus1());
          };
          throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [ v.constructor.name ]);
      };
  };
  exports["Alternative"] = Alternative;
  exports["guard"] = guard;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];          
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  }; 
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          var go = defer(dictLazy)(function (v) {
              return f(go);
          });
          return go;
      };
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  }; 
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["liftM1"] = liftM1;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
      this.SemigroupRecord0 = SemigroupRecord0;
      this.memptyRecord = memptyRecord;
  };
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidRecordNil = new MonoidRecord(function () {
      return Data_Semigroup.semigroupRecordNil;
  }, function (v) {
      return {};
  });                        
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return new Monoid(function () {
              return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
          }, memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value));
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return new MonoidRecord(function () {
                      return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                  }, function (v) {
                      var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(mempty(dictMonoid))(tail);
                  });
              };
          };
      };
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  }; 
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["curry"] = curry;
  exports["uncurry"] = uncurry;
  exports["monoidTuple"] = monoidTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["put"] = put;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];            
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 43, column 3 - line 43, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($92) {
                      return $91(Data_Either.Left.create($92));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $93 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($94) {
              return ExceptT($93(Data_Either.Right.create($94)));
          };
      })());
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $103 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($104) {
              return ExceptT($103(Data_Either.Left.create($104)));
          };
      })());
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                      if (rm instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                      };
                      if (rm instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                              if (rn instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                              };
                              if (rn instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                  });
              };
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var wrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap();
      };
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  var ala = function (dictCoercible) {
      return function (dictNewtype) {
          return function (dictNewtype1) {
              return function (v) {
                  return function (f) {
                      return Safe_Coerce.coerce()(f(wrap()));
                  };
              };
          };
      };
  };
  exports["wrap"] = wrap;
  exports["unwrap"] = unwrap;
  exports["un"] = un;
  exports["ala"] = ala;
  exports["alaF"] = alaF;
  exports["over"] = over;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
  exports["withExcept"] = withExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];               
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe (line 185, column 1 - line 188, column 43): " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $323 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $324 = Data_Eq.eq(dictEq);
          return function ($325) {
              return $323($324($325));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              var $326 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              var $327 = elem(dictFoldable)(dictEq)(x);
              return function ($328) {
                  return $326($327($328));
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["oneOf"] = oneOf;
  exports["intercalate"] = intercalate;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();                                                                
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $205 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($206) {
                  return $205(f($206));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done1 = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $207 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($208) {
              return $207(rev($208));
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["foldableList"] = foldableList;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                  
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 263, column 1 - line 263, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 249, column 1 - line 249, column 43): " + [ v.constructor.name ]);
  };
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
              var v2 = span(v)(v1.value1);
              return {
                  init: new Data_List_Types.Cons(v1.value0, v2.init),
                  rest: v2.rest
              };
          };
          return {
              init: Data_List_Types.Nil.value,
              rest: v1
          };
      };
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var unsnoc = function (lst) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return new Data_Maybe.Just({
                          revInit: v1,
                          last: v.value0
                      });
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_v = v.value1;
                      $copy_v1 = new Data_List_Types.Cons(v.value0, v1);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 274, column 3 - line 274, column 21): " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
          return {
              init: reverse(h.revInit),
              last: h.last
          };
      })(go(lst)(Data_List_Types.Nil.value));
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };    
  var last = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Cons) {
              $copy_v = v.value1;
              return;
          };
          $tco_done = true;
          return Data_Maybe.Nothing.value;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var init = function (lst) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.init;
      })(unsnoc(lst));
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 234, column 1 - line 234, column 22): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["reverse"] = reverse;
  exports["span"] = span;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done1 = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $45 = Data_CatQueue["null"](v.value1);
              if ($45) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var resume$prime = function (k) {
      return function (j) {
          return function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return j(v.value0);
              };
              if (v instanceof Bind) {
                  return k(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
          };
      };
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $119 = Control_Applicative.pure(freeApplicative);
              return function ($120) {
                  return $119(k($120));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($121) {
      return fromView(Return.create($121));
  });
  var freeMonadRec = new Control_Monad_Rec_Class.MonadRec(function () {
      return freeMonad;
  }, function (k) {
      return function (a) {
          return Control_Bind.bind(freeBind)(k(a))(function (v) {
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k)(v.value0);
              };
              if (v instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(freeApplicative)(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 86, column 26 - line 88, column 21): " + [ v.constructor.name ]);
          });
      };
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $122 = Control_Applicative.pure(freeApplicative);
          return function ($123) {
              return $122($123);
          };
      })()));
  };
  exports["liftF"] = liftF;
  exports["resume'"] = resume$prime;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeMonadRec"] = freeMonadRec;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Reader"] = $PS["Control.Monad.Reader"] || {};
  var exports = $PS["Control.Monad.Reader"];
  var Data_Newtype = $PS["Data.Newtype"];                 
  var runReader = function (v) {
      var $2 = Data_Newtype.unwrap();
      return function ($3) {
          return $2(v($3));
      };
  };
  exports["runReader"] = runReader;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];       
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["MonadAsk"] = MonadAsk;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  }; 
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($64) {
          return ReaderT(Data_Function["const"]($64));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($65) {
              return f(v($65));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor((function () {
          var $66 = Data_Functor.map(dictFunctor);
          return function ($67) {
              return mapReaderT($66($67));
          };
      })());
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, (function () {
          var $71 = Control_Applicative.pure(dictApplicative);
          return function ($72) {
              return ReaderT(Data_Function["const"]($71($72)));
          };
      })());
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  exports["runReaderT"] = runReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Data_Functor = $PS["Data.Functor"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                      
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  }; 
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
              });
          };
      };
  });
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          })());
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["new"] = $foreign["new"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          return v.value0(i);
      };
  };
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var $$break = Control_Monad_ST_Internal["new"](false)();
                  while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                      (function __do() {
                          var mx = peek(iter)();
                          if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                              Data_Array_ST.push(mx.value0)(array)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      })();
                  };
                  return {};
              };
          };
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["pushWhile"] = pushWhile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThan"] = greaterThan;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 340, column 1 - line 340, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var unsnoc = function (xs) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return function (v1) {
              return {
                  init: v,
                  last: v1
              };
          };
      })(init(xs)))(last(xs));
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return (function __do() {
              var result = Data_Array_ST["new"]();
              var iter = Data_Array_ST_Iterator.iterator(function (v) {
                  return index(xs)(v);
              })();
              Data_Array_ST_Iterator.iterate(iter)(function (x) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                      var sub = Data_Array_ST["new"]();
                      Data_Array_ST.push(x)(sub)();
                      Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
                      var grp = Data_Array_ST.unsafeFreeze(sub)();
                      return Data_Array_ST.push(grp)(result)();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(result)();
          })();
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var fold = function (dictMonoid) {
      return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid);
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var drop = function (n) {
      return function (xs) {
          var $89 = n < 1;
          if ($89) {
              return xs;
          };
          return $foreign.slice(n)($foreign.length(xs))(xs);
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["some"] = some;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["cons"] = cons;
  exports["head"] = head;
  exports["last"] = last;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["foldr"] = foldr;
  exports["fold"] = fold;
  exports["sort"] = sort;
  exports["drop"] = drop;
  exports["groupBy"] = groupBy;
  exports["zip"] = zip;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["slice"] = $foreign.slice;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];             
  var NonEmptyArray = function (x) {
      return x;
  };
  exports["NonEmptyArray"] = NonEmptyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];               
  var unsafeFromArray = Data_Array_NonEmpty_Internal.NonEmptyArray;
  var toArray = function (v) {
      return v;
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 159, column 1 - line 159, column 58): " + [ xs.constructor.name ]);
  };
  var adaptMaybe = function (f) {
      var $75 = Data_Maybe.fromJust();
      return function ($76) {
          return $75(f(toArray($76)));
      };
  };                                     
  var uncons = adaptMaybe(Data_Array.uncons);
  var adaptAny = function (f) {
      return function ($78) {
          return f(toArray($78));
      };
  };
  var catMaybes = adaptAny(Data_Array.catMaybes);
  var length = adaptAny(Data_Array.length);
  exports["fromArray"] = fromArray;
  exports["uncons"] = uncons;
  exports["catMaybes"] = catMaybes;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  }; 
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["BoundedEnum"] = BoundedEnum;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  function nativeImul(a) {
    return function (b) {
      return Math.imul(a, b);
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  function emulatedImul(a) {
    /*jshint bitwise: false*/
    return function (b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      // the shift by 0 fixes the sign on the high part
      // the final |0 converts the unsigned value into a signed value
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  } 

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["pow"] = $foreign.pow;
  exports["round"] = $foreign.round;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CodePoint.Unicode.Internal"] = $PS["Data.CodePoint.Unicode.Internal"] || {};
  var exports = $PS["Data.CodePoint.Unicode.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var NUMCAT_LU = (function () {
      function NUMCAT_LU() {

      };
      NUMCAT_LU.value = new NUMCAT_LU();
      return NUMCAT_LU;
  })();
  var NUMCAT_LL = (function () {
      function NUMCAT_LL() {

      };
      NUMCAT_LL.value = new NUMCAT_LL();
      return NUMCAT_LL;
  })();
  var NUMCAT_LT = (function () {
      function NUMCAT_LT() {

      };
      NUMCAT_LT.value = new NUMCAT_LT();
      return NUMCAT_LT;
  })();
  var NUMCAT_LM = (function () {
      function NUMCAT_LM() {

      };
      NUMCAT_LM.value = new NUMCAT_LM();
      return NUMCAT_LM;
  })();
  var NUMCAT_LO = (function () {
      function NUMCAT_LO() {

      };
      NUMCAT_LO.value = new NUMCAT_LO();
      return NUMCAT_LO;
  })();
  var NUMCAT_MN = (function () {
      function NUMCAT_MN() {

      };
      NUMCAT_MN.value = new NUMCAT_MN();
      return NUMCAT_MN;
  })();
  var NUMCAT_MC = (function () {
      function NUMCAT_MC() {

      };
      NUMCAT_MC.value = new NUMCAT_MC();
      return NUMCAT_MC;
  })();
  var NUMCAT_ME = (function () {
      function NUMCAT_ME() {

      };
      NUMCAT_ME.value = new NUMCAT_ME();
      return NUMCAT_ME;
  })();
  var NUMCAT_ND = (function () {
      function NUMCAT_ND() {

      };
      NUMCAT_ND.value = new NUMCAT_ND();
      return NUMCAT_ND;
  })();
  var NUMCAT_NL = (function () {
      function NUMCAT_NL() {

      };
      NUMCAT_NL.value = new NUMCAT_NL();
      return NUMCAT_NL;
  })();
  var NUMCAT_NO = (function () {
      function NUMCAT_NO() {

      };
      NUMCAT_NO.value = new NUMCAT_NO();
      return NUMCAT_NO;
  })();
  var NUMCAT_PC = (function () {
      function NUMCAT_PC() {

      };
      NUMCAT_PC.value = new NUMCAT_PC();
      return NUMCAT_PC;
  })();
  var NUMCAT_PD = (function () {
      function NUMCAT_PD() {

      };
      NUMCAT_PD.value = new NUMCAT_PD();
      return NUMCAT_PD;
  })();
  var NUMCAT_PS = (function () {
      function NUMCAT_PS() {

      };
      NUMCAT_PS.value = new NUMCAT_PS();
      return NUMCAT_PS;
  })();
  var NUMCAT_PE = (function () {
      function NUMCAT_PE() {

      };
      NUMCAT_PE.value = new NUMCAT_PE();
      return NUMCAT_PE;
  })();
  var NUMCAT_PI = (function () {
      function NUMCAT_PI() {

      };
      NUMCAT_PI.value = new NUMCAT_PI();
      return NUMCAT_PI;
  })();
  var NUMCAT_PF = (function () {
      function NUMCAT_PF() {

      };
      NUMCAT_PF.value = new NUMCAT_PF();
      return NUMCAT_PF;
  })();
  var NUMCAT_PO = (function () {
      function NUMCAT_PO() {

      };
      NUMCAT_PO.value = new NUMCAT_PO();
      return NUMCAT_PO;
  })();
  var NUMCAT_SM = (function () {
      function NUMCAT_SM() {

      };
      NUMCAT_SM.value = new NUMCAT_SM();
      return NUMCAT_SM;
  })();
  var NUMCAT_SC = (function () {
      function NUMCAT_SC() {

      };
      NUMCAT_SC.value = new NUMCAT_SC();
      return NUMCAT_SC;
  })();
  var NUMCAT_SK = (function () {
      function NUMCAT_SK() {

      };
      NUMCAT_SK.value = new NUMCAT_SK();
      return NUMCAT_SK;
  })();
  var NUMCAT_SO = (function () {
      function NUMCAT_SO() {

      };
      NUMCAT_SO.value = new NUMCAT_SO();
      return NUMCAT_SO;
  })();
  var NUMCAT_ZS = (function () {
      function NUMCAT_ZS() {

      };
      NUMCAT_ZS.value = new NUMCAT_ZS();
      return NUMCAT_ZS;
  })();
  var NUMCAT_ZL = (function () {
      function NUMCAT_ZL() {

      };
      NUMCAT_ZL.value = new NUMCAT_ZL();
      return NUMCAT_ZL;
  })();
  var NUMCAT_ZP = (function () {
      function NUMCAT_ZP() {

      };
      NUMCAT_ZP.value = new NUMCAT_ZP();
      return NUMCAT_ZP;
  })();
  var NUMCAT_CC = (function () {
      function NUMCAT_CC() {

      };
      NUMCAT_CC.value = new NUMCAT_CC();
      return NUMCAT_CC;
  })();
  var NUMCAT_CF = (function () {
      function NUMCAT_CF() {

      };
      NUMCAT_CF.value = new NUMCAT_CF();
      return NUMCAT_CF;
  })();
  var NUMCAT_CS = (function () {
      function NUMCAT_CS() {

      };
      NUMCAT_CS.value = new NUMCAT_CS();
      return NUMCAT_CS;
  })();
  var NUMCAT_CO = (function () {
      function NUMCAT_CO() {

      };
      NUMCAT_CO.value = new NUMCAT_CO();
      return NUMCAT_CO;
  })();
  var NUMCAT_CN = (function () {
      function NUMCAT_CN() {

      };
      NUMCAT_CN.value = new NUMCAT_CN();
      return NUMCAT_CN;
  })();
  var numSpaceBlocks = 7;
  var numLat1Blocks = 63;
  var numConvBlocks = 1332;
  var numBlocks = 3396;    
  var gencatZS = 2;
  var rule1 = {
      category: gencatZS,
      unicodeCat: NUMCAT_ZS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var spacechars = [ {
      start: 32,
      length: 1,
      convRule: rule1
  }, {
      start: 160,
      length: 1,
      convRule: rule1
  }, {
      start: 5760,
      length: 1,
      convRule: rule1
  }, {
      start: 8192,
      length: 11,
      convRule: rule1
  }, {
      start: 8239,
      length: 1,
      convRule: rule1
  }, {
      start: 8287,
      length: 1,
      convRule: rule1
  }, {
      start: 12288,
      length: 1,
      convRule: rule1
  } ];
  var gencatZP = 67108864;
  var rule162 = {
      category: gencatZP,
      unicodeCat: NUMCAT_ZP.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatZL = 33554432;
  var rule161 = {
      category: gencatZL,
      unicodeCat: NUMCAT_ZL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSO = 8192;
  var rule13 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule170 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: 0,
      lowdist: 26,
      titledist: 0
  };
  var rule171 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: -26 | 0,
      lowdist: 0,
      titledist: -26 | 0
  };
  var gencatSM = 64;
  var rule6 = {
      category: gencatSM,
      unicodeCat: NUMCAT_SM.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSK = 1024;
  var rule10 = {
      category: gencatSK,
      unicodeCat: NUMCAT_SK.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSC = 8;
  var rule3 = {
      category: gencatSC,
      unicodeCat: NUMCAT_SC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPS = 16;
  var rule4 = {
      category: gencatPS,
      unicodeCat: NUMCAT_PS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPO = 4;
  var rule2 = {
      category: gencatPO,
      unicodeCat: NUMCAT_PO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPI = 32768;
  var rule15 = {
      category: gencatPI,
      unicodeCat: NUMCAT_PI.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPF = 262144;
  var rule19 = {
      category: gencatPF,
      unicodeCat: NUMCAT_PF.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPE = 32;
  var rule5 = {
      category: gencatPE,
      unicodeCat: NUMCAT_PE.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPD = 128;
  var rule7 = {
      category: gencatPD,
      unicodeCat: NUMCAT_PD.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPC = 2048;
  var rule11 = {
      category: gencatPC,
      unicodeCat: NUMCAT_PC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatNO = 131072;
  var rule17 = {
      category: gencatNO,
      unicodeCat: NUMCAT_NO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatNL = 16777216;
  var rule128 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule168 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: 0,
      lowdist: 16,
      titledist: 0
  };
  var rule169 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: -16 | 0,
      lowdist: 0,
      titledist: -16 | 0
  };
  var gencatND = 256;
  var rule8 = {
      category: gencatND,
      unicodeCat: NUMCAT_ND.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatMN = 2097152;
  var rule92 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule93 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 1,
      updist: 84,
      lowdist: 0,
      titledist: 84
  };
  var gencatME = 4194304;
  var rule119 = {
      category: gencatME,
      unicodeCat: NUMCAT_ME.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatMC = 8388608;
  var rule124 = {
      category: gencatMC,
      unicodeCat: NUMCAT_MC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLU = 512;
  var nullrule = {
      category: gencatLU,
      unicodeCat: NUMCAT_CN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule104 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 8,
      titledist: 0
  };
  var rule107 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule115 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -60 | 0,
      titledist: 0
  };
  var rule117 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7 | 0,
      titledist: 0
  };
  var rule118 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 80,
      titledist: 0
  };
  var rule120 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 15,
      titledist: 0
  };
  var rule122 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 48,
      titledist: 0
  };
  var rule125 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 7264,
      titledist: 0
  };
  var rule127 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38864,
      titledist: 0
  };
  var rule137 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3008 | 0,
      titledist: 0
  };
  var rule142 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7615 | 0,
      titledist: 0
  };
  var rule144 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule153 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -74 | 0,
      titledist: 0
  };
  var rule156 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -86 | 0,
      titledist: 0
  };
  var rule157 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -100 | 0,
      titledist: 0
  };
  var rule158 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -112 | 0,
      titledist: 0
  };
  var rule159 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -128 | 0,
      titledist: 0
  };
  var rule160 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -126 | 0,
      titledist: 0
  };
  var rule163 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7517 | 0,
      titledist: 0
  };
  var rule164 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8383 | 0,
      titledist: 0
  };
  var rule165 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8262 | 0,
      titledist: 0
  };
  var rule166 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 28,
      titledist: 0
  };
  var rule172 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10743 | 0,
      titledist: 0
  };
  var rule173 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3814 | 0,
      titledist: 0
  };
  var rule174 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10727 | 0,
      titledist: 0
  };
  var rule177 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10780 | 0,
      titledist: 0
  };
  var rule178 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10749 | 0,
      titledist: 0
  };
  var rule179 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10783 | 0,
      titledist: 0
  };
  var rule180 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10782 | 0,
      titledist: 0
  };
  var rule181 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10815 | 0,
      titledist: 0
  };
  var rule183 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35332 | 0,
      titledist: 0
  };
  var rule184 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42280 | 0,
      titledist: 0
  };
  var rule186 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42308 | 0,
      titledist: 0
  };
  var rule187 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42319 | 0,
      titledist: 0
  };
  var rule188 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42315 | 0,
      titledist: 0
  };
  var rule189 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42305 | 0,
      titledist: 0
  };
  var rule190 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42258 | 0,
      titledist: 0
  };
  var rule191 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42282 | 0,
      titledist: 0
  };
  var rule192 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42261 | 0,
      titledist: 0
  };
  var rule193 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 928,
      titledist: 0
  };
  var rule194 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -48 | 0,
      titledist: 0
  };
  var rule195 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42307 | 0,
      titledist: 0
  };
  var rule196 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35384 | 0,
      titledist: 0
  };
  var rule201 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 40,
      titledist: 0
  };
  var rule203 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 34,
      titledist: 0
  };
  var rule22 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 1,
      titledist: 0
  };
  var rule24 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -199 | 0,
      titledist: 0
  };
  var rule26 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -121 | 0,
      titledist: 0
  };
  var rule29 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 210,
      titledist: 0
  };
  var rule30 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 206,
      titledist: 0
  };
  var rule31 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 205,
      titledist: 0
  };
  var rule32 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 79,
      titledist: 0
  };
  var rule33 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 202,
      titledist: 0
  };
  var rule34 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 203,
      titledist: 0
  };
  var rule35 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 207,
      titledist: 0
  };
  var rule37 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 211,
      titledist: 0
  };
  var rule38 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 209,
      titledist: 0
  };
  var rule40 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 213,
      titledist: 0
  };
  var rule42 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 214,
      titledist: 0
  };
  var rule43 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 218,
      titledist: 0
  };
  var rule44 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 217,
      titledist: 0
  };
  var rule45 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 219,
      titledist: 0
  };
  var rule47 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 2,
      titledist: 1
  };
  var rule51 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -97 | 0,
      titledist: 0
  };
  var rule52 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -56 | 0,
      titledist: 0
  };
  var rule53 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -130 | 0,
      titledist: 0
  };
  var rule54 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10795,
      titledist: 0
  };
  var rule55 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -163 | 0,
      titledist: 0
  };
  var rule56 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10792,
      titledist: 0
  };
  var rule58 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -195 | 0,
      titledist: 0
  };
  var rule59 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 69,
      titledist: 0
  };
  var rule60 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 71,
      titledist: 0
  };
  var rule9 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 32,
      titledist: 0
  };
  var rule94 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 116,
      titledist: 0
  };
  var rule95 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38,
      titledist: 0
  };
  var rule96 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 37,
      titledist: 0
  };
  var rule97 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 64,
      titledist: 0
  };
  var rule98 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 63,
      titledist: 0
  };
  var gencatLT = 524288;
  var rule151 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule154 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -9 | 0,
      titledist: 0
  };
  var rule48 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 1,
      titledist: 0
  };
  var gencatLO = 16384;
  var rule14 = {
      category: gencatLO,
      unicodeCat: NUMCAT_LO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLM = 1048576;
  var rule91 = {
      category: gencatLM,
      unicodeCat: NUMCAT_LM.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLL = 4096;
  var rule100 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -37 | 0,
      lowdist: 0,
      titledist: -37 | 0
  };
  var rule101 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -31 | 0,
      lowdist: 0,
      titledist: -31 | 0
  };
  var rule102 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -64 | 0,
      lowdist: 0,
      titledist: -64 | 0
  };
  var rule103 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -63 | 0,
      lowdist: 0,
      titledist: -63 | 0
  };
  var rule105 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -62 | 0,
      lowdist: 0,
      titledist: -62 | 0
  };
  var rule106 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -57 | 0,
      lowdist: 0,
      titledist: -57 | 0
  };
  var rule108 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -47 | 0,
      lowdist: 0,
      titledist: -47 | 0
  };
  var rule109 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -54 | 0,
      lowdist: 0,
      titledist: -54 | 0
  };
  var rule110 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -8 | 0,
      lowdist: 0,
      titledist: -8 | 0
  };
  var rule111 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -86 | 0,
      lowdist: 0,
      titledist: -86 | 0
  };
  var rule112 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -80 | 0,
      lowdist: 0,
      titledist: -80 | 0
  };
  var rule113 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 7,
      lowdist: 0,
      titledist: 7
  };
  var rule114 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -116 | 0,
      lowdist: 0,
      titledist: -116 | 0
  };
  var rule116 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -96 | 0,
      lowdist: 0,
      titledist: -96 | 0
  };
  var rule12 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -32 | 0,
      lowdist: 0,
      titledist: -32 | 0
  };
  var rule121 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -15 | 0,
      lowdist: 0,
      titledist: -15 | 0
  };
  var rule123 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -48 | 0,
      lowdist: 0,
      titledist: -48 | 0
  };
  var rule126 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3008,
      lowdist: 0,
      titledist: 0
  };
  var rule129 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6254 | 0,
      lowdist: 0,
      titledist: -6254 | 0
  };
  var rule130 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6253 | 0,
      lowdist: 0,
      titledist: -6253 | 0
  };
  var rule131 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6244 | 0,
      lowdist: 0,
      titledist: -6244 | 0
  };
  var rule132 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6242 | 0,
      lowdist: 0,
      titledist: -6242 | 0
  };
  var rule133 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6243 | 0,
      lowdist: 0,
      titledist: -6243 | 0
  };
  var rule134 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6236 | 0,
      lowdist: 0,
      titledist: -6236 | 0
  };
  var rule135 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6181 | 0,
      lowdist: 0,
      titledist: -6181 | 0
  };
  var rule136 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35266,
      lowdist: 0,
      titledist: 35266
  };
  var rule138 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35332,
      lowdist: 0,
      titledist: 35332
  };
  var rule139 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3814,
      lowdist: 0,
      titledist: 3814
  };
  var rule140 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35384,
      lowdist: 0,
      titledist: 35384
  };
  var rule141 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -59 | 0,
      lowdist: 0,
      titledist: -59 | 0
  };
  var rule143 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 8,
      lowdist: 0,
      titledist: 8
  };
  var rule145 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 74,
      lowdist: 0,
      titledist: 74
  };
  var rule146 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 86,
      lowdist: 0,
      titledist: 86
  };
  var rule147 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 100,
      lowdist: 0,
      titledist: 100
  };
  var rule148 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 128,
      lowdist: 0,
      titledist: 128
  };
  var rule149 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 112,
      lowdist: 0,
      titledist: 112
  };
  var rule150 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 126,
      lowdist: 0,
      titledist: 126
  };
  var rule152 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 9,
      lowdist: 0,
      titledist: 9
  };
  var rule155 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7205 | 0,
      lowdist: 0,
      titledist: -7205 | 0
  };
  var rule167 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -28 | 0,
      lowdist: 0,
      titledist: -28 | 0
  };
  var rule175 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10795 | 0,
      lowdist: 0,
      titledist: -10795 | 0
  };
  var rule176 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10792 | 0,
      lowdist: 0,
      titledist: -10792 | 0
  };
  var rule18 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 743,
      lowdist: 0,
      titledist: 743
  };
  var rule182 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7264 | 0,
      lowdist: 0,
      titledist: -7264 | 0
  };
  var rule185 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 48,
      lowdist: 0,
      titledist: 48
  };
  var rule197 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -928 | 0,
      lowdist: 0,
      titledist: -928 | 0
  };
  var rule198 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38864 | 0,
      lowdist: 0,
      titledist: -38864 | 0
  };
  var rule20 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule202 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -40 | 0,
      lowdist: 0,
      titledist: -40 | 0
  };
  var rule204 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -34 | 0,
      lowdist: 0,
      titledist: -34 | 0
  };
  var rule21 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 121,
      lowdist: 0,
      titledist: 121
  };
  var rule23 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule25 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -232 | 0,
      lowdist: 0,
      titledist: -232 | 0
  };
  var rule27 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -300 | 0,
      lowdist: 0,
      titledist: -300 | 0
  };
  var rule28 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 195,
      lowdist: 0,
      titledist: 195
  };
  var rule36 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 97,
      lowdist: 0,
      titledist: 97
  };
  var rule39 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 163,
      lowdist: 0,
      titledist: 163
  };
  var rule41 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 130,
      lowdist: 0,
      titledist: 130
  };
  var rule46 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 56,
      lowdist: 0,
      titledist: 56
  };
  var rule49 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -2 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule50 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -79 | 0,
      lowdist: 0,
      titledist: -79 | 0
  };
  var rule57 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10815,
      lowdist: 0,
      titledist: 10815
  };
  var rule61 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10783,
      lowdist: 0,
      titledist: 10783
  };
  var rule62 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10780,
      lowdist: 0,
      titledist: 10780
  };
  var rule63 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10782,
      lowdist: 0,
      titledist: 10782
  };
  var rule64 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -210 | 0,
      lowdist: 0,
      titledist: -210 | 0
  };
  var rule65 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -206 | 0,
      lowdist: 0,
      titledist: -206 | 0
  };
  var rule66 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -205 | 0,
      lowdist: 0,
      titledist: -205 | 0
  };
  var rule67 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -202 | 0,
      lowdist: 0,
      titledist: -202 | 0
  };
  var rule68 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -203 | 0,
      lowdist: 0,
      titledist: -203 | 0
  };
  var rule69 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42319,
      lowdist: 0,
      titledist: 42319
  };
  var rule70 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42315,
      lowdist: 0,
      titledist: 42315
  };
  var rule71 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -207 | 0,
      lowdist: 0,
      titledist: -207 | 0
  };
  var rule72 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42280,
      lowdist: 0,
      titledist: 42280
  };
  var rule73 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42308,
      lowdist: 0,
      titledist: 42308
  };
  var rule74 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -209 | 0,
      lowdist: 0,
      titledist: -209 | 0
  };
  var rule75 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -211 | 0,
      lowdist: 0,
      titledist: -211 | 0
  };
  var rule76 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10743,
      lowdist: 0,
      titledist: 10743
  };
  var rule77 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42305,
      lowdist: 0,
      titledist: 42305
  };
  var rule78 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10749,
      lowdist: 0,
      titledist: 10749
  };
  var rule79 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -213 | 0,
      lowdist: 0,
      titledist: -213 | 0
  };
  var rule80 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -214 | 0,
      lowdist: 0,
      titledist: -214 | 0
  };
  var rule81 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10727,
      lowdist: 0,
      titledist: 10727
  };
  var rule82 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -218 | 0,
      lowdist: 0,
      titledist: -218 | 0
  };
  var rule83 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42307,
      lowdist: 0,
      titledist: 42307
  };
  var rule84 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42282,
      lowdist: 0,
      titledist: 42282
  };
  var rule85 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -69 | 0,
      lowdist: 0,
      titledist: -69 | 0
  };
  var rule86 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -217 | 0,
      lowdist: 0,
      titledist: -217 | 0
  };
  var rule87 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -71 | 0,
      lowdist: 0,
      titledist: -71 | 0
  };
  var rule88 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -219 | 0,
      lowdist: 0,
      titledist: -219 | 0
  };
  var rule89 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42261,
      lowdist: 0,
      titledist: 42261
  };
  var rule90 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42258,
      lowdist: 0,
      titledist: 42258
  };
  var rule99 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38 | 0,
      lowdist: 0,
      titledist: -38 | 0
  };
  var gencatCS = 134217728;
  var rule199 = {
      category: gencatCS,
      unicodeCat: NUMCAT_CS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCO = 268435456;
  var rule200 = {
      category: gencatCO,
      unicodeCat: NUMCAT_CO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCF = 65536;
  var rule16 = {
      category: gencatCF,
      unicodeCat: NUMCAT_CF.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCC = 1;
  var rule0 = {
      category: gencatCC,
      unicodeCat: NUMCAT_CC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var convchars = [ {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule21
  }, {
      start: 256,
      length: 1,
      convRule: rule22
  }, {
      start: 257,
      length: 1,
      convRule: rule23
  }, {
      start: 258,
      length: 1,
      convRule: rule22
  }, {
      start: 259,
      length: 1,
      convRule: rule23
  }, {
      start: 260,
      length: 1,
      convRule: rule22
  }, {
      start: 261,
      length: 1,
      convRule: rule23
  }, {
      start: 262,
      length: 1,
      convRule: rule22
  }, {
      start: 263,
      length: 1,
      convRule: rule23
  }, {
      start: 264,
      length: 1,
      convRule: rule22
  }, {
      start: 265,
      length: 1,
      convRule: rule23
  }, {
      start: 266,
      length: 1,
      convRule: rule22
  }, {
      start: 267,
      length: 1,
      convRule: rule23
  }, {
      start: 268,
      length: 1,
      convRule: rule22
  }, {
      start: 269,
      length: 1,
      convRule: rule23
  }, {
      start: 270,
      length: 1,
      convRule: rule22
  }, {
      start: 271,
      length: 1,
      convRule: rule23
  }, {
      start: 272,
      length: 1,
      convRule: rule22
  }, {
      start: 273,
      length: 1,
      convRule: rule23
  }, {
      start: 274,
      length: 1,
      convRule: rule22
  }, {
      start: 275,
      length: 1,
      convRule: rule23
  }, {
      start: 276,
      length: 1,
      convRule: rule22
  }, {
      start: 277,
      length: 1,
      convRule: rule23
  }, {
      start: 278,
      length: 1,
      convRule: rule22
  }, {
      start: 279,
      length: 1,
      convRule: rule23
  }, {
      start: 280,
      length: 1,
      convRule: rule22
  }, {
      start: 281,
      length: 1,
      convRule: rule23
  }, {
      start: 282,
      length: 1,
      convRule: rule22
  }, {
      start: 283,
      length: 1,
      convRule: rule23
  }, {
      start: 284,
      length: 1,
      convRule: rule22
  }, {
      start: 285,
      length: 1,
      convRule: rule23
  }, {
      start: 286,
      length: 1,
      convRule: rule22
  }, {
      start: 287,
      length: 1,
      convRule: rule23
  }, {
      start: 288,
      length: 1,
      convRule: rule22
  }, {
      start: 289,
      length: 1,
      convRule: rule23
  }, {
      start: 290,
      length: 1,
      convRule: rule22
  }, {
      start: 291,
      length: 1,
      convRule: rule23
  }, {
      start: 292,
      length: 1,
      convRule: rule22
  }, {
      start: 293,
      length: 1,
      convRule: rule23
  }, {
      start: 294,
      length: 1,
      convRule: rule22
  }, {
      start: 295,
      length: 1,
      convRule: rule23
  }, {
      start: 296,
      length: 1,
      convRule: rule22
  }, {
      start: 297,
      length: 1,
      convRule: rule23
  }, {
      start: 298,
      length: 1,
      convRule: rule22
  }, {
      start: 299,
      length: 1,
      convRule: rule23
  }, {
      start: 300,
      length: 1,
      convRule: rule22
  }, {
      start: 301,
      length: 1,
      convRule: rule23
  }, {
      start: 302,
      length: 1,
      convRule: rule22
  }, {
      start: 303,
      length: 1,
      convRule: rule23
  }, {
      start: 304,
      length: 1,
      convRule: rule24
  }, {
      start: 305,
      length: 1,
      convRule: rule25
  }, {
      start: 306,
      length: 1,
      convRule: rule22
  }, {
      start: 307,
      length: 1,
      convRule: rule23
  }, {
      start: 308,
      length: 1,
      convRule: rule22
  }, {
      start: 309,
      length: 1,
      convRule: rule23
  }, {
      start: 310,
      length: 1,
      convRule: rule22
  }, {
      start: 311,
      length: 1,
      convRule: rule23
  }, {
      start: 313,
      length: 1,
      convRule: rule22
  }, {
      start: 314,
      length: 1,
      convRule: rule23
  }, {
      start: 315,
      length: 1,
      convRule: rule22
  }, {
      start: 316,
      length: 1,
      convRule: rule23
  }, {
      start: 317,
      length: 1,
      convRule: rule22
  }, {
      start: 318,
      length: 1,
      convRule: rule23
  }, {
      start: 319,
      length: 1,
      convRule: rule22
  }, {
      start: 320,
      length: 1,
      convRule: rule23
  }, {
      start: 321,
      length: 1,
      convRule: rule22
  }, {
      start: 322,
      length: 1,
      convRule: rule23
  }, {
      start: 323,
      length: 1,
      convRule: rule22
  }, {
      start: 324,
      length: 1,
      convRule: rule23
  }, {
      start: 325,
      length: 1,
      convRule: rule22
  }, {
      start: 326,
      length: 1,
      convRule: rule23
  }, {
      start: 327,
      length: 1,
      convRule: rule22
  }, {
      start: 328,
      length: 1,
      convRule: rule23
  }, {
      start: 330,
      length: 1,
      convRule: rule22
  }, {
      start: 331,
      length: 1,
      convRule: rule23
  }, {
      start: 332,
      length: 1,
      convRule: rule22
  }, {
      start: 333,
      length: 1,
      convRule: rule23
  }, {
      start: 334,
      length: 1,
      convRule: rule22
  }, {
      start: 335,
      length: 1,
      convRule: rule23
  }, {
      start: 336,
      length: 1,
      convRule: rule22
  }, {
      start: 337,
      length: 1,
      convRule: rule23
  }, {
      start: 338,
      length: 1,
      convRule: rule22
  }, {
      start: 339,
      length: 1,
      convRule: rule23
  }, {
      start: 340,
      length: 1,
      convRule: rule22
  }, {
      start: 341,
      length: 1,
      convRule: rule23
  }, {
      start: 342,
      length: 1,
      convRule: rule22
  }, {
      start: 343,
      length: 1,
      convRule: rule23
  }, {
      start: 344,
      length: 1,
      convRule: rule22
  }, {
      start: 345,
      length: 1,
      convRule: rule23
  }, {
      start: 346,
      length: 1,
      convRule: rule22
  }, {
      start: 347,
      length: 1,
      convRule: rule23
  }, {
      start: 348,
      length: 1,
      convRule: rule22
  }, {
      start: 349,
      length: 1,
      convRule: rule23
  }, {
      start: 350,
      length: 1,
      convRule: rule22
  }, {
      start: 351,
      length: 1,
      convRule: rule23
  }, {
      start: 352,
      length: 1,
      convRule: rule22
  }, {
      start: 353,
      length: 1,
      convRule: rule23
  }, {
      start: 354,
      length: 1,
      convRule: rule22
  }, {
      start: 355,
      length: 1,
      convRule: rule23
  }, {
      start: 356,
      length: 1,
      convRule: rule22
  }, {
      start: 357,
      length: 1,
      convRule: rule23
  }, {
      start: 358,
      length: 1,
      convRule: rule22
  }, {
      start: 359,
      length: 1,
      convRule: rule23
  }, {
      start: 360,
      length: 1,
      convRule: rule22
  }, {
      start: 361,
      length: 1,
      convRule: rule23
  }, {
      start: 362,
      length: 1,
      convRule: rule22
  }, {
      start: 363,
      length: 1,
      convRule: rule23
  }, {
      start: 364,
      length: 1,
      convRule: rule22
  }, {
      start: 365,
      length: 1,
      convRule: rule23
  }, {
      start: 366,
      length: 1,
      convRule: rule22
  }, {
      start: 367,
      length: 1,
      convRule: rule23
  }, {
      start: 368,
      length: 1,
      convRule: rule22
  }, {
      start: 369,
      length: 1,
      convRule: rule23
  }, {
      start: 370,
      length: 1,
      convRule: rule22
  }, {
      start: 371,
      length: 1,
      convRule: rule23
  }, {
      start: 372,
      length: 1,
      convRule: rule22
  }, {
      start: 373,
      length: 1,
      convRule: rule23
  }, {
      start: 374,
      length: 1,
      convRule: rule22
  }, {
      start: 375,
      length: 1,
      convRule: rule23
  }, {
      start: 376,
      length: 1,
      convRule: rule26
  }, {
      start: 377,
      length: 1,
      convRule: rule22
  }, {
      start: 378,
      length: 1,
      convRule: rule23
  }, {
      start: 379,
      length: 1,
      convRule: rule22
  }, {
      start: 380,
      length: 1,
      convRule: rule23
  }, {
      start: 381,
      length: 1,
      convRule: rule22
  }, {
      start: 382,
      length: 1,
      convRule: rule23
  }, {
      start: 383,
      length: 1,
      convRule: rule27
  }, {
      start: 384,
      length: 1,
      convRule: rule28
  }, {
      start: 385,
      length: 1,
      convRule: rule29
  }, {
      start: 386,
      length: 1,
      convRule: rule22
  }, {
      start: 387,
      length: 1,
      convRule: rule23
  }, {
      start: 388,
      length: 1,
      convRule: rule22
  }, {
      start: 389,
      length: 1,
      convRule: rule23
  }, {
      start: 390,
      length: 1,
      convRule: rule30
  }, {
      start: 391,
      length: 1,
      convRule: rule22
  }, {
      start: 392,
      length: 1,
      convRule: rule23
  }, {
      start: 393,
      length: 2,
      convRule: rule31
  }, {
      start: 395,
      length: 1,
      convRule: rule22
  }, {
      start: 396,
      length: 1,
      convRule: rule23
  }, {
      start: 398,
      length: 1,
      convRule: rule32
  }, {
      start: 399,
      length: 1,
      convRule: rule33
  }, {
      start: 400,
      length: 1,
      convRule: rule34
  }, {
      start: 401,
      length: 1,
      convRule: rule22
  }, {
      start: 402,
      length: 1,
      convRule: rule23
  }, {
      start: 403,
      length: 1,
      convRule: rule31
  }, {
      start: 404,
      length: 1,
      convRule: rule35
  }, {
      start: 405,
      length: 1,
      convRule: rule36
  }, {
      start: 406,
      length: 1,
      convRule: rule37
  }, {
      start: 407,
      length: 1,
      convRule: rule38
  }, {
      start: 408,
      length: 1,
      convRule: rule22
  }, {
      start: 409,
      length: 1,
      convRule: rule23
  }, {
      start: 410,
      length: 1,
      convRule: rule39
  }, {
      start: 412,
      length: 1,
      convRule: rule37
  }, {
      start: 413,
      length: 1,
      convRule: rule40
  }, {
      start: 414,
      length: 1,
      convRule: rule41
  }, {
      start: 415,
      length: 1,
      convRule: rule42
  }, {
      start: 416,
      length: 1,
      convRule: rule22
  }, {
      start: 417,
      length: 1,
      convRule: rule23
  }, {
      start: 418,
      length: 1,
      convRule: rule22
  }, {
      start: 419,
      length: 1,
      convRule: rule23
  }, {
      start: 420,
      length: 1,
      convRule: rule22
  }, {
      start: 421,
      length: 1,
      convRule: rule23
  }, {
      start: 422,
      length: 1,
      convRule: rule43
  }, {
      start: 423,
      length: 1,
      convRule: rule22
  }, {
      start: 424,
      length: 1,
      convRule: rule23
  }, {
      start: 425,
      length: 1,
      convRule: rule43
  }, {
      start: 428,
      length: 1,
      convRule: rule22
  }, {
      start: 429,
      length: 1,
      convRule: rule23
  }, {
      start: 430,
      length: 1,
      convRule: rule43
  }, {
      start: 431,
      length: 1,
      convRule: rule22
  }, {
      start: 432,
      length: 1,
      convRule: rule23
  }, {
      start: 433,
      length: 2,
      convRule: rule44
  }, {
      start: 435,
      length: 1,
      convRule: rule22
  }, {
      start: 436,
      length: 1,
      convRule: rule23
  }, {
      start: 437,
      length: 1,
      convRule: rule22
  }, {
      start: 438,
      length: 1,
      convRule: rule23
  }, {
      start: 439,
      length: 1,
      convRule: rule45
  }, {
      start: 440,
      length: 1,
      convRule: rule22
  }, {
      start: 441,
      length: 1,
      convRule: rule23
  }, {
      start: 444,
      length: 1,
      convRule: rule22
  }, {
      start: 445,
      length: 1,
      convRule: rule23
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule22
  }, {
      start: 462,
      length: 1,
      convRule: rule23
  }, {
      start: 463,
      length: 1,
      convRule: rule22
  }, {
      start: 464,
      length: 1,
      convRule: rule23
  }, {
      start: 465,
      length: 1,
      convRule: rule22
  }, {
      start: 466,
      length: 1,
      convRule: rule23
  }, {
      start: 467,
      length: 1,
      convRule: rule22
  }, {
      start: 468,
      length: 1,
      convRule: rule23
  }, {
      start: 469,
      length: 1,
      convRule: rule22
  }, {
      start: 470,
      length: 1,
      convRule: rule23
  }, {
      start: 471,
      length: 1,
      convRule: rule22
  }, {
      start: 472,
      length: 1,
      convRule: rule23
  }, {
      start: 473,
      length: 1,
      convRule: rule22
  }, {
      start: 474,
      length: 1,
      convRule: rule23
  }, {
      start: 475,
      length: 1,
      convRule: rule22
  }, {
      start: 476,
      length: 1,
      convRule: rule23
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule22
  }, {
      start: 479,
      length: 1,
      convRule: rule23
  }, {
      start: 480,
      length: 1,
      convRule: rule22
  }, {
      start: 481,
      length: 1,
      convRule: rule23
  }, {
      start: 482,
      length: 1,
      convRule: rule22
  }, {
      start: 483,
      length: 1,
      convRule: rule23
  }, {
      start: 484,
      length: 1,
      convRule: rule22
  }, {
      start: 485,
      length: 1,
      convRule: rule23
  }, {
      start: 486,
      length: 1,
      convRule: rule22
  }, {
      start: 487,
      length: 1,
      convRule: rule23
  }, {
      start: 488,
      length: 1,
      convRule: rule22
  }, {
      start: 489,
      length: 1,
      convRule: rule23
  }, {
      start: 490,
      length: 1,
      convRule: rule22
  }, {
      start: 491,
      length: 1,
      convRule: rule23
  }, {
      start: 492,
      length: 1,
      convRule: rule22
  }, {
      start: 493,
      length: 1,
      convRule: rule23
  }, {
      start: 494,
      length: 1,
      convRule: rule22
  }, {
      start: 495,
      length: 1,
      convRule: rule23
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule22
  }, {
      start: 501,
      length: 1,
      convRule: rule23
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule22
  }, {
      start: 505,
      length: 1,
      convRule: rule23
  }, {
      start: 506,
      length: 1,
      convRule: rule22
  }, {
      start: 507,
      length: 1,
      convRule: rule23
  }, {
      start: 508,
      length: 1,
      convRule: rule22
  }, {
      start: 509,
      length: 1,
      convRule: rule23
  }, {
      start: 510,
      length: 1,
      convRule: rule22
  }, {
      start: 511,
      length: 1,
      convRule: rule23
  }, {
      start: 512,
      length: 1,
      convRule: rule22
  }, {
      start: 513,
      length: 1,
      convRule: rule23
  }, {
      start: 514,
      length: 1,
      convRule: rule22
  }, {
      start: 515,
      length: 1,
      convRule: rule23
  }, {
      start: 516,
      length: 1,
      convRule: rule22
  }, {
      start: 517,
      length: 1,
      convRule: rule23
  }, {
      start: 518,
      length: 1,
      convRule: rule22
  }, {
      start: 519,
      length: 1,
      convRule: rule23
  }, {
      start: 520,
      length: 1,
      convRule: rule22
  }, {
      start: 521,
      length: 1,
      convRule: rule23
  }, {
      start: 522,
      length: 1,
      convRule: rule22
  }, {
      start: 523,
      length: 1,
      convRule: rule23
  }, {
      start: 524,
      length: 1,
      convRule: rule22
  }, {
      start: 525,
      length: 1,
      convRule: rule23
  }, {
      start: 526,
      length: 1,
      convRule: rule22
  }, {
      start: 527,
      length: 1,
      convRule: rule23
  }, {
      start: 528,
      length: 1,
      convRule: rule22
  }, {
      start: 529,
      length: 1,
      convRule: rule23
  }, {
      start: 530,
      length: 1,
      convRule: rule22
  }, {
      start: 531,
      length: 1,
      convRule: rule23
  }, {
      start: 532,
      length: 1,
      convRule: rule22
  }, {
      start: 533,
      length: 1,
      convRule: rule23
  }, {
      start: 534,
      length: 1,
      convRule: rule22
  }, {
      start: 535,
      length: 1,
      convRule: rule23
  }, {
      start: 536,
      length: 1,
      convRule: rule22
  }, {
      start: 537,
      length: 1,
      convRule: rule23
  }, {
      start: 538,
      length: 1,
      convRule: rule22
  }, {
      start: 539,
      length: 1,
      convRule: rule23
  }, {
      start: 540,
      length: 1,
      convRule: rule22
  }, {
      start: 541,
      length: 1,
      convRule: rule23
  }, {
      start: 542,
      length: 1,
      convRule: rule22
  }, {
      start: 543,
      length: 1,
      convRule: rule23
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 546,
      length: 1,
      convRule: rule22
  }, {
      start: 547,
      length: 1,
      convRule: rule23
  }, {
      start: 548,
      length: 1,
      convRule: rule22
  }, {
      start: 549,
      length: 1,
      convRule: rule23
  }, {
      start: 550,
      length: 1,
      convRule: rule22
  }, {
      start: 551,
      length: 1,
      convRule: rule23
  }, {
      start: 552,
      length: 1,
      convRule: rule22
  }, {
      start: 553,
      length: 1,
      convRule: rule23
  }, {
      start: 554,
      length: 1,
      convRule: rule22
  }, {
      start: 555,
      length: 1,
      convRule: rule23
  }, {
      start: 556,
      length: 1,
      convRule: rule22
  }, {
      start: 557,
      length: 1,
      convRule: rule23
  }, {
      start: 558,
      length: 1,
      convRule: rule22
  }, {
      start: 559,
      length: 1,
      convRule: rule23
  }, {
      start: 560,
      length: 1,
      convRule: rule22
  }, {
      start: 561,
      length: 1,
      convRule: rule23
  }, {
      start: 562,
      length: 1,
      convRule: rule22
  }, {
      start: 563,
      length: 1,
      convRule: rule23
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule22
  }, {
      start: 572,
      length: 1,
      convRule: rule23
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule22
  }, {
      start: 578,
      length: 1,
      convRule: rule23
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule22
  }, {
      start: 583,
      length: 1,
      convRule: rule23
  }, {
      start: 584,
      length: 1,
      convRule: rule22
  }, {
      start: 585,
      length: 1,
      convRule: rule23
  }, {
      start: 586,
      length: 1,
      convRule: rule22
  }, {
      start: 587,
      length: 1,
      convRule: rule23
  }, {
      start: 588,
      length: 1,
      convRule: rule22
  }, {
      start: 589,
      length: 1,
      convRule: rule23
  }, {
      start: 590,
      length: 1,
      convRule: rule22
  }, {
      start: 591,
      length: 1,
      convRule: rule23
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 604,
      length: 1,
      convRule: rule69
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 609,
      length: 1,
      convRule: rule70
  }, {
      start: 611,
      length: 1,
      convRule: rule71
  }, {
      start: 613,
      length: 1,
      convRule: rule72
  }, {
      start: 614,
      length: 1,
      convRule: rule73
  }, {
      start: 616,
      length: 1,
      convRule: rule74
  }, {
      start: 617,
      length: 1,
      convRule: rule75
  }, {
      start: 618,
      length: 1,
      convRule: rule73
  }, {
      start: 619,
      length: 1,
      convRule: rule76
  }, {
      start: 620,
      length: 1,
      convRule: rule77
  }, {
      start: 623,
      length: 1,
      convRule: rule75
  }, {
      start: 625,
      length: 1,
      convRule: rule78
  }, {
      start: 626,
      length: 1,
      convRule: rule79
  }, {
      start: 629,
      length: 1,
      convRule: rule80
  }, {
      start: 637,
      length: 1,
      convRule: rule81
  }, {
      start: 640,
      length: 1,
      convRule: rule82
  }, {
      start: 642,
      length: 1,
      convRule: rule83
  }, {
      start: 643,
      length: 1,
      convRule: rule82
  }, {
      start: 647,
      length: 1,
      convRule: rule84
  }, {
      start: 648,
      length: 1,
      convRule: rule82
  }, {
      start: 649,
      length: 1,
      convRule: rule85
  }, {
      start: 650,
      length: 2,
      convRule: rule86
  }, {
      start: 652,
      length: 1,
      convRule: rule87
  }, {
      start: 658,
      length: 1,
      convRule: rule88
  }, {
      start: 669,
      length: 1,
      convRule: rule89
  }, {
      start: 670,
      length: 1,
      convRule: rule90
  }, {
      start: 837,
      length: 1,
      convRule: rule93
  }, {
      start: 880,
      length: 1,
      convRule: rule22
  }, {
      start: 881,
      length: 1,
      convRule: rule23
  }, {
      start: 882,
      length: 1,
      convRule: rule22
  }, {
      start: 883,
      length: 1,
      convRule: rule23
  }, {
      start: 886,
      length: 1,
      convRule: rule22
  }, {
      start: 887,
      length: 1,
      convRule: rule23
  }, {
      start: 891,
      length: 3,
      convRule: rule41
  }, {
      start: 895,
      length: 1,
      convRule: rule94
  }, {
      start: 902,
      length: 1,
      convRule: rule95
  }, {
      start: 904,
      length: 3,
      convRule: rule96
  }, {
      start: 908,
      length: 1,
      convRule: rule97
  }, {
      start: 910,
      length: 2,
      convRule: rule98
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule99
  }, {
      start: 941,
      length: 3,
      convRule: rule100
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule101
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule102
  }, {
      start: 973,
      length: 2,
      convRule: rule103
  }, {
      start: 975,
      length: 1,
      convRule: rule104
  }, {
      start: 976,
      length: 1,
      convRule: rule105
  }, {
      start: 977,
      length: 1,
      convRule: rule106
  }, {
      start: 981,
      length: 1,
      convRule: rule108
  }, {
      start: 982,
      length: 1,
      convRule: rule109
  }, {
      start: 983,
      length: 1,
      convRule: rule110
  }, {
      start: 984,
      length: 1,
      convRule: rule22
  }, {
      start: 985,
      length: 1,
      convRule: rule23
  }, {
      start: 986,
      length: 1,
      convRule: rule22
  }, {
      start: 987,
      length: 1,
      convRule: rule23
  }, {
      start: 988,
      length: 1,
      convRule: rule22
  }, {
      start: 989,
      length: 1,
      convRule: rule23
  }, {
      start: 990,
      length: 1,
      convRule: rule22
  }, {
      start: 991,
      length: 1,
      convRule: rule23
  }, {
      start: 992,
      length: 1,
      convRule: rule22
  }, {
      start: 993,
      length: 1,
      convRule: rule23
  }, {
      start: 994,
      length: 1,
      convRule: rule22
  }, {
      start: 995,
      length: 1,
      convRule: rule23
  }, {
      start: 996,
      length: 1,
      convRule: rule22
  }, {
      start: 997,
      length: 1,
      convRule: rule23
  }, {
      start: 998,
      length: 1,
      convRule: rule22
  }, {
      start: 999,
      length: 1,
      convRule: rule23
  }, {
      start: 1000,
      length: 1,
      convRule: rule22
  }, {
      start: 1001,
      length: 1,
      convRule: rule23
  }, {
      start: 1002,
      length: 1,
      convRule: rule22
  }, {
      start: 1003,
      length: 1,
      convRule: rule23
  }, {
      start: 1004,
      length: 1,
      convRule: rule22
  }, {
      start: 1005,
      length: 1,
      convRule: rule23
  }, {
      start: 1006,
      length: 1,
      convRule: rule22
  }, {
      start: 1007,
      length: 1,
      convRule: rule23
  }, {
      start: 1008,
      length: 1,
      convRule: rule111
  }, {
      start: 1009,
      length: 1,
      convRule: rule112
  }, {
      start: 1010,
      length: 1,
      convRule: rule113
  }, {
      start: 1011,
      length: 1,
      convRule: rule114
  }, {
      start: 1012,
      length: 1,
      convRule: rule115
  }, {
      start: 1013,
      length: 1,
      convRule: rule116
  }, {
      start: 1015,
      length: 1,
      convRule: rule22
  }, {
      start: 1016,
      length: 1,
      convRule: rule23
  }, {
      start: 1017,
      length: 1,
      convRule: rule117
  }, {
      start: 1018,
      length: 1,
      convRule: rule22
  }, {
      start: 1019,
      length: 1,
      convRule: rule23
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule118
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule112
  }, {
      start: 1120,
      length: 1,
      convRule: rule22
  }, {
      start: 1121,
      length: 1,
      convRule: rule23
  }, {
      start: 1122,
      length: 1,
      convRule: rule22
  }, {
      start: 1123,
      length: 1,
      convRule: rule23
  }, {
      start: 1124,
      length: 1,
      convRule: rule22
  }, {
      start: 1125,
      length: 1,
      convRule: rule23
  }, {
      start: 1126,
      length: 1,
      convRule: rule22
  }, {
      start: 1127,
      length: 1,
      convRule: rule23
  }, {
      start: 1128,
      length: 1,
      convRule: rule22
  }, {
      start: 1129,
      length: 1,
      convRule: rule23
  }, {
      start: 1130,
      length: 1,
      convRule: rule22
  }, {
      start: 1131,
      length: 1,
      convRule: rule23
  }, {
      start: 1132,
      length: 1,
      convRule: rule22
  }, {
      start: 1133,
      length: 1,
      convRule: rule23
  }, {
      start: 1134,
      length: 1,
      convRule: rule22
  }, {
      start: 1135,
      length: 1,
      convRule: rule23
  }, {
      start: 1136,
      length: 1,
      convRule: rule22
  }, {
      start: 1137,
      length: 1,
      convRule: rule23
  }, {
      start: 1138,
      length: 1,
      convRule: rule22
  }, {
      start: 1139,
      length: 1,
      convRule: rule23
  }, {
      start: 1140,
      length: 1,
      convRule: rule22
  }, {
      start: 1141,
      length: 1,
      convRule: rule23
  }, {
      start: 1142,
      length: 1,
      convRule: rule22
  }, {
      start: 1143,
      length: 1,
      convRule: rule23
  }, {
      start: 1144,
      length: 1,
      convRule: rule22
  }, {
      start: 1145,
      length: 1,
      convRule: rule23
  }, {
      start: 1146,
      length: 1,
      convRule: rule22
  }, {
      start: 1147,
      length: 1,
      convRule: rule23
  }, {
      start: 1148,
      length: 1,
      convRule: rule22
  }, {
      start: 1149,
      length: 1,
      convRule: rule23
  }, {
      start: 1150,
      length: 1,
      convRule: rule22
  }, {
      start: 1151,
      length: 1,
      convRule: rule23
  }, {
      start: 1152,
      length: 1,
      convRule: rule22
  }, {
      start: 1153,
      length: 1,
      convRule: rule23
  }, {
      start: 1162,
      length: 1,
      convRule: rule22
  }, {
      start: 1163,
      length: 1,
      convRule: rule23
  }, {
      start: 1164,
      length: 1,
      convRule: rule22
  }, {
      start: 1165,
      length: 1,
      convRule: rule23
  }, {
      start: 1166,
      length: 1,
      convRule: rule22
  }, {
      start: 1167,
      length: 1,
      convRule: rule23
  }, {
      start: 1168,
      length: 1,
      convRule: rule22
  }, {
      start: 1169,
      length: 1,
      convRule: rule23
  }, {
      start: 1170,
      length: 1,
      convRule: rule22
  }, {
      start: 1171,
      length: 1,
      convRule: rule23
  }, {
      start: 1172,
      length: 1,
      convRule: rule22
  }, {
      start: 1173,
      length: 1,
      convRule: rule23
  }, {
      start: 1174,
      length: 1,
      convRule: rule22
  }, {
      start: 1175,
      length: 1,
      convRule: rule23
  }, {
      start: 1176,
      length: 1,
      convRule: rule22
  }, {
      start: 1177,
      length: 1,
      convRule: rule23
  }, {
      start: 1178,
      length: 1,
      convRule: rule22
  }, {
      start: 1179,
      length: 1,
      convRule: rule23
  }, {
      start: 1180,
      length: 1,
      convRule: rule22
  }, {
      start: 1181,
      length: 1,
      convRule: rule23
  }, {
      start: 1182,
      length: 1,
      convRule: rule22
  }, {
      start: 1183,
      length: 1,
      convRule: rule23
  }, {
      start: 1184,
      length: 1,
      convRule: rule22
  }, {
      start: 1185,
      length: 1,
      convRule: rule23
  }, {
      start: 1186,
      length: 1,
      convRule: rule22
  }, {
      start: 1187,
      length: 1,
      convRule: rule23
  }, {
      start: 1188,
      length: 1,
      convRule: rule22
  }, {
      start: 1189,
      length: 1,
      convRule: rule23
  }, {
      start: 1190,
      length: 1,
      convRule: rule22
  }, {
      start: 1191,
      length: 1,
      convRule: rule23
  }, {
      start: 1192,
      length: 1,
      convRule: rule22
  }, {
      start: 1193,
      length: 1,
      convRule: rule23
  }, {
      start: 1194,
      length: 1,
      convRule: rule22
  }, {
      start: 1195,
      length: 1,
      convRule: rule23
  }, {
      start: 1196,
      length: 1,
      convRule: rule22
  }, {
      start: 1197,
      length: 1,
      convRule: rule23
  }, {
      start: 1198,
      length: 1,
      convRule: rule22
  }, {
      start: 1199,
      length: 1,
      convRule: rule23
  }, {
      start: 1200,
      length: 1,
      convRule: rule22
  }, {
      start: 1201,
      length: 1,
      convRule: rule23
  }, {
      start: 1202,
      length: 1,
      convRule: rule22
  }, {
      start: 1203,
      length: 1,
      convRule: rule23
  }, {
      start: 1204,
      length: 1,
      convRule: rule22
  }, {
      start: 1205,
      length: 1,
      convRule: rule23
  }, {
      start: 1206,
      length: 1,
      convRule: rule22
  }, {
      start: 1207,
      length: 1,
      convRule: rule23
  }, {
      start: 1208,
      length: 1,
      convRule: rule22
  }, {
      start: 1209,
      length: 1,
      convRule: rule23
  }, {
      start: 1210,
      length: 1,
      convRule: rule22
  }, {
      start: 1211,
      length: 1,
      convRule: rule23
  }, {
      start: 1212,
      length: 1,
      convRule: rule22
  }, {
      start: 1213,
      length: 1,
      convRule: rule23
  }, {
      start: 1214,
      length: 1,
      convRule: rule22
  }, {
      start: 1215,
      length: 1,
      convRule: rule23
  }, {
      start: 1216,
      length: 1,
      convRule: rule120
  }, {
      start: 1217,
      length: 1,
      convRule: rule22
  }, {
      start: 1218,
      length: 1,
      convRule: rule23
  }, {
      start: 1219,
      length: 1,
      convRule: rule22
  }, {
      start: 1220,
      length: 1,
      convRule: rule23
  }, {
      start: 1221,
      length: 1,
      convRule: rule22
  }, {
      start: 1222,
      length: 1,
      convRule: rule23
  }, {
      start: 1223,
      length: 1,
      convRule: rule22
  }, {
      start: 1224,
      length: 1,
      convRule: rule23
  }, {
      start: 1225,
      length: 1,
      convRule: rule22
  }, {
      start: 1226,
      length: 1,
      convRule: rule23
  }, {
      start: 1227,
      length: 1,
      convRule: rule22
  }, {
      start: 1228,
      length: 1,
      convRule: rule23
  }, {
      start: 1229,
      length: 1,
      convRule: rule22
  }, {
      start: 1230,
      length: 1,
      convRule: rule23
  }, {
      start: 1231,
      length: 1,
      convRule: rule121
  }, {
      start: 1232,
      length: 1,
      convRule: rule22
  }, {
      start: 1233,
      length: 1,
      convRule: rule23
  }, {
      start: 1234,
      length: 1,
      convRule: rule22
  }, {
      start: 1235,
      length: 1,
      convRule: rule23
  }, {
      start: 1236,
      length: 1,
      convRule: rule22
  }, {
      start: 1237,
      length: 1,
      convRule: rule23
  }, {
      start: 1238,
      length: 1,
      convRule: rule22
  }, {
      start: 1239,
      length: 1,
      convRule: rule23
  }, {
      start: 1240,
      length: 1,
      convRule: rule22
  }, {
      start: 1241,
      length: 1,
      convRule: rule23
  }, {
      start: 1242,
      length: 1,
      convRule: rule22
  }, {
      start: 1243,
      length: 1,
      convRule: rule23
  }, {
      start: 1244,
      length: 1,
      convRule: rule22
  }, {
      start: 1245,
      length: 1,
      convRule: rule23
  }, {
      start: 1246,
      length: 1,
      convRule: rule22
  }, {
      start: 1247,
      length: 1,
      convRule: rule23
  }, {
      start: 1248,
      length: 1,
      convRule: rule22
  }, {
      start: 1249,
      length: 1,
      convRule: rule23
  }, {
      start: 1250,
      length: 1,
      convRule: rule22
  }, {
      start: 1251,
      length: 1,
      convRule: rule23
  }, {
      start: 1252,
      length: 1,
      convRule: rule22
  }, {
      start: 1253,
      length: 1,
      convRule: rule23
  }, {
      start: 1254,
      length: 1,
      convRule: rule22
  }, {
      start: 1255,
      length: 1,
      convRule: rule23
  }, {
      start: 1256,
      length: 1,
      convRule: rule22
  }, {
      start: 1257,
      length: 1,
      convRule: rule23
  }, {
      start: 1258,
      length: 1,
      convRule: rule22
  }, {
      start: 1259,
      length: 1,
      convRule: rule23
  }, {
      start: 1260,
      length: 1,
      convRule: rule22
  }, {
      start: 1261,
      length: 1,
      convRule: rule23
  }, {
      start: 1262,
      length: 1,
      convRule: rule22
  }, {
      start: 1263,
      length: 1,
      convRule: rule23
  }, {
      start: 1264,
      length: 1,
      convRule: rule22
  }, {
      start: 1265,
      length: 1,
      convRule: rule23
  }, {
      start: 1266,
      length: 1,
      convRule: rule22
  }, {
      start: 1267,
      length: 1,
      convRule: rule23
  }, {
      start: 1268,
      length: 1,
      convRule: rule22
  }, {
      start: 1269,
      length: 1,
      convRule: rule23
  }, {
      start: 1270,
      length: 1,
      convRule: rule22
  }, {
      start: 1271,
      length: 1,
      convRule: rule23
  }, {
      start: 1272,
      length: 1,
      convRule: rule22
  }, {
      start: 1273,
      length: 1,
      convRule: rule23
  }, {
      start: 1274,
      length: 1,
      convRule: rule22
  }, {
      start: 1275,
      length: 1,
      convRule: rule23
  }, {
      start: 1276,
      length: 1,
      convRule: rule22
  }, {
      start: 1277,
      length: 1,
      convRule: rule23
  }, {
      start: 1278,
      length: 1,
      convRule: rule22
  }, {
      start: 1279,
      length: 1,
      convRule: rule23
  }, {
      start: 1280,
      length: 1,
      convRule: rule22
  }, {
      start: 1281,
      length: 1,
      convRule: rule23
  }, {
      start: 1282,
      length: 1,
      convRule: rule22
  }, {
      start: 1283,
      length: 1,
      convRule: rule23
  }, {
      start: 1284,
      length: 1,
      convRule: rule22
  }, {
      start: 1285,
      length: 1,
      convRule: rule23
  }, {
      start: 1286,
      length: 1,
      convRule: rule22
  }, {
      start: 1287,
      length: 1,
      convRule: rule23
  }, {
      start: 1288,
      length: 1,
      convRule: rule22
  }, {
      start: 1289,
      length: 1,
      convRule: rule23
  }, {
      start: 1290,
      length: 1,
      convRule: rule22
  }, {
      start: 1291,
      length: 1,
      convRule: rule23
  }, {
      start: 1292,
      length: 1,
      convRule: rule22
  }, {
      start: 1293,
      length: 1,
      convRule: rule23
  }, {
      start: 1294,
      length: 1,
      convRule: rule22
  }, {
      start: 1295,
      length: 1,
      convRule: rule23
  }, {
      start: 1296,
      length: 1,
      convRule: rule22
  }, {
      start: 1297,
      length: 1,
      convRule: rule23
  }, {
      start: 1298,
      length: 1,
      convRule: rule22
  }, {
      start: 1299,
      length: 1,
      convRule: rule23
  }, {
      start: 1300,
      length: 1,
      convRule: rule22
  }, {
      start: 1301,
      length: 1,
      convRule: rule23
  }, {
      start: 1302,
      length: 1,
      convRule: rule22
  }, {
      start: 1303,
      length: 1,
      convRule: rule23
  }, {
      start: 1304,
      length: 1,
      convRule: rule22
  }, {
      start: 1305,
      length: 1,
      convRule: rule23
  }, {
      start: 1306,
      length: 1,
      convRule: rule22
  }, {
      start: 1307,
      length: 1,
      convRule: rule23
  }, {
      start: 1308,
      length: 1,
      convRule: rule22
  }, {
      start: 1309,
      length: 1,
      convRule: rule23
  }, {
      start: 1310,
      length: 1,
      convRule: rule22
  }, {
      start: 1311,
      length: 1,
      convRule: rule23
  }, {
      start: 1312,
      length: 1,
      convRule: rule22
  }, {
      start: 1313,
      length: 1,
      convRule: rule23
  }, {
      start: 1314,
      length: 1,
      convRule: rule22
  }, {
      start: 1315,
      length: 1,
      convRule: rule23
  }, {
      start: 1316,
      length: 1,
      convRule: rule22
  }, {
      start: 1317,
      length: 1,
      convRule: rule23
  }, {
      start: 1318,
      length: 1,
      convRule: rule22
  }, {
      start: 1319,
      length: 1,
      convRule: rule23
  }, {
      start: 1320,
      length: 1,
      convRule: rule22
  }, {
      start: 1321,
      length: 1,
      convRule: rule23
  }, {
      start: 1322,
      length: 1,
      convRule: rule22
  }, {
      start: 1323,
      length: 1,
      convRule: rule23
  }, {
      start: 1324,
      length: 1,
      convRule: rule22
  }, {
      start: 1325,
      length: 1,
      convRule: rule23
  }, {
      start: 1326,
      length: 1,
      convRule: rule22
  }, {
      start: 1327,
      length: 1,
      convRule: rule23
  }, {
      start: 1329,
      length: 38,
      convRule: rule122
  }, {
      start: 1377,
      length: 38,
      convRule: rule123
  }, {
      start: 4256,
      length: 38,
      convRule: rule125
  }, {
      start: 4295,
      length: 1,
      convRule: rule125
  }, {
      start: 4301,
      length: 1,
      convRule: rule125
  }, {
      start: 4304,
      length: 43,
      convRule: rule126
  }, {
      start: 4349,
      length: 3,
      convRule: rule126
  }, {
      start: 5024,
      length: 80,
      convRule: rule127
  }, {
      start: 5104,
      length: 6,
      convRule: rule104
  }, {
      start: 5112,
      length: 6,
      convRule: rule110
  }, {
      start: 7296,
      length: 1,
      convRule: rule129
  }, {
      start: 7297,
      length: 1,
      convRule: rule130
  }, {
      start: 7298,
      length: 1,
      convRule: rule131
  }, {
      start: 7299,
      length: 2,
      convRule: rule132
  }, {
      start: 7301,
      length: 1,
      convRule: rule133
  }, {
      start: 7302,
      length: 1,
      convRule: rule134
  }, {
      start: 7303,
      length: 1,
      convRule: rule135
  }, {
      start: 7304,
      length: 1,
      convRule: rule136
  }, {
      start: 7312,
      length: 43,
      convRule: rule137
  }, {
      start: 7357,
      length: 3,
      convRule: rule137
  }, {
      start: 7545,
      length: 1,
      convRule: rule138
  }, {
      start: 7549,
      length: 1,
      convRule: rule139
  }, {
      start: 7566,
      length: 1,
      convRule: rule140
  }, {
      start: 7680,
      length: 1,
      convRule: rule22
  }, {
      start: 7681,
      length: 1,
      convRule: rule23
  }, {
      start: 7682,
      length: 1,
      convRule: rule22
  }, {
      start: 7683,
      length: 1,
      convRule: rule23
  }, {
      start: 7684,
      length: 1,
      convRule: rule22
  }, {
      start: 7685,
      length: 1,
      convRule: rule23
  }, {
      start: 7686,
      length: 1,
      convRule: rule22
  }, {
      start: 7687,
      length: 1,
      convRule: rule23
  }, {
      start: 7688,
      length: 1,
      convRule: rule22
  }, {
      start: 7689,
      length: 1,
      convRule: rule23
  }, {
      start: 7690,
      length: 1,
      convRule: rule22
  }, {
      start: 7691,
      length: 1,
      convRule: rule23
  }, {
      start: 7692,
      length: 1,
      convRule: rule22
  }, {
      start: 7693,
      length: 1,
      convRule: rule23
  }, {
      start: 7694,
      length: 1,
      convRule: rule22
  }, {
      start: 7695,
      length: 1,
      convRule: rule23
  }, {
      start: 7696,
      length: 1,
      convRule: rule22
  }, {
      start: 7697,
      length: 1,
      convRule: rule23
  }, {
      start: 7698,
      length: 1,
      convRule: rule22
  }, {
      start: 7699,
      length: 1,
      convRule: rule23
  }, {
      start: 7700,
      length: 1,
      convRule: rule22
  }, {
      start: 7701,
      length: 1,
      convRule: rule23
  }, {
      start: 7702,
      length: 1,
      convRule: rule22
  }, {
      start: 7703,
      length: 1,
      convRule: rule23
  }, {
      start: 7704,
      length: 1,
      convRule: rule22
  }, {
      start: 7705,
      length: 1,
      convRule: rule23
  }, {
      start: 7706,
      length: 1,
      convRule: rule22
  }, {
      start: 7707,
      length: 1,
      convRule: rule23
  }, {
      start: 7708,
      length: 1,
      convRule: rule22
  }, {
      start: 7709,
      length: 1,
      convRule: rule23
  }, {
      start: 7710,
      length: 1,
      convRule: rule22
  }, {
      start: 7711,
      length: 1,
      convRule: rule23
  }, {
      start: 7712,
      length: 1,
      convRule: rule22
  }, {
      start: 7713,
      length: 1,
      convRule: rule23
  }, {
      start: 7714,
      length: 1,
      convRule: rule22
  }, {
      start: 7715,
      length: 1,
      convRule: rule23
  }, {
      start: 7716,
      length: 1,
      convRule: rule22
  }, {
      start: 7717,
      length: 1,
      convRule: rule23
  }, {
      start: 7718,
      length: 1,
      convRule: rule22
  }, {
      start: 7719,
      length: 1,
      convRule: rule23
  }, {
      start: 7720,
      length: 1,
      convRule: rule22
  }, {
      start: 7721,
      length: 1,
      convRule: rule23
  }, {
      start: 7722,
      length: 1,
      convRule: rule22
  }, {
      start: 7723,
      length: 1,
      convRule: rule23
  }, {
      start: 7724,
      length: 1,
      convRule: rule22
  }, {
      start: 7725,
      length: 1,
      convRule: rule23
  }, {
      start: 7726,
      length: 1,
      convRule: rule22
  }, {
      start: 7727,
      length: 1,
      convRule: rule23
  }, {
      start: 7728,
      length: 1,
      convRule: rule22
  }, {
      start: 7729,
      length: 1,
      convRule: rule23
  }, {
      start: 7730,
      length: 1,
      convRule: rule22
  }, {
      start: 7731,
      length: 1,
      convRule: rule23
  }, {
      start: 7732,
      length: 1,
      convRule: rule22
  }, {
      start: 7733,
      length: 1,
      convRule: rule23
  }, {
      start: 7734,
      length: 1,
      convRule: rule22
  }, {
      start: 7735,
      length: 1,
      convRule: rule23
  }, {
      start: 7736,
      length: 1,
      convRule: rule22
  }, {
      start: 7737,
      length: 1,
      convRule: rule23
  }, {
      start: 7738,
      length: 1,
      convRule: rule22
  }, {
      start: 7739,
      length: 1,
      convRule: rule23
  }, {
      start: 7740,
      length: 1,
      convRule: rule22
  }, {
      start: 7741,
      length: 1,
      convRule: rule23
  }, {
      start: 7742,
      length: 1,
      convRule: rule22
  }, {
      start: 7743,
      length: 1,
      convRule: rule23
  }, {
      start: 7744,
      length: 1,
      convRule: rule22
  }, {
      start: 7745,
      length: 1,
      convRule: rule23
  }, {
      start: 7746,
      length: 1,
      convRule: rule22
  }, {
      start: 7747,
      length: 1,
      convRule: rule23
  }, {
      start: 7748,
      length: 1,
      convRule: rule22
  }, {
      start: 7749,
      length: 1,
      convRule: rule23
  }, {
      start: 7750,
      length: 1,
      convRule: rule22
  }, {
      start: 7751,
      length: 1,
      convRule: rule23
  }, {
      start: 7752,
      length: 1,
      convRule: rule22
  }, {
      start: 7753,
      length: 1,
      convRule: rule23
  }, {
      start: 7754,
      length: 1,
      convRule: rule22
  }, {
      start: 7755,
      length: 1,
      convRule: rule23
  }, {
      start: 7756,
      length: 1,
      convRule: rule22
  }, {
      start: 7757,
      length: 1,
      convRule: rule23
  }, {
      start: 7758,
      length: 1,
      convRule: rule22
  }, {
      start: 7759,
      length: 1,
      convRule: rule23
  }, {
      start: 7760,
      length: 1,
      convRule: rule22
  }, {
      start: 7761,
      length: 1,
      convRule: rule23
  }, {
      start: 7762,
      length: 1,
      convRule: rule22
  }, {
      start: 7763,
      length: 1,
      convRule: rule23
  }, {
      start: 7764,
      length: 1,
      convRule: rule22
  }, {
      start: 7765,
      length: 1,
      convRule: rule23
  }, {
      start: 7766,
      length: 1,
      convRule: rule22
  }, {
      start: 7767,
      length: 1,
      convRule: rule23
  }, {
      start: 7768,
      length: 1,
      convRule: rule22
  }, {
      start: 7769,
      length: 1,
      convRule: rule23
  }, {
      start: 7770,
      length: 1,
      convRule: rule22
  }, {
      start: 7771,
      length: 1,
      convRule: rule23
  }, {
      start: 7772,
      length: 1,
      convRule: rule22
  }, {
      start: 7773,
      length: 1,
      convRule: rule23
  }, {
      start: 7774,
      length: 1,
      convRule: rule22
  }, {
      start: 7775,
      length: 1,
      convRule: rule23
  }, {
      start: 7776,
      length: 1,
      convRule: rule22
  }, {
      start: 7777,
      length: 1,
      convRule: rule23
  }, {
      start: 7778,
      length: 1,
      convRule: rule22
  }, {
      start: 7779,
      length: 1,
      convRule: rule23
  }, {
      start: 7780,
      length: 1,
      convRule: rule22
  }, {
      start: 7781,
      length: 1,
      convRule: rule23
  }, {
      start: 7782,
      length: 1,
      convRule: rule22
  }, {
      start: 7783,
      length: 1,
      convRule: rule23
  }, {
      start: 7784,
      length: 1,
      convRule: rule22
  }, {
      start: 7785,
      length: 1,
      convRule: rule23
  }, {
      start: 7786,
      length: 1,
      convRule: rule22
  }, {
      start: 7787,
      length: 1,
      convRule: rule23
  }, {
      start: 7788,
      length: 1,
      convRule: rule22
  }, {
      start: 7789,
      length: 1,
      convRule: rule23
  }, {
      start: 7790,
      length: 1,
      convRule: rule22
  }, {
      start: 7791,
      length: 1,
      convRule: rule23
  }, {
      start: 7792,
      length: 1,
      convRule: rule22
  }, {
      start: 7793,
      length: 1,
      convRule: rule23
  }, {
      start: 7794,
      length: 1,
      convRule: rule22
  }, {
      start: 7795,
      length: 1,
      convRule: rule23
  }, {
      start: 7796,
      length: 1,
      convRule: rule22
  }, {
      start: 7797,
      length: 1,
      convRule: rule23
  }, {
      start: 7798,
      length: 1,
      convRule: rule22
  }, {
      start: 7799,
      length: 1,
      convRule: rule23
  }, {
      start: 7800,
      length: 1,
      convRule: rule22
  }, {
      start: 7801,
      length: 1,
      convRule: rule23
  }, {
      start: 7802,
      length: 1,
      convRule: rule22
  }, {
      start: 7803,
      length: 1,
      convRule: rule23
  }, {
      start: 7804,
      length: 1,
      convRule: rule22
  }, {
      start: 7805,
      length: 1,
      convRule: rule23
  }, {
      start: 7806,
      length: 1,
      convRule: rule22
  }, {
      start: 7807,
      length: 1,
      convRule: rule23
  }, {
      start: 7808,
      length: 1,
      convRule: rule22
  }, {
      start: 7809,
      length: 1,
      convRule: rule23
  }, {
      start: 7810,
      length: 1,
      convRule: rule22
  }, {
      start: 7811,
      length: 1,
      convRule: rule23
  }, {
      start: 7812,
      length: 1,
      convRule: rule22
  }, {
      start: 7813,
      length: 1,
      convRule: rule23
  }, {
      start: 7814,
      length: 1,
      convRule: rule22
  }, {
      start: 7815,
      length: 1,
      convRule: rule23
  }, {
      start: 7816,
      length: 1,
      convRule: rule22
  }, {
      start: 7817,
      length: 1,
      convRule: rule23
  }, {
      start: 7818,
      length: 1,
      convRule: rule22
  }, {
      start: 7819,
      length: 1,
      convRule: rule23
  }, {
      start: 7820,
      length: 1,
      convRule: rule22
  }, {
      start: 7821,
      length: 1,
      convRule: rule23
  }, {
      start: 7822,
      length: 1,
      convRule: rule22
  }, {
      start: 7823,
      length: 1,
      convRule: rule23
  }, {
      start: 7824,
      length: 1,
      convRule: rule22
  }, {
      start: 7825,
      length: 1,
      convRule: rule23
  }, {
      start: 7826,
      length: 1,
      convRule: rule22
  }, {
      start: 7827,
      length: 1,
      convRule: rule23
  }, {
      start: 7828,
      length: 1,
      convRule: rule22
  }, {
      start: 7829,
      length: 1,
      convRule: rule23
  }, {
      start: 7835,
      length: 1,
      convRule: rule141
  }, {
      start: 7838,
      length: 1,
      convRule: rule142
  }, {
      start: 7840,
      length: 1,
      convRule: rule22
  }, {
      start: 7841,
      length: 1,
      convRule: rule23
  }, {
      start: 7842,
      length: 1,
      convRule: rule22
  }, {
      start: 7843,
      length: 1,
      convRule: rule23
  }, {
      start: 7844,
      length: 1,
      convRule: rule22
  }, {
      start: 7845,
      length: 1,
      convRule: rule23
  }, {
      start: 7846,
      length: 1,
      convRule: rule22
  }, {
      start: 7847,
      length: 1,
      convRule: rule23
  }, {
      start: 7848,
      length: 1,
      convRule: rule22
  }, {
      start: 7849,
      length: 1,
      convRule: rule23
  }, {
      start: 7850,
      length: 1,
      convRule: rule22
  }, {
      start: 7851,
      length: 1,
      convRule: rule23
  }, {
      start: 7852,
      length: 1,
      convRule: rule22
  }, {
      start: 7853,
      length: 1,
      convRule: rule23
  }, {
      start: 7854,
      length: 1,
      convRule: rule22
  }, {
      start: 7855,
      length: 1,
      convRule: rule23
  }, {
      start: 7856,
      length: 1,
      convRule: rule22
  }, {
      start: 7857,
      length: 1,
      convRule: rule23
  }, {
      start: 7858,
      length: 1,
      convRule: rule22
  }, {
      start: 7859,
      length: 1,
      convRule: rule23
  }, {
      start: 7860,
      length: 1,
      convRule: rule22
  }, {
      start: 7861,
      length: 1,
      convRule: rule23
  }, {
      start: 7862,
      length: 1,
      convRule: rule22
  }, {
      start: 7863,
      length: 1,
      convRule: rule23
  }, {
      start: 7864,
      length: 1,
      convRule: rule22
  }, {
      start: 7865,
      length: 1,
      convRule: rule23
  }, {
      start: 7866,
      length: 1,
      convRule: rule22
  }, {
      start: 7867,
      length: 1,
      convRule: rule23
  }, {
      start: 7868,
      length: 1,
      convRule: rule22
  }, {
      start: 7869,
      length: 1,
      convRule: rule23
  }, {
      start: 7870,
      length: 1,
      convRule: rule22
  }, {
      start: 7871,
      length: 1,
      convRule: rule23
  }, {
      start: 7872,
      length: 1,
      convRule: rule22
  }, {
      start: 7873,
      length: 1,
      convRule: rule23
  }, {
      start: 7874,
      length: 1,
      convRule: rule22
  }, {
      start: 7875,
      length: 1,
      convRule: rule23
  }, {
      start: 7876,
      length: 1,
      convRule: rule22
  }, {
      start: 7877,
      length: 1,
      convRule: rule23
  }, {
      start: 7878,
      length: 1,
      convRule: rule22
  }, {
      start: 7879,
      length: 1,
      convRule: rule23
  }, {
      start: 7880,
      length: 1,
      convRule: rule22
  }, {
      start: 7881,
      length: 1,
      convRule: rule23
  }, {
      start: 7882,
      length: 1,
      convRule: rule22
  }, {
      start: 7883,
      length: 1,
      convRule: rule23
  }, {
      start: 7884,
      length: 1,
      convRule: rule22
  }, {
      start: 7885,
      length: 1,
      convRule: rule23
  }, {
      start: 7886,
      length: 1,
      convRule: rule22
  }, {
      start: 7887,
      length: 1,
      convRule: rule23
  }, {
      start: 7888,
      length: 1,
      convRule: rule22
  }, {
      start: 7889,
      length: 1,
      convRule: rule23
  }, {
      start: 7890,
      length: 1,
      convRule: rule22
  }, {
      start: 7891,
      length: 1,
      convRule: rule23
  }, {
      start: 7892,
      length: 1,
      convRule: rule22
  }, {
      start: 7893,
      length: 1,
      convRule: rule23
  }, {
      start: 7894,
      length: 1,
      convRule: rule22
  }, {
      start: 7895,
      length: 1,
      convRule: rule23
  }, {
      start: 7896,
      length: 1,
      convRule: rule22
  }, {
      start: 7897,
      length: 1,
      convRule: rule23
  }, {
      start: 7898,
      length: 1,
      convRule: rule22
  }, {
      start: 7899,
      length: 1,
      convRule: rule23
  }, {
      start: 7900,
      length: 1,
      convRule: rule22
  }, {
      start: 7901,
      length: 1,
      convRule: rule23
  }, {
      start: 7902,
      length: 1,
      convRule: rule22
  }, {
      start: 7903,
      length: 1,
      convRule: rule23
  }, {
      start: 7904,
      length: 1,
      convRule: rule22
  }, {
      start: 7905,
      length: 1,
      convRule: rule23
  }, {
      start: 7906,
      length: 1,
      convRule: rule22
  }, {
      start: 7907,
      length: 1,
      convRule: rule23
  }, {
      start: 7908,
      length: 1,
      convRule: rule22
  }, {
      start: 7909,
      length: 1,
      convRule: rule23
  }, {
      start: 7910,
      length: 1,
      convRule: rule22
  }, {
      start: 7911,
      length: 1,
      convRule: rule23
  }, {
      start: 7912,
      length: 1,
      convRule: rule22
  }, {
      start: 7913,
      length: 1,
      convRule: rule23
  }, {
      start: 7914,
      length: 1,
      convRule: rule22
  }, {
      start: 7915,
      length: 1,
      convRule: rule23
  }, {
      start: 7916,
      length: 1,
      convRule: rule22
  }, {
      start: 7917,
      length: 1,
      convRule: rule23
  }, {
      start: 7918,
      length: 1,
      convRule: rule22
  }, {
      start: 7919,
      length: 1,
      convRule: rule23
  }, {
      start: 7920,
      length: 1,
      convRule: rule22
  }, {
      start: 7921,
      length: 1,
      convRule: rule23
  }, {
      start: 7922,
      length: 1,
      convRule: rule22
  }, {
      start: 7923,
      length: 1,
      convRule: rule23
  }, {
      start: 7924,
      length: 1,
      convRule: rule22
  }, {
      start: 7925,
      length: 1,
      convRule: rule23
  }, {
      start: 7926,
      length: 1,
      convRule: rule22
  }, {
      start: 7927,
      length: 1,
      convRule: rule23
  }, {
      start: 7928,
      length: 1,
      convRule: rule22
  }, {
      start: 7929,
      length: 1,
      convRule: rule23
  }, {
      start: 7930,
      length: 1,
      convRule: rule22
  }, {
      start: 7931,
      length: 1,
      convRule: rule23
  }, {
      start: 7932,
      length: 1,
      convRule: rule22
  }, {
      start: 7933,
      length: 1,
      convRule: rule23
  }, {
      start: 7934,
      length: 1,
      convRule: rule22
  }, {
      start: 7935,
      length: 1,
      convRule: rule23
  }, {
      start: 7936,
      length: 8,
      convRule: rule143
  }, {
      start: 7944,
      length: 8,
      convRule: rule144
  }, {
      start: 7952,
      length: 6,
      convRule: rule143
  }, {
      start: 7960,
      length: 6,
      convRule: rule144
  }, {
      start: 7968,
      length: 8,
      convRule: rule143
  }, {
      start: 7976,
      length: 8,
      convRule: rule144
  }, {
      start: 7984,
      length: 8,
      convRule: rule143
  }, {
      start: 7992,
      length: 8,
      convRule: rule144
  }, {
      start: 8000,
      length: 6,
      convRule: rule143
  }, {
      start: 8008,
      length: 6,
      convRule: rule144
  }, {
      start: 8017,
      length: 1,
      convRule: rule143
  }, {
      start: 8019,
      length: 1,
      convRule: rule143
  }, {
      start: 8021,
      length: 1,
      convRule: rule143
  }, {
      start: 8023,
      length: 1,
      convRule: rule143
  }, {
      start: 8025,
      length: 1,
      convRule: rule144
  }, {
      start: 8027,
      length: 1,
      convRule: rule144
  }, {
      start: 8029,
      length: 1,
      convRule: rule144
  }, {
      start: 8031,
      length: 1,
      convRule: rule144
  }, {
      start: 8032,
      length: 8,
      convRule: rule143
  }, {
      start: 8040,
      length: 8,
      convRule: rule144
  }, {
      start: 8048,
      length: 2,
      convRule: rule145
  }, {
      start: 8050,
      length: 4,
      convRule: rule146
  }, {
      start: 8054,
      length: 2,
      convRule: rule147
  }, {
      start: 8056,
      length: 2,
      convRule: rule148
  }, {
      start: 8058,
      length: 2,
      convRule: rule149
  }, {
      start: 8060,
      length: 2,
      convRule: rule150
  }, {
      start: 8064,
      length: 8,
      convRule: rule143
  }, {
      start: 8072,
      length: 8,
      convRule: rule151
  }, {
      start: 8080,
      length: 8,
      convRule: rule143
  }, {
      start: 8088,
      length: 8,
      convRule: rule151
  }, {
      start: 8096,
      length: 8,
      convRule: rule143
  }, {
      start: 8104,
      length: 8,
      convRule: rule151
  }, {
      start: 8112,
      length: 2,
      convRule: rule143
  }, {
      start: 8115,
      length: 1,
      convRule: rule152
  }, {
      start: 8120,
      length: 2,
      convRule: rule144
  }, {
      start: 8122,
      length: 2,
      convRule: rule153
  }, {
      start: 8124,
      length: 1,
      convRule: rule154
  }, {
      start: 8126,
      length: 1,
      convRule: rule155
  }, {
      start: 8131,
      length: 1,
      convRule: rule152
  }, {
      start: 8136,
      length: 4,
      convRule: rule156
  }, {
      start: 8140,
      length: 1,
      convRule: rule154
  }, {
      start: 8144,
      length: 2,
      convRule: rule143
  }, {
      start: 8152,
      length: 2,
      convRule: rule144
  }, {
      start: 8154,
      length: 2,
      convRule: rule157
  }, {
      start: 8160,
      length: 2,
      convRule: rule143
  }, {
      start: 8165,
      length: 1,
      convRule: rule113
  }, {
      start: 8168,
      length: 2,
      convRule: rule144
  }, {
      start: 8170,
      length: 2,
      convRule: rule158
  }, {
      start: 8172,
      length: 1,
      convRule: rule117
  }, {
      start: 8179,
      length: 1,
      convRule: rule152
  }, {
      start: 8184,
      length: 2,
      convRule: rule159
  }, {
      start: 8186,
      length: 2,
      convRule: rule160
  }, {
      start: 8188,
      length: 1,
      convRule: rule154
  }, {
      start: 8486,
      length: 1,
      convRule: rule163
  }, {
      start: 8490,
      length: 1,
      convRule: rule164
  }, {
      start: 8491,
      length: 1,
      convRule: rule165
  }, {
      start: 8498,
      length: 1,
      convRule: rule166
  }, {
      start: 8526,
      length: 1,
      convRule: rule167
  }, {
      start: 8544,
      length: 16,
      convRule: rule168
  }, {
      start: 8560,
      length: 16,
      convRule: rule169
  }, {
      start: 8579,
      length: 1,
      convRule: rule22
  }, {
      start: 8580,
      length: 1,
      convRule: rule23
  }, {
      start: 9398,
      length: 26,
      convRule: rule170
  }, {
      start: 9424,
      length: 26,
      convRule: rule171
  }, {
      start: 11264,
      length: 47,
      convRule: rule122
  }, {
      start: 11312,
      length: 47,
      convRule: rule123
  }, {
      start: 11360,
      length: 1,
      convRule: rule22
  }, {
      start: 11361,
      length: 1,
      convRule: rule23
  }, {
      start: 11362,
      length: 1,
      convRule: rule172
  }, {
      start: 11363,
      length: 1,
      convRule: rule173
  }, {
      start: 11364,
      length: 1,
      convRule: rule174
  }, {
      start: 11365,
      length: 1,
      convRule: rule175
  }, {
      start: 11366,
      length: 1,
      convRule: rule176
  }, {
      start: 11367,
      length: 1,
      convRule: rule22
  }, {
      start: 11368,
      length: 1,
      convRule: rule23
  }, {
      start: 11369,
      length: 1,
      convRule: rule22
  }, {
      start: 11370,
      length: 1,
      convRule: rule23
  }, {
      start: 11371,
      length: 1,
      convRule: rule22
  }, {
      start: 11372,
      length: 1,
      convRule: rule23
  }, {
      start: 11373,
      length: 1,
      convRule: rule177
  }, {
      start: 11374,
      length: 1,
      convRule: rule178
  }, {
      start: 11375,
      length: 1,
      convRule: rule179
  }, {
      start: 11376,
      length: 1,
      convRule: rule180
  }, {
      start: 11378,
      length: 1,
      convRule: rule22
  }, {
      start: 11379,
      length: 1,
      convRule: rule23
  }, {
      start: 11381,
      length: 1,
      convRule: rule22
  }, {
      start: 11382,
      length: 1,
      convRule: rule23
  }, {
      start: 11390,
      length: 2,
      convRule: rule181
  }, {
      start: 11392,
      length: 1,
      convRule: rule22
  }, {
      start: 11393,
      length: 1,
      convRule: rule23
  }, {
      start: 11394,
      length: 1,
      convRule: rule22
  }, {
      start: 11395,
      length: 1,
      convRule: rule23
  }, {
      start: 11396,
      length: 1,
      convRule: rule22
  }, {
      start: 11397,
      length: 1,
      convRule: rule23
  }, {
      start: 11398,
      length: 1,
      convRule: rule22
  }, {
      start: 11399,
      length: 1,
      convRule: rule23
  }, {
      start: 11400,
      length: 1,
      convRule: rule22
  }, {
      start: 11401,
      length: 1,
      convRule: rule23
  }, {
      start: 11402,
      length: 1,
      convRule: rule22
  }, {
      start: 11403,
      length: 1,
      convRule: rule23
  }, {
      start: 11404,
      length: 1,
      convRule: rule22
  }, {
      start: 11405,
      length: 1,
      convRule: rule23
  }, {
      start: 11406,
      length: 1,
      convRule: rule22
  }, {
      start: 11407,
      length: 1,
      convRule: rule23
  }, {
      start: 11408,
      length: 1,
      convRule: rule22
  }, {
      start: 11409,
      length: 1,
      convRule: rule23
  }, {
      start: 11410,
      length: 1,
      convRule: rule22
  }, {
      start: 11411,
      length: 1,
      convRule: rule23
  }, {
      start: 11412,
      length: 1,
      convRule: rule22
  }, {
      start: 11413,
      length: 1,
      convRule: rule23
  }, {
      start: 11414,
      length: 1,
      convRule: rule22
  }, {
      start: 11415,
      length: 1,
      convRule: rule23
  }, {
      start: 11416,
      length: 1,
      convRule: rule22
  }, {
      start: 11417,
      length: 1,
      convRule: rule23
  }, {
      start: 11418,
      length: 1,
      convRule: rule22
  }, {
      start: 11419,
      length: 1,
      convRule: rule23
  }, {
      start: 11420,
      length: 1,
      convRule: rule22
  }, {
      start: 11421,
      length: 1,
      convRule: rule23
  }, {
      start: 11422,
      length: 1,
      convRule: rule22
  }, {
      start: 11423,
      length: 1,
      convRule: rule23
  }, {
      start: 11424,
      length: 1,
      convRule: rule22
  }, {
      start: 11425,
      length: 1,
      convRule: rule23
  }, {
      start: 11426,
      length: 1,
      convRule: rule22
  }, {
      start: 11427,
      length: 1,
      convRule: rule23
  }, {
      start: 11428,
      length: 1,
      convRule: rule22
  }, {
      start: 11429,
      length: 1,
      convRule: rule23
  }, {
      start: 11430,
      length: 1,
      convRule: rule22
  }, {
      start: 11431,
      length: 1,
      convRule: rule23
  }, {
      start: 11432,
      length: 1,
      convRule: rule22
  }, {
      start: 11433,
      length: 1,
      convRule: rule23
  }, {
      start: 11434,
      length: 1,
      convRule: rule22
  }, {
      start: 11435,
      length: 1,
      convRule: rule23
  }, {
      start: 11436,
      length: 1,
      convRule: rule22
  }, {
      start: 11437,
      length: 1,
      convRule: rule23
  }, {
      start: 11438,
      length: 1,
      convRule: rule22
  }, {
      start: 11439,
      length: 1,
      convRule: rule23
  }, {
      start: 11440,
      length: 1,
      convRule: rule22
  }, {
      start: 11441,
      length: 1,
      convRule: rule23
  }, {
      start: 11442,
      length: 1,
      convRule: rule22
  }, {
      start: 11443,
      length: 1,
      convRule: rule23
  }, {
      start: 11444,
      length: 1,
      convRule: rule22
  }, {
      start: 11445,
      length: 1,
      convRule: rule23
  }, {
      start: 11446,
      length: 1,
      convRule: rule22
  }, {
      start: 11447,
      length: 1,
      convRule: rule23
  }, {
      start: 11448,
      length: 1,
      convRule: rule22
  }, {
      start: 11449,
      length: 1,
      convRule: rule23
  }, {
      start: 11450,
      length: 1,
      convRule: rule22
  }, {
      start: 11451,
      length: 1,
      convRule: rule23
  }, {
      start: 11452,
      length: 1,
      convRule: rule22
  }, {
      start: 11453,
      length: 1,
      convRule: rule23
  }, {
      start: 11454,
      length: 1,
      convRule: rule22
  }, {
      start: 11455,
      length: 1,
      convRule: rule23
  }, {
      start: 11456,
      length: 1,
      convRule: rule22
  }, {
      start: 11457,
      length: 1,
      convRule: rule23
  }, {
      start: 11458,
      length: 1,
      convRule: rule22
  }, {
      start: 11459,
      length: 1,
      convRule: rule23
  }, {
      start: 11460,
      length: 1,
      convRule: rule22
  }, {
      start: 11461,
      length: 1,
      convRule: rule23
  }, {
      start: 11462,
      length: 1,
      convRule: rule22
  }, {
      start: 11463,
      length: 1,
      convRule: rule23
  }, {
      start: 11464,
      length: 1,
      convRule: rule22
  }, {
      start: 11465,
      length: 1,
      convRule: rule23
  }, {
      start: 11466,
      length: 1,
      convRule: rule22
  }, {
      start: 11467,
      length: 1,
      convRule: rule23
  }, {
      start: 11468,
      length: 1,
      convRule: rule22
  }, {
      start: 11469,
      length: 1,
      convRule: rule23
  }, {
      start: 11470,
      length: 1,
      convRule: rule22
  }, {
      start: 11471,
      length: 1,
      convRule: rule23
  }, {
      start: 11472,
      length: 1,
      convRule: rule22
  }, {
      start: 11473,
      length: 1,
      convRule: rule23
  }, {
      start: 11474,
      length: 1,
      convRule: rule22
  }, {
      start: 11475,
      length: 1,
      convRule: rule23
  }, {
      start: 11476,
      length: 1,
      convRule: rule22
  }, {
      start: 11477,
      length: 1,
      convRule: rule23
  }, {
      start: 11478,
      length: 1,
      convRule: rule22
  }, {
      start: 11479,
      length: 1,
      convRule: rule23
  }, {
      start: 11480,
      length: 1,
      convRule: rule22
  }, {
      start: 11481,
      length: 1,
      convRule: rule23
  }, {
      start: 11482,
      length: 1,
      convRule: rule22
  }, {
      start: 11483,
      length: 1,
      convRule: rule23
  }, {
      start: 11484,
      length: 1,
      convRule: rule22
  }, {
      start: 11485,
      length: 1,
      convRule: rule23
  }, {
      start: 11486,
      length: 1,
      convRule: rule22
  }, {
      start: 11487,
      length: 1,
      convRule: rule23
  }, {
      start: 11488,
      length: 1,
      convRule: rule22
  }, {
      start: 11489,
      length: 1,
      convRule: rule23
  }, {
      start: 11490,
      length: 1,
      convRule: rule22
  }, {
      start: 11491,
      length: 1,
      convRule: rule23
  }, {
      start: 11499,
      length: 1,
      convRule: rule22
  }, {
      start: 11500,
      length: 1,
      convRule: rule23
  }, {
      start: 11501,
      length: 1,
      convRule: rule22
  }, {
      start: 11502,
      length: 1,
      convRule: rule23
  }, {
      start: 11506,
      length: 1,
      convRule: rule22
  }, {
      start: 11507,
      length: 1,
      convRule: rule23
  }, {
      start: 11520,
      length: 38,
      convRule: rule182
  }, {
      start: 11559,
      length: 1,
      convRule: rule182
  }, {
      start: 11565,
      length: 1,
      convRule: rule182
  }, {
      start: 42560,
      length: 1,
      convRule: rule22
  }, {
      start: 42561,
      length: 1,
      convRule: rule23
  }, {
      start: 42562,
      length: 1,
      convRule: rule22
  }, {
      start: 42563,
      length: 1,
      convRule: rule23
  }, {
      start: 42564,
      length: 1,
      convRule: rule22
  }, {
      start: 42565,
      length: 1,
      convRule: rule23
  }, {
      start: 42566,
      length: 1,
      convRule: rule22
  }, {
      start: 42567,
      length: 1,
      convRule: rule23
  }, {
      start: 42568,
      length: 1,
      convRule: rule22
  }, {
      start: 42569,
      length: 1,
      convRule: rule23
  }, {
      start: 42570,
      length: 1,
      convRule: rule22
  }, {
      start: 42571,
      length: 1,
      convRule: rule23
  }, {
      start: 42572,
      length: 1,
      convRule: rule22
  }, {
      start: 42573,
      length: 1,
      convRule: rule23
  }, {
      start: 42574,
      length: 1,
      convRule: rule22
  }, {
      start: 42575,
      length: 1,
      convRule: rule23
  }, {
      start: 42576,
      length: 1,
      convRule: rule22
  }, {
      start: 42577,
      length: 1,
      convRule: rule23
  }, {
      start: 42578,
      length: 1,
      convRule: rule22
  }, {
      start: 42579,
      length: 1,
      convRule: rule23
  }, {
      start: 42580,
      length: 1,
      convRule: rule22
  }, {
      start: 42581,
      length: 1,
      convRule: rule23
  }, {
      start: 42582,
      length: 1,
      convRule: rule22
  }, {
      start: 42583,
      length: 1,
      convRule: rule23
  }, {
      start: 42584,
      length: 1,
      convRule: rule22
  }, {
      start: 42585,
      length: 1,
      convRule: rule23
  }, {
      start: 42586,
      length: 1,
      convRule: rule22
  }, {
      start: 42587,
      length: 1,
      convRule: rule23
  }, {
      start: 42588,
      length: 1,
      convRule: rule22
  }, {
      start: 42589,
      length: 1,
      convRule: rule23
  }, {
      start: 42590,
      length: 1,
      convRule: rule22
  }, {
      start: 42591,
      length: 1,
      convRule: rule23
  }, {
      start: 42592,
      length: 1,
      convRule: rule22
  }, {
      start: 42593,
      length: 1,
      convRule: rule23
  }, {
      start: 42594,
      length: 1,
      convRule: rule22
  }, {
      start: 42595,
      length: 1,
      convRule: rule23
  }, {
      start: 42596,
      length: 1,
      convRule: rule22
  }, {
      start: 42597,
      length: 1,
      convRule: rule23
  }, {
      start: 42598,
      length: 1,
      convRule: rule22
  }, {
      start: 42599,
      length: 1,
      convRule: rule23
  }, {
      start: 42600,
      length: 1,
      convRule: rule22
  }, {
      start: 42601,
      length: 1,
      convRule: rule23
  }, {
      start: 42602,
      length: 1,
      convRule: rule22
  }, {
      start: 42603,
      length: 1,
      convRule: rule23
  }, {
      start: 42604,
      length: 1,
      convRule: rule22
  }, {
      start: 42605,
      length: 1,
      convRule: rule23
  }, {
      start: 42624,
      length: 1,
      convRule: rule22
  }, {
      start: 42625,
      length: 1,
      convRule: rule23
  }, {
      start: 42626,
      length: 1,
      convRule: rule22
  }, {
      start: 42627,
      length: 1,
      convRule: rule23
  }, {
      start: 42628,
      length: 1,
      convRule: rule22
  }, {
      start: 42629,
      length: 1,
      convRule: rule23
  }, {
      start: 42630,
      length: 1,
      convRule: rule22
  }, {
      start: 42631,
      length: 1,
      convRule: rule23
  }, {
      start: 42632,
      length: 1,
      convRule: rule22
  }, {
      start: 42633,
      length: 1,
      convRule: rule23
  }, {
      start: 42634,
      length: 1,
      convRule: rule22
  }, {
      start: 42635,
      length: 1,
      convRule: rule23
  }, {
      start: 42636,
      length: 1,
      convRule: rule22
  }, {
      start: 42637,
      length: 1,
      convRule: rule23
  }, {
      start: 42638,
      length: 1,
      convRule: rule22
  }, {
      start: 42639,
      length: 1,
      convRule: rule23
  }, {
      start: 42640,
      length: 1,
      convRule: rule22
  }, {
      start: 42641,
      length: 1,
      convRule: rule23
  }, {
      start: 42642,
      length: 1,
      convRule: rule22
  }, {
      start: 42643,
      length: 1,
      convRule: rule23
  }, {
      start: 42644,
      length: 1,
      convRule: rule22
  }, {
      start: 42645,
      length: 1,
      convRule: rule23
  }, {
      start: 42646,
      length: 1,
      convRule: rule22
  }, {
      start: 42647,
      length: 1,
      convRule: rule23
  }, {
      start: 42648,
      length: 1,
      convRule: rule22
  }, {
      start: 42649,
      length: 1,
      convRule: rule23
  }, {
      start: 42650,
      length: 1,
      convRule: rule22
  }, {
      start: 42651,
      length: 1,
      convRule: rule23
  }, {
      start: 42786,
      length: 1,
      convRule: rule22
  }, {
      start: 42787,
      length: 1,
      convRule: rule23
  }, {
      start: 42788,
      length: 1,
      convRule: rule22
  }, {
      start: 42789,
      length: 1,
      convRule: rule23
  }, {
      start: 42790,
      length: 1,
      convRule: rule22
  }, {
      start: 42791,
      length: 1,
      convRule: rule23
  }, {
      start: 42792,
      length: 1,
      convRule: rule22
  }, {
      start: 42793,
      length: 1,
      convRule: rule23
  }, {
      start: 42794,
      length: 1,
      convRule: rule22
  }, {
      start: 42795,
      length: 1,
      convRule: rule23
  }, {
      start: 42796,
      length: 1,
      convRule: rule22
  }, {
      start: 42797,
      length: 1,
      convRule: rule23
  }, {
      start: 42798,
      length: 1,
      convRule: rule22
  }, {
      start: 42799,
      length: 1,
      convRule: rule23
  }, {
      start: 42802,
      length: 1,
      convRule: rule22
  }, {
      start: 42803,
      length: 1,
      convRule: rule23
  }, {
      start: 42804,
      length: 1,
      convRule: rule22
  }, {
      start: 42805,
      length: 1,
      convRule: rule23
  }, {
      start: 42806,
      length: 1,
      convRule: rule22
  }, {
      start: 42807,
      length: 1,
      convRule: rule23
  }, {
      start: 42808,
      length: 1,
      convRule: rule22
  }, {
      start: 42809,
      length: 1,
      convRule: rule23
  }, {
      start: 42810,
      length: 1,
      convRule: rule22
  }, {
      start: 42811,
      length: 1,
      convRule: rule23
  }, {
      start: 42812,
      length: 1,
      convRule: rule22
  }, {
      start: 42813,
      length: 1,
      convRule: rule23
  }, {
      start: 42814,
      length: 1,
      convRule: rule22
  }, {
      start: 42815,
      length: 1,
      convRule: rule23
  }, {
      start: 42816,
      length: 1,
      convRule: rule22
  }, {
      start: 42817,
      length: 1,
      convRule: rule23
  }, {
      start: 42818,
      length: 1,
      convRule: rule22
  }, {
      start: 42819,
      length: 1,
      convRule: rule23
  }, {
      start: 42820,
      length: 1,
      convRule: rule22
  }, {
      start: 42821,
      length: 1,
      convRule: rule23
  }, {
      start: 42822,
      length: 1,
      convRule: rule22
  }, {
      start: 42823,
      length: 1,
      convRule: rule23
  }, {
      start: 42824,
      length: 1,
      convRule: rule22
  }, {
      start: 42825,
      length: 1,
      convRule: rule23
  }, {
      start: 42826,
      length: 1,
      convRule: rule22
  }, {
      start: 42827,
      length: 1,
      convRule: rule23
  }, {
      start: 42828,
      length: 1,
      convRule: rule22
  }, {
      start: 42829,
      length: 1,
      convRule: rule23
  }, {
      start: 42830,
      length: 1,
      convRule: rule22
  }, {
      start: 42831,
      length: 1,
      convRule: rule23
  }, {
      start: 42832,
      length: 1,
      convRule: rule22
  }, {
      start: 42833,
      length: 1,
      convRule: rule23
  }, {
      start: 42834,
      length: 1,
      convRule: rule22
  }, {
      start: 42835,
      length: 1,
      convRule: rule23
  }, {
      start: 42836,
      length: 1,
      convRule: rule22
  }, {
      start: 42837,
      length: 1,
      convRule: rule23
  }, {
      start: 42838,
      length: 1,
      convRule: rule22
  }, {
      start: 42839,
      length: 1,
      convRule: rule23
  }, {
      start: 42840,
      length: 1,
      convRule: rule22
  }, {
      start: 42841,
      length: 1,
      convRule: rule23
  }, {
      start: 42842,
      length: 1,
      convRule: rule22
  }, {
      start: 42843,
      length: 1,
      convRule: rule23
  }, {
      start: 42844,
      length: 1,
      convRule: rule22
  }, {
      start: 42845,
      length: 1,
      convRule: rule23
  }, {
      start: 42846,
      length: 1,
      convRule: rule22
  }, {
      start: 42847,
      length: 1,
      convRule: rule23
  }, {
      start: 42848,
      length: 1,
      convRule: rule22
  }, {
      start: 42849,
      length: 1,
      convRule: rule23
  }, {
      start: 42850,
      length: 1,
      convRule: rule22
  }, {
      start: 42851,
      length: 1,
      convRule: rule23
  }, {
      start: 42852,
      length: 1,
      convRule: rule22
  }, {
      start: 42853,
      length: 1,
      convRule: rule23
  }, {
      start: 42854,
      length: 1,
      convRule: rule22
  }, {
      start: 42855,
      length: 1,
      convRule: rule23
  }, {
      start: 42856,
      length: 1,
      convRule: rule22
  }, {
      start: 42857,
      length: 1,
      convRule: rule23
  }, {
      start: 42858,
      length: 1,
      convRule: rule22
  }, {
      start: 42859,
      length: 1,
      convRule: rule23
  }, {
      start: 42860,
      length: 1,
      convRule: rule22
  }, {
      start: 42861,
      length: 1,
      convRule: rule23
  }, {
      start: 42862,
      length: 1,
      convRule: rule22
  }, {
      start: 42863,
      length: 1,
      convRule: rule23
  }, {
      start: 42873,
      length: 1,
      convRule: rule22
  }, {
      start: 42874,
      length: 1,
      convRule: rule23
  }, {
      start: 42875,
      length: 1,
      convRule: rule22
  }, {
      start: 42876,
      length: 1,
      convRule: rule23
  }, {
      start: 42877,
      length: 1,
      convRule: rule183
  }, {
      start: 42878,
      length: 1,
      convRule: rule22
  }, {
      start: 42879,
      length: 1,
      convRule: rule23
  }, {
      start: 42880,
      length: 1,
      convRule: rule22
  }, {
      start: 42881,
      length: 1,
      convRule: rule23
  }, {
      start: 42882,
      length: 1,
      convRule: rule22
  }, {
      start: 42883,
      length: 1,
      convRule: rule23
  }, {
      start: 42884,
      length: 1,
      convRule: rule22
  }, {
      start: 42885,
      length: 1,
      convRule: rule23
  }, {
      start: 42886,
      length: 1,
      convRule: rule22
  }, {
      start: 42887,
      length: 1,
      convRule: rule23
  }, {
      start: 42891,
      length: 1,
      convRule: rule22
  }, {
      start: 42892,
      length: 1,
      convRule: rule23
  }, {
      start: 42893,
      length: 1,
      convRule: rule184
  }, {
      start: 42896,
      length: 1,
      convRule: rule22
  }, {
      start: 42897,
      length: 1,
      convRule: rule23
  }, {
      start: 42898,
      length: 1,
      convRule: rule22
  }, {
      start: 42899,
      length: 1,
      convRule: rule23
  }, {
      start: 42900,
      length: 1,
      convRule: rule185
  }, {
      start: 42902,
      length: 1,
      convRule: rule22
  }, {
      start: 42903,
      length: 1,
      convRule: rule23
  }, {
      start: 42904,
      length: 1,
      convRule: rule22
  }, {
      start: 42905,
      length: 1,
      convRule: rule23
  }, {
      start: 42906,
      length: 1,
      convRule: rule22
  }, {
      start: 42907,
      length: 1,
      convRule: rule23
  }, {
      start: 42908,
      length: 1,
      convRule: rule22
  }, {
      start: 42909,
      length: 1,
      convRule: rule23
  }, {
      start: 42910,
      length: 1,
      convRule: rule22
  }, {
      start: 42911,
      length: 1,
      convRule: rule23
  }, {
      start: 42912,
      length: 1,
      convRule: rule22
  }, {
      start: 42913,
      length: 1,
      convRule: rule23
  }, {
      start: 42914,
      length: 1,
      convRule: rule22
  }, {
      start: 42915,
      length: 1,
      convRule: rule23
  }, {
      start: 42916,
      length: 1,
      convRule: rule22
  }, {
      start: 42917,
      length: 1,
      convRule: rule23
  }, {
      start: 42918,
      length: 1,
      convRule: rule22
  }, {
      start: 42919,
      length: 1,
      convRule: rule23
  }, {
      start: 42920,
      length: 1,
      convRule: rule22
  }, {
      start: 42921,
      length: 1,
      convRule: rule23
  }, {
      start: 42922,
      length: 1,
      convRule: rule186
  }, {
      start: 42923,
      length: 1,
      convRule: rule187
  }, {
      start: 42924,
      length: 1,
      convRule: rule188
  }, {
      start: 42925,
      length: 1,
      convRule: rule189
  }, {
      start: 42926,
      length: 1,
      convRule: rule186
  }, {
      start: 42928,
      length: 1,
      convRule: rule190
  }, {
      start: 42929,
      length: 1,
      convRule: rule191
  }, {
      start: 42930,
      length: 1,
      convRule: rule192
  }, {
      start: 42931,
      length: 1,
      convRule: rule193
  }, {
      start: 42932,
      length: 1,
      convRule: rule22
  }, {
      start: 42933,
      length: 1,
      convRule: rule23
  }, {
      start: 42934,
      length: 1,
      convRule: rule22
  }, {
      start: 42935,
      length: 1,
      convRule: rule23
  }, {
      start: 42936,
      length: 1,
      convRule: rule22
  }, {
      start: 42937,
      length: 1,
      convRule: rule23
  }, {
      start: 42938,
      length: 1,
      convRule: rule22
  }, {
      start: 42939,
      length: 1,
      convRule: rule23
  }, {
      start: 42940,
      length: 1,
      convRule: rule22
  }, {
      start: 42941,
      length: 1,
      convRule: rule23
  }, {
      start: 42942,
      length: 1,
      convRule: rule22
  }, {
      start: 42943,
      length: 1,
      convRule: rule23
  }, {
      start: 42946,
      length: 1,
      convRule: rule22
  }, {
      start: 42947,
      length: 1,
      convRule: rule23
  }, {
      start: 42948,
      length: 1,
      convRule: rule194
  }, {
      start: 42949,
      length: 1,
      convRule: rule195
  }, {
      start: 42950,
      length: 1,
      convRule: rule196
  }, {
      start: 42951,
      length: 1,
      convRule: rule22
  }, {
      start: 42952,
      length: 1,
      convRule: rule23
  }, {
      start: 42953,
      length: 1,
      convRule: rule22
  }, {
      start: 42954,
      length: 1,
      convRule: rule23
  }, {
      start: 42997,
      length: 1,
      convRule: rule22
  }, {
      start: 42998,
      length: 1,
      convRule: rule23
  }, {
      start: 43859,
      length: 1,
      convRule: rule197
  }, {
      start: 43888,
      length: 80,
      convRule: rule198
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 66560,
      length: 40,
      convRule: rule201
  }, {
      start: 66600,
      length: 40,
      convRule: rule202
  }, {
      start: 66736,
      length: 36,
      convRule: rule201
  }, {
      start: 66776,
      length: 36,
      convRule: rule202
  }, {
      start: 68736,
      length: 51,
      convRule: rule97
  }, {
      start: 68800,
      length: 51,
      convRule: rule102
  }, {
      start: 71840,
      length: 32,
      convRule: rule9
  }, {
      start: 71872,
      length: 32,
      convRule: rule12
  }, {
      start: 93760,
      length: 32,
      convRule: rule9
  }, {
      start: 93792,
      length: 32,
      convRule: rule12
  }, {
      start: 125184,
      length: 34,
      convRule: rule203
  }, {
      start: 125218,
      length: 34,
      convRule: rule204
  } ];
  var bsearch = function (a) {
      return function (array) {
          return function (size) {
              return function (compare) {
                  var go = function ($copy_i) {
                      return function ($copy_k) {
                          var $tco_var_i = $copy_i;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(i, k) {
                              if (i > k || i >= Data_Array.length(array)) {
                                  $tco_done = true;
                                  return Data_Maybe.Nothing.value;
                              };
                              if (Data_Boolean.otherwise) {
                                  var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                  var v = compare(a)(array[j]);
                                  if (v instanceof Data_Ordering.EQ) {
                                      $tco_done = true;
                                      return new Data_Maybe.Just(array[j]);
                                  };
                                  if (v instanceof Data_Ordering.GT) {
                                      $tco_var_i = j + 1 | 0;
                                      $copy_k = k;
                                      return;
                                  };
                                  $tco_var_i = i;
                                  $copy_k = j - 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5611, column 5 - line 5617, column 49): " + [ i.constructor.name, k.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_i, $copy_k);
                          };
                          return $tco_result;
                      };
                  };
                  return go(0)(size);
              };
          };
      };
  };
  var blkCmp = function (v) {
      return function (v1) {
          if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
              return Data_Ordering.EQ.value;
          };
          if (v.start > v1.start) {
              return Data_Ordering.GT.value;
          };
          if (Data_Boolean.otherwise) {
              return Data_Ordering.LT.value;
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5588, column 1 - line 5588, column 45): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var getRule = function (blocks) {
      return function (unichar) {
          return function (size) {
              var key = {
                  start: unichar,
                  length: 1,
                  convRule: nullrule
              };
              var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
              if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (maybeCharBlock instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
              };
              throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5601, column 8 - line 5603, column 62): " + [ maybeCharBlock.constructor.name ]);
          };
      };
  };
  var caseConv = function (f) {
      return function ($$char) {
          var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return $$char;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return $$char + f(maybeConversionRule.value0) | 0;
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5678, column 8 - line 5680, column 55): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uTowlower = caseConv(function (v) {
      return v.lowdist;
  });
  var uTowtitle = caseConv(function (v) {
      return v.titledist;
  });
  var uTowupper = caseConv(function (v) {
      return v.updist;
  });
  var checkAttrS = function (categories) {
      return function ($$char) {
          var maybeConversionRule = getRule(spacechars)($$char)(numSpaceBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5635, column 8 - line 5637, column 92): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uIswspace = checkAttrS([ gencatZS ]);
  var allchars = [ {
      start: 0,
      length: 32,
      convRule: rule0
  }, {
      start: 32,
      length: 1,
      convRule: rule1
  }, {
      start: 33,
      length: 3,
      convRule: rule2
  }, {
      start: 36,
      length: 1,
      convRule: rule3
  }, {
      start: 37,
      length: 3,
      convRule: rule2
  }, {
      start: 40,
      length: 1,
      convRule: rule4
  }, {
      start: 41,
      length: 1,
      convRule: rule5
  }, {
      start: 42,
      length: 1,
      convRule: rule2
  }, {
      start: 43,
      length: 1,
      convRule: rule6
  }, {
      start: 44,
      length: 1,
      convRule: rule2
  }, {
      start: 45,
      length: 1,
      convRule: rule7
  }, {
      start: 46,
      length: 2,
      convRule: rule2
  }, {
      start: 48,
      length: 10,
      convRule: rule8
  }, {
      start: 58,
      length: 2,
      convRule: rule2
  }, {
      start: 60,
      length: 3,
      convRule: rule6
  }, {
      start: 63,
      length: 2,
      convRule: rule2
  }, {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 91,
      length: 1,
      convRule: rule4
  }, {
      start: 92,
      length: 1,
      convRule: rule2
  }, {
      start: 93,
      length: 1,
      convRule: rule5
  }, {
      start: 94,
      length: 1,
      convRule: rule10
  }, {
      start: 95,
      length: 1,
      convRule: rule11
  }, {
      start: 96,
      length: 1,
      convRule: rule10
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 123,
      length: 1,
      convRule: rule4
  }, {
      start: 124,
      length: 1,
      convRule: rule6
  }, {
      start: 125,
      length: 1,
      convRule: rule5
  }, {
      start: 126,
      length: 1,
      convRule: rule6
  }, {
      start: 127,
      length: 33,
      convRule: rule0
  }, {
      start: 160,
      length: 1,
      convRule: rule1
  }, {
      start: 161,
      length: 1,
      convRule: rule2
  }, {
      start: 162,
      length: 4,
      convRule: rule3
  }, {
      start: 166,
      length: 1,
      convRule: rule13
  }, {
      start: 167,
      length: 1,
      convRule: rule2
  }, {
      start: 168,
      length: 1,
      convRule: rule10
  }, {
      start: 169,
      length: 1,
      convRule: rule13
  }, {
      start: 170,
      length: 1,
      convRule: rule14
  }, {
      start: 171,
      length: 1,
      convRule: rule15
  }, {
      start: 172,
      length: 1,
      convRule: rule6
  }, {
      start: 173,
      length: 1,
      convRule: rule16
  }, {
      start: 174,
      length: 1,
      convRule: rule13
  }, {
      start: 175,
      length: 1,
      convRule: rule10
  }, {
      start: 176,
      length: 1,
      convRule: rule13
  }, {
      start: 177,
      length: 1,
      convRule: rule6
  }, {
      start: 178,
      length: 2,
      convRule: rule17
  }, {
      start: 180,
      length: 1,
      convRule: rule10
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 182,
      length: 2,
      convRule: rule2
  }, {
      start: 184,
      length: 1,
      convRule: rule10
  }, {
      start: 185,
      length: 1,
      convRule: rule17
  }, {
      start: 186,
      length: 1,
      convRule: rule14
  }, {
      start: 187,
      length: 1,
      convRule: rule19
  }, {
      start: 188,
      length: 3,
      convRule: rule17
  }, {
      start: 191,
      length: 1,
      convRule: rule2
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 215,
      length: 1,
      convRule: rule6
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 223,
      length: 1,
      convRule: rule20
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 247,
      length: 1,
      convRule: rule6
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule21
  }, {
      start: 256,
      length: 1,
      convRule: rule22
  }, {
      start: 257,
      length: 1,
      convRule: rule23
  }, {
      start: 258,
      length: 1,
      convRule: rule22
  }, {
      start: 259,
      length: 1,
      convRule: rule23
  }, {
      start: 260,
      length: 1,
      convRule: rule22
  }, {
      start: 261,
      length: 1,
      convRule: rule23
  }, {
      start: 262,
      length: 1,
      convRule: rule22
  }, {
      start: 263,
      length: 1,
      convRule: rule23
  }, {
      start: 264,
      length: 1,
      convRule: rule22
  }, {
      start: 265,
      length: 1,
      convRule: rule23
  }, {
      start: 266,
      length: 1,
      convRule: rule22
  }, {
      start: 267,
      length: 1,
      convRule: rule23
  }, {
      start: 268,
      length: 1,
      convRule: rule22
  }, {
      start: 269,
      length: 1,
      convRule: rule23
  }, {
      start: 270,
      length: 1,
      convRule: rule22
  }, {
      start: 271,
      length: 1,
      convRule: rule23
  }, {
      start: 272,
      length: 1,
      convRule: rule22
  }, {
      start: 273,
      length: 1,
      convRule: rule23
  }, {
      start: 274,
      length: 1,
      convRule: rule22
  }, {
      start: 275,
      length: 1,
      convRule: rule23
  }, {
      start: 276,
      length: 1,
      convRule: rule22
  }, {
      start: 277,
      length: 1,
      convRule: rule23
  }, {
      start: 278,
      length: 1,
      convRule: rule22
  }, {
      start: 279,
      length: 1,
      convRule: rule23
  }, {
      start: 280,
      length: 1,
      convRule: rule22
  }, {
      start: 281,
      length: 1,
      convRule: rule23
  }, {
      start: 282,
      length: 1,
      convRule: rule22
  }, {
      start: 283,
      length: 1,
      convRule: rule23
  }, {
      start: 284,
      length: 1,
      convRule: rule22
  }, {
      start: 285,
      length: 1,
      convRule: rule23
  }, {
      start: 286,
      length: 1,
      convRule: rule22
  }, {
      start: 287,
      length: 1,
      convRule: rule23
  }, {
      start: 288,
      length: 1,
      convRule: rule22
  }, {
      start: 289,
      length: 1,
      convRule: rule23
  }, {
      start: 290,
      length: 1,
      convRule: rule22
  }, {
      start: 291,
      length: 1,
      convRule: rule23
  }, {
      start: 292,
      length: 1,
      convRule: rule22
  }, {
      start: 293,
      length: 1,
      convRule: rule23
  }, {
      start: 294,
      length: 1,
      convRule: rule22
  }, {
      start: 295,
      length: 1,
      convRule: rule23
  }, {
      start: 296,
      length: 1,
      convRule: rule22
  }, {
      start: 297,
      length: 1,
      convRule: rule23
  }, {
      start: 298,
      length: 1,
      convRule: rule22
  }, {
      start: 299,
      length: 1,
      convRule: rule23
  }, {
      start: 300,
      length: 1,
      convRule: rule22
  }, {
      start: 301,
      length: 1,
      convRule: rule23
  }, {
      start: 302,
      length: 1,
      convRule: rule22
  }, {
      start: 303,
      length: 1,
      convRule: rule23
  }, {
      start: 304,
      length: 1,
      convRule: rule24
  }, {
      start: 305,
      length: 1,
      convRule: rule25
  }, {
      start: 306,
      length: 1,
      convRule: rule22
  }, {
      start: 307,
      length: 1,
      convRule: rule23
  }, {
      start: 308,
      length: 1,
      convRule: rule22
  }, {
      start: 309,
      length: 1,
      convRule: rule23
  }, {
      start: 310,
      length: 1,
      convRule: rule22
  }, {
      start: 311,
      length: 1,
      convRule: rule23
  }, {
      start: 312,
      length: 1,
      convRule: rule20
  }, {
      start: 313,
      length: 1,
      convRule: rule22
  }, {
      start: 314,
      length: 1,
      convRule: rule23
  }, {
      start: 315,
      length: 1,
      convRule: rule22
  }, {
      start: 316,
      length: 1,
      convRule: rule23
  }, {
      start: 317,
      length: 1,
      convRule: rule22
  }, {
      start: 318,
      length: 1,
      convRule: rule23
  }, {
      start: 319,
      length: 1,
      convRule: rule22
  }, {
      start: 320,
      length: 1,
      convRule: rule23
  }, {
      start: 321,
      length: 1,
      convRule: rule22
  }, {
      start: 322,
      length: 1,
      convRule: rule23
  }, {
      start: 323,
      length: 1,
      convRule: rule22
  }, {
      start: 324,
      length: 1,
      convRule: rule23
  }, {
      start: 325,
      length: 1,
      convRule: rule22
  }, {
      start: 326,
      length: 1,
      convRule: rule23
  }, {
      start: 327,
      length: 1,
      convRule: rule22
  }, {
      start: 328,
      length: 1,
      convRule: rule23
  }, {
      start: 329,
      length: 1,
      convRule: rule20
  }, {
      start: 330,
      length: 1,
      convRule: rule22
  }, {
      start: 331,
      length: 1,
      convRule: rule23
  }, {
      start: 332,
      length: 1,
      convRule: rule22
  }, {
      start: 333,
      length: 1,
      convRule: rule23
  }, {
      start: 334,
      length: 1,
      convRule: rule22
  }, {
      start: 335,
      length: 1,
      convRule: rule23
  }, {
      start: 336,
      length: 1,
      convRule: rule22
  }, {
      start: 337,
      length: 1,
      convRule: rule23
  }, {
      start: 338,
      length: 1,
      convRule: rule22
  }, {
      start: 339,
      length: 1,
      convRule: rule23
  }, {
      start: 340,
      length: 1,
      convRule: rule22
  }, {
      start: 341,
      length: 1,
      convRule: rule23
  }, {
      start: 342,
      length: 1,
      convRule: rule22
  }, {
      start: 343,
      length: 1,
      convRule: rule23
  }, {
      start: 344,
      length: 1,
      convRule: rule22
  }, {
      start: 345,
      length: 1,
      convRule: rule23
  }, {
      start: 346,
      length: 1,
      convRule: rule22
  }, {
      start: 347,
      length: 1,
      convRule: rule23
  }, {
      start: 348,
      length: 1,
      convRule: rule22
  }, {
      start: 349,
      length: 1,
      convRule: rule23
  }, {
      start: 350,
      length: 1,
      convRule: rule22
  }, {
      start: 351,
      length: 1,
      convRule: rule23
  }, {
      start: 352,
      length: 1,
      convRule: rule22
  }, {
      start: 353,
      length: 1,
      convRule: rule23
  }, {
      start: 354,
      length: 1,
      convRule: rule22
  }, {
      start: 355,
      length: 1,
      convRule: rule23
  }, {
      start: 356,
      length: 1,
      convRule: rule22
  }, {
      start: 357,
      length: 1,
      convRule: rule23
  }, {
      start: 358,
      length: 1,
      convRule: rule22
  }, {
      start: 359,
      length: 1,
      convRule: rule23
  }, {
      start: 360,
      length: 1,
      convRule: rule22
  }, {
      start: 361,
      length: 1,
      convRule: rule23
  }, {
      start: 362,
      length: 1,
      convRule: rule22
  }, {
      start: 363,
      length: 1,
      convRule: rule23
  }, {
      start: 364,
      length: 1,
      convRule: rule22
  }, {
      start: 365,
      length: 1,
      convRule: rule23
  }, {
      start: 366,
      length: 1,
      convRule: rule22
  }, {
      start: 367,
      length: 1,
      convRule: rule23
  }, {
      start: 368,
      length: 1,
      convRule: rule22
  }, {
      start: 369,
      length: 1,
      convRule: rule23
  }, {
      start: 370,
      length: 1,
      convRule: rule22
  }, {
      start: 371,
      length: 1,
      convRule: rule23
  }, {
      start: 372,
      length: 1,
      convRule: rule22
  }, {
      start: 373,
      length: 1,
      convRule: rule23
  }, {
      start: 374,
      length: 1,
      convRule: rule22
  }, {
      start: 375,
      length: 1,
      convRule: rule23
  }, {
      start: 376,
      length: 1,
      convRule: rule26
  }, {
      start: 377,
      length: 1,
      convRule: rule22
  }, {
      start: 378,
      length: 1,
      convRule: rule23
  }, {
      start: 379,
      length: 1,
      convRule: rule22
  }, {
      start: 380,
      length: 1,
      convRule: rule23
  }, {
      start: 381,
      length: 1,
      convRule: rule22
  }, {
      start: 382,
      length: 1,
      convRule: rule23
  }, {
      start: 383,
      length: 1,
      convRule: rule27
  }, {
      start: 384,
      length: 1,
      convRule: rule28
  }, {
      start: 385,
      length: 1,
      convRule: rule29
  }, {
      start: 386,
      length: 1,
      convRule: rule22
  }, {
      start: 387,
      length: 1,
      convRule: rule23
  }, {
      start: 388,
      length: 1,
      convRule: rule22
  }, {
      start: 389,
      length: 1,
      convRule: rule23
  }, {
      start: 390,
      length: 1,
      convRule: rule30
  }, {
      start: 391,
      length: 1,
      convRule: rule22
  }, {
      start: 392,
      length: 1,
      convRule: rule23
  }, {
      start: 393,
      length: 2,
      convRule: rule31
  }, {
      start: 395,
      length: 1,
      convRule: rule22
  }, {
      start: 396,
      length: 1,
      convRule: rule23
  }, {
      start: 397,
      length: 1,
      convRule: rule20
  }, {
      start: 398,
      length: 1,
      convRule: rule32
  }, {
      start: 399,
      length: 1,
      convRule: rule33
  }, {
      start: 400,
      length: 1,
      convRule: rule34
  }, {
      start: 401,
      length: 1,
      convRule: rule22
  }, {
      start: 402,
      length: 1,
      convRule: rule23
  }, {
      start: 403,
      length: 1,
      convRule: rule31
  }, {
      start: 404,
      length: 1,
      convRule: rule35
  }, {
      start: 405,
      length: 1,
      convRule: rule36
  }, {
      start: 406,
      length: 1,
      convRule: rule37
  }, {
      start: 407,
      length: 1,
      convRule: rule38
  }, {
      start: 408,
      length: 1,
      convRule: rule22
  }, {
      start: 409,
      length: 1,
      convRule: rule23
  }, {
      start: 410,
      length: 1,
      convRule: rule39
  }, {
      start: 411,
      length: 1,
      convRule: rule20
  }, {
      start: 412,
      length: 1,
      convRule: rule37
  }, {
      start: 413,
      length: 1,
      convRule: rule40
  }, {
      start: 414,
      length: 1,
      convRule: rule41
  }, {
      start: 415,
      length: 1,
      convRule: rule42
  }, {
      start: 416,
      length: 1,
      convRule: rule22
  }, {
      start: 417,
      length: 1,
      convRule: rule23
  }, {
      start: 418,
      length: 1,
      convRule: rule22
  }, {
      start: 419,
      length: 1,
      convRule: rule23
  }, {
      start: 420,
      length: 1,
      convRule: rule22
  }, {
      start: 421,
      length: 1,
      convRule: rule23
  }, {
      start: 422,
      length: 1,
      convRule: rule43
  }, {
      start: 423,
      length: 1,
      convRule: rule22
  }, {
      start: 424,
      length: 1,
      convRule: rule23
  }, {
      start: 425,
      length: 1,
      convRule: rule43
  }, {
      start: 426,
      length: 2,
      convRule: rule20
  }, {
      start: 428,
      length: 1,
      convRule: rule22
  }, {
      start: 429,
      length: 1,
      convRule: rule23
  }, {
      start: 430,
      length: 1,
      convRule: rule43
  }, {
      start: 431,
      length: 1,
      convRule: rule22
  }, {
      start: 432,
      length: 1,
      convRule: rule23
  }, {
      start: 433,
      length: 2,
      convRule: rule44
  }, {
      start: 435,
      length: 1,
      convRule: rule22
  }, {
      start: 436,
      length: 1,
      convRule: rule23
  }, {
      start: 437,
      length: 1,
      convRule: rule22
  }, {
      start: 438,
      length: 1,
      convRule: rule23
  }, {
      start: 439,
      length: 1,
      convRule: rule45
  }, {
      start: 440,
      length: 1,
      convRule: rule22
  }, {
      start: 441,
      length: 1,
      convRule: rule23
  }, {
      start: 442,
      length: 1,
      convRule: rule20
  }, {
      start: 443,
      length: 1,
      convRule: rule14
  }, {
      start: 444,
      length: 1,
      convRule: rule22
  }, {
      start: 445,
      length: 1,
      convRule: rule23
  }, {
      start: 446,
      length: 1,
      convRule: rule20
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 448,
      length: 4,
      convRule: rule14
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule22
  }, {
      start: 462,
      length: 1,
      convRule: rule23
  }, {
      start: 463,
      length: 1,
      convRule: rule22
  }, {
      start: 464,
      length: 1,
      convRule: rule23
  }, {
      start: 465,
      length: 1,
      convRule: rule22
  }, {
      start: 466,
      length: 1,
      convRule: rule23
  }, {
      start: 467,
      length: 1,
      convRule: rule22
  }, {
      start: 468,
      length: 1,
      convRule: rule23
  }, {
      start: 469,
      length: 1,
      convRule: rule22
  }, {
      start: 470,
      length: 1,
      convRule: rule23
  }, {
      start: 471,
      length: 1,
      convRule: rule22
  }, {
      start: 472,
      length: 1,
      convRule: rule23
  }, {
      start: 473,
      length: 1,
      convRule: rule22
  }, {
      start: 474,
      length: 1,
      convRule: rule23
  }, {
      start: 475,
      length: 1,
      convRule: rule22
  }, {
      start: 476,
      length: 1,
      convRule: rule23
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule22
  }, {
      start: 479,
      length: 1,
      convRule: rule23
  }, {
      start: 480,
      length: 1,
      convRule: rule22
  }, {
      start: 481,
      length: 1,
      convRule: rule23
  }, {
      start: 482,
      length: 1,
      convRule: rule22
  }, {
      start: 483,
      length: 1,
      convRule: rule23
  }, {
      start: 484,
      length: 1,
      convRule: rule22
  }, {
      start: 485,
      length: 1,
      convRule: rule23
  }, {
      start: 486,
      length: 1,
      convRule: rule22
  }, {
      start: 487,
      length: 1,
      convRule: rule23
  }, {
      start: 488,
      length: 1,
      convRule: rule22
  }, {
      start: 489,
      length: 1,
      convRule: rule23
  }, {
      start: 490,
      length: 1,
      convRule: rule22
  }, {
      start: 491,
      length: 1,
      convRule: rule23
  }, {
      start: 492,
      length: 1,
      convRule: rule22
  }, {
      start: 493,
      length: 1,
      convRule: rule23
  }, {
      start: 494,
      length: 1,
      convRule: rule22
  }, {
      start: 495,
      length: 1,
      convRule: rule23
  }, {
      start: 496,
      length: 1,
      convRule: rule20
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule22
  }, {
      start: 501,
      length: 1,
      convRule: rule23
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule22
  }, {
      start: 505,
      length: 1,
      convRule: rule23
  }, {
      start: 506,
      length: 1,
      convRule: rule22
  }, {
      start: 507,
      length: 1,
      convRule: rule23
  }, {
      start: 508,
      length: 1,
      convRule: rule22
  }, {
      start: 509,
      length: 1,
      convRule: rule23
  }, {
      start: 510,
      length: 1,
      convRule: rule22
  }, {
      start: 511,
      length: 1,
      convRule: rule23
  }, {
      start: 512,
      length: 1,
      convRule: rule22
  }, {
      start: 513,
      length: 1,
      convRule: rule23
  }, {
      start: 514,
      length: 1,
      convRule: rule22
  }, {
      start: 515,
      length: 1,
      convRule: rule23
  }, {
      start: 516,
      length: 1,
      convRule: rule22
  }, {
      start: 517,
      length: 1,
      convRule: rule23
  }, {
      start: 518,
      length: 1,
      convRule: rule22
  }, {
      start: 519,
      length: 1,
      convRule: rule23
  }, {
      start: 520,
      length: 1,
      convRule: rule22
  }, {
      start: 521,
      length: 1,
      convRule: rule23
  }, {
      start: 522,
      length: 1,
      convRule: rule22
  }, {
      start: 523,
      length: 1,
      convRule: rule23
  }, {
      start: 524,
      length: 1,
      convRule: rule22
  }, {
      start: 525,
      length: 1,
      convRule: rule23
  }, {
      start: 526,
      length: 1,
      convRule: rule22
  }, {
      start: 527,
      length: 1,
      convRule: rule23
  }, {
      start: 528,
      length: 1,
      convRule: rule22
  }, {
      start: 529,
      length: 1,
      convRule: rule23
  }, {
      start: 530,
      length: 1,
      convRule: rule22
  }, {
      start: 531,
      length: 1,
      convRule: rule23
  }, {
      start: 532,
      length: 1,
      convRule: rule22
  }, {
      start: 533,
      length: 1,
      convRule: rule23
  }, {
      start: 534,
      length: 1,
      convRule: rule22
  }, {
      start: 535,
      length: 1,
      convRule: rule23
  }, {
      start: 536,
      length: 1,
      convRule: rule22
  }, {
      start: 537,
      length: 1,
      convRule: rule23
  }, {
      start: 538,
      length: 1,
      convRule: rule22
  }, {
      start: 539,
      length: 1,
      convRule: rule23
  }, {
      start: 540,
      length: 1,
      convRule: rule22
  }, {
      start: 541,
      length: 1,
      convRule: rule23
  }, {
      start: 542,
      length: 1,
      convRule: rule22
  }, {
      start: 543,
      length: 1,
      convRule: rule23
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 545,
      length: 1,
      convRule: rule20
  }, {
      start: 546,
      length: 1,
      convRule: rule22
  }, {
      start: 547,
      length: 1,
      convRule: rule23
  }, {
      start: 548,
      length: 1,
      convRule: rule22
  }, {
      start: 549,
      length: 1,
      convRule: rule23
  }, {
      start: 550,
      length: 1,
      convRule: rule22
  }, {
      start: 551,
      length: 1,
      convRule: rule23
  }, {
      start: 552,
      length: 1,
      convRule: rule22
  }, {
      start: 553,
      length: 1,
      convRule: rule23
  }, {
      start: 554,
      length: 1,
      convRule: rule22
  }, {
      start: 555,
      length: 1,
      convRule: rule23
  }, {
      start: 556,
      length: 1,
      convRule: rule22
  }, {
      start: 557,
      length: 1,
      convRule: rule23
  }, {
      start: 558,
      length: 1,
      convRule: rule22
  }, {
      start: 559,
      length: 1,
      convRule: rule23
  }, {
      start: 560,
      length: 1,
      convRule: rule22
  }, {
      start: 561,
      length: 1,
      convRule: rule23
  }, {
      start: 562,
      length: 1,
      convRule: rule22
  }, {
      start: 563,
      length: 1,
      convRule: rule23
  }, {
      start: 564,
      length: 6,
      convRule: rule20
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule22
  }, {
      start: 572,
      length: 1,
      convRule: rule23
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule22
  }, {
      start: 578,
      length: 1,
      convRule: rule23
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule22
  }, {
      start: 583,
      length: 1,
      convRule: rule23
  }, {
      start: 584,
      length: 1,
      convRule: rule22
  }, {
      start: 585,
      length: 1,
      convRule: rule23
  }, {
      start: 586,
      length: 1,
      convRule: rule22
  }, {
      start: 587,
      length: 1,
      convRule: rule23
  }, {
      start: 588,
      length: 1,
      convRule: rule22
  }, {
      start: 589,
      length: 1,
      convRule: rule23
  }, {
      start: 590,
      length: 1,
      convRule: rule22
  }, {
      start: 591,
      length: 1,
      convRule: rule23
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 597,
      length: 1,
      convRule: rule20
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 600,
      length: 1,
      convRule: rule20
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 602,
      length: 1,
      convRule: rule20
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 604,
      length: 1,
      convRule: rule69
  }, {
      start: 605,
      length: 3,
      convRule: rule20
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 609,
      length: 1,
      convRule: rule70
  }, {
      start: 610,
      length: 1,
      convRule: rule20
  }, {
      start: 611,
      length: 1,
      convRule: rule71
  }, {
      start: 612,
      length: 1,
      convRule: rule20
  }, {
      start: 613,
      length: 1,
      convRule: rule72
  }, {
      start: 614,
      length: 1,
      convRule: rule73
  }, {
      start: 615,
      length: 1,
      convRule: rule20
  }, {
      start: 616,
      length: 1,
      convRule: rule74
  }, {
      start: 617,
      length: 1,
      convRule: rule75
  }, {
      start: 618,
      length: 1,
      convRule: rule73
  }, {
      start: 619,
      length: 1,
      convRule: rule76
  }, {
      start: 620,
      length: 1,
      convRule: rule77
  }, {
      start: 621,
      length: 2,
      convRule: rule20
  }, {
      start: 623,
      length: 1,
      convRule: rule75
  }, {
      start: 624,
      length: 1,
      convRule: rule20
  }, {
      start: 625,
      length: 1,
      convRule: rule78
  }, {
      start: 626,
      length: 1,
      convRule: rule79
  }, {
      start: 627,
      length: 2,
      convRule: rule20
  }, {
      start: 629,
      length: 1,
      convRule: rule80
  }, {
      start: 630,
      length: 7,
      convRule: rule20
  }, {
      start: 637,
      length: 1,
      convRule: rule81
  }, {
      start: 638,
      length: 2,
      convRule: rule20
  }, {
      start: 640,
      length: 1,
      convRule: rule82
  }, {
      start: 641,
      length: 1,
      convRule: rule20
  }, {
      start: 642,
      length: 1,
      convRule: rule83
  }, {
      start: 643,
      length: 1,
      convRule: rule82
  }, {
      start: 644,
      length: 3,
      convRule: rule20
  }, {
      start: 647,
      length: 1,
      convRule: rule84
  }, {
      start: 648,
      length: 1,
      convRule: rule82
  }, {
      start: 649,
      length: 1,
      convRule: rule85
  }, {
      start: 650,
      length: 2,
      convRule: rule86
  }, {
      start: 652,
      length: 1,
      convRule: rule87
  }, {
      start: 653,
      length: 5,
      convRule: rule20
  }, {
      start: 658,
      length: 1,
      convRule: rule88
  }, {
      start: 659,
      length: 1,
      convRule: rule20
  }, {
      start: 660,
      length: 1,
      convRule: rule14
  }, {
      start: 661,
      length: 8,
      convRule: rule20
  }, {
      start: 669,
      length: 1,
      convRule: rule89
  }, {
      start: 670,
      length: 1,
      convRule: rule90
  }, {
      start: 671,
      length: 17,
      convRule: rule20
  }, {
      start: 688,
      length: 18,
      convRule: rule91
  }, {
      start: 706,
      length: 4,
      convRule: rule10
  }, {
      start: 710,
      length: 12,
      convRule: rule91
  }, {
      start: 722,
      length: 14,
      convRule: rule10
  }, {
      start: 736,
      length: 5,
      convRule: rule91
  }, {
      start: 741,
      length: 7,
      convRule: rule10
  }, {
      start: 748,
      length: 1,
      convRule: rule91
  }, {
      start: 749,
      length: 1,
      convRule: rule10
  }, {
      start: 750,
      length: 1,
      convRule: rule91
  }, {
      start: 751,
      length: 17,
      convRule: rule10
  }, {
      start: 768,
      length: 69,
      convRule: rule92
  }, {
      start: 837,
      length: 1,
      convRule: rule93
  }, {
      start: 838,
      length: 42,
      convRule: rule92
  }, {
      start: 880,
      length: 1,
      convRule: rule22
  }, {
      start: 881,
      length: 1,
      convRule: rule23
  }, {
      start: 882,
      length: 1,
      convRule: rule22
  }, {
      start: 883,
      length: 1,
      convRule: rule23
  }, {
      start: 884,
      length: 1,
      convRule: rule91
  }, {
      start: 885,
      length: 1,
      convRule: rule10
  }, {
      start: 886,
      length: 1,
      convRule: rule22
  }, {
      start: 887,
      length: 1,
      convRule: rule23
  }, {
      start: 890,
      length: 1,
      convRule: rule91
  }, {
      start: 891,
      length: 3,
      convRule: rule41
  }, {
      start: 894,
      length: 1,
      convRule: rule2
  }, {
      start: 895,
      length: 1,
      convRule: rule94
  }, {
      start: 900,
      length: 2,
      convRule: rule10
  }, {
      start: 902,
      length: 1,
      convRule: rule95
  }, {
      start: 903,
      length: 1,
      convRule: rule2
  }, {
      start: 904,
      length: 3,
      convRule: rule96
  }, {
      start: 908,
      length: 1,
      convRule: rule97
  }, {
      start: 910,
      length: 2,
      convRule: rule98
  }, {
      start: 912,
      length: 1,
      convRule: rule20
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule99
  }, {
      start: 941,
      length: 3,
      convRule: rule100
  }, {
      start: 944,
      length: 1,
      convRule: rule20
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule101
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule102
  }, {
      start: 973,
      length: 2,
      convRule: rule103
  }, {
      start: 975,
      length: 1,
      convRule: rule104
  }, {
      start: 976,
      length: 1,
      convRule: rule105
  }, {
      start: 977,
      length: 1,
      convRule: rule106
  }, {
      start: 978,
      length: 3,
      convRule: rule107
  }, {
      start: 981,
      length: 1,
      convRule: rule108
  }, {
      start: 982,
      length: 1,
      convRule: rule109
  }, {
      start: 983,
      length: 1,
      convRule: rule110
  }, {
      start: 984,
      length: 1,
      convRule: rule22
  }, {
      start: 985,
      length: 1,
      convRule: rule23
  }, {
      start: 986,
      length: 1,
      convRule: rule22
  }, {
      start: 987,
      length: 1,
      convRule: rule23
  }, {
      start: 988,
      length: 1,
      convRule: rule22
  }, {
      start: 989,
      length: 1,
      convRule: rule23
  }, {
      start: 990,
      length: 1,
      convRule: rule22
  }, {
      start: 991,
      length: 1,
      convRule: rule23
  }, {
      start: 992,
      length: 1,
      convRule: rule22
  }, {
      start: 993,
      length: 1,
      convRule: rule23
  }, {
      start: 994,
      length: 1,
      convRule: rule22
  }, {
      start: 995,
      length: 1,
      convRule: rule23
  }, {
      start: 996,
      length: 1,
      convRule: rule22
  }, {
      start: 997,
      length: 1,
      convRule: rule23
  }, {
      start: 998,
      length: 1,
      convRule: rule22
  }, {
      start: 999,
      length: 1,
      convRule: rule23
  }, {
      start: 1000,
      length: 1,
      convRule: rule22
  }, {
      start: 1001,
      length: 1,
      convRule: rule23
  }, {
      start: 1002,
      length: 1,
      convRule: rule22
  }, {
      start: 1003,
      length: 1,
      convRule: rule23
  }, {
      start: 1004,
      length: 1,
      convRule: rule22
  }, {
      start: 1005,
      length: 1,
      convRule: rule23
  }, {
      start: 1006,
      length: 1,
      convRule: rule22
  }, {
      start: 1007,
      length: 1,
      convRule: rule23
  }, {
      start: 1008,
      length: 1,
      convRule: rule111
  }, {
      start: 1009,
      length: 1,
      convRule: rule112
  }, {
      start: 1010,
      length: 1,
      convRule: rule113
  }, {
      start: 1011,
      length: 1,
      convRule: rule114
  }, {
      start: 1012,
      length: 1,
      convRule: rule115
  }, {
      start: 1013,
      length: 1,
      convRule: rule116
  }, {
      start: 1014,
      length: 1,
      convRule: rule6
  }, {
      start: 1015,
      length: 1,
      convRule: rule22
  }, {
      start: 1016,
      length: 1,
      convRule: rule23
  }, {
      start: 1017,
      length: 1,
      convRule: rule117
  }, {
      start: 1018,
      length: 1,
      convRule: rule22
  }, {
      start: 1019,
      length: 1,
      convRule: rule23
  }, {
      start: 1020,
      length: 1,
      convRule: rule20
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule118
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule112
  }, {
      start: 1120,
      length: 1,
      convRule: rule22
  }, {
      start: 1121,
      length: 1,
      convRule: rule23
  }, {
      start: 1122,
      length: 1,
      convRule: rule22
  }, {
      start: 1123,
      length: 1,
      convRule: rule23
  }, {
      start: 1124,
      length: 1,
      convRule: rule22
  }, {
      start: 1125,
      length: 1,
      convRule: rule23
  }, {
      start: 1126,
      length: 1,
      convRule: rule22
  }, {
      start: 1127,
      length: 1,
      convRule: rule23
  }, {
      start: 1128,
      length: 1,
      convRule: rule22
  }, {
      start: 1129,
      length: 1,
      convRule: rule23
  }, {
      start: 1130,
      length: 1,
      convRule: rule22
  }, {
      start: 1131,
      length: 1,
      convRule: rule23
  }, {
      start: 1132,
      length: 1,
      convRule: rule22
  }, {
      start: 1133,
      length: 1,
      convRule: rule23
  }, {
      start: 1134,
      length: 1,
      convRule: rule22
  }, {
      start: 1135,
      length: 1,
      convRule: rule23
  }, {
      start: 1136,
      length: 1,
      convRule: rule22
  }, {
      start: 1137,
      length: 1,
      convRule: rule23
  }, {
      start: 1138,
      length: 1,
      convRule: rule22
  }, {
      start: 1139,
      length: 1,
      convRule: rule23
  }, {
      start: 1140,
      length: 1,
      convRule: rule22
  }, {
      start: 1141,
      length: 1,
      convRule: rule23
  }, {
      start: 1142,
      length: 1,
      convRule: rule22
  }, {
      start: 1143,
      length: 1,
      convRule: rule23
  }, {
      start: 1144,
      length: 1,
      convRule: rule22
  }, {
      start: 1145,
      length: 1,
      convRule: rule23
  }, {
      start: 1146,
      length: 1,
      convRule: rule22
  }, {
      start: 1147,
      length: 1,
      convRule: rule23
  }, {
      start: 1148,
      length: 1,
      convRule: rule22
  }, {
      start: 1149,
      length: 1,
      convRule: rule23
  }, {
      start: 1150,
      length: 1,
      convRule: rule22
  }, {
      start: 1151,
      length: 1,
      convRule: rule23
  }, {
      start: 1152,
      length: 1,
      convRule: rule22
  }, {
      start: 1153,
      length: 1,
      convRule: rule23
  }, {
      start: 1154,
      length: 1,
      convRule: rule13
  }, {
      start: 1155,
      length: 5,
      convRule: rule92
  }, {
      start: 1160,
      length: 2,
      convRule: rule119
  }, {
      start: 1162,
      length: 1,
      convRule: rule22
  }, {
      start: 1163,
      length: 1,
      convRule: rule23
  }, {
      start: 1164,
      length: 1,
      convRule: rule22
  }, {
      start: 1165,
      length: 1,
      convRule: rule23
  }, {
      start: 1166,
      length: 1,
      convRule: rule22
  }, {
      start: 1167,
      length: 1,
      convRule: rule23
  }, {
      start: 1168,
      length: 1,
      convRule: rule22
  }, {
      start: 1169,
      length: 1,
      convRule: rule23
  }, {
      start: 1170,
      length: 1,
      convRule: rule22
  }, {
      start: 1171,
      length: 1,
      convRule: rule23
  }, {
      start: 1172,
      length: 1,
      convRule: rule22
  }, {
      start: 1173,
      length: 1,
      convRule: rule23
  }, {
      start: 1174,
      length: 1,
      convRule: rule22
  }, {
      start: 1175,
      length: 1,
      convRule: rule23
  }, {
      start: 1176,
      length: 1,
      convRule: rule22
  }, {
      start: 1177,
      length: 1,
      convRule: rule23
  }, {
      start: 1178,
      length: 1,
      convRule: rule22
  }, {
      start: 1179,
      length: 1,
      convRule: rule23
  }, {
      start: 1180,
      length: 1,
      convRule: rule22
  }, {
      start: 1181,
      length: 1,
      convRule: rule23
  }, {
      start: 1182,
      length: 1,
      convRule: rule22
  }, {
      start: 1183,
      length: 1,
      convRule: rule23
  }, {
      start: 1184,
      length: 1,
      convRule: rule22
  }, {
      start: 1185,
      length: 1,
      convRule: rule23
  }, {
      start: 1186,
      length: 1,
      convRule: rule22
  }, {
      start: 1187,
      length: 1,
      convRule: rule23
  }, {
      start: 1188,
      length: 1,
      convRule: rule22
  }, {
      start: 1189,
      length: 1,
      convRule: rule23
  }, {
      start: 1190,
      length: 1,
      convRule: rule22
  }, {
      start: 1191,
      length: 1,
      convRule: rule23
  }, {
      start: 1192,
      length: 1,
      convRule: rule22
  }, {
      start: 1193,
      length: 1,
      convRule: rule23
  }, {
      start: 1194,
      length: 1,
      convRule: rule22
  }, {
      start: 1195,
      length: 1,
      convRule: rule23
  }, {
      start: 1196,
      length: 1,
      convRule: rule22
  }, {
      start: 1197,
      length: 1,
      convRule: rule23
  }, {
      start: 1198,
      length: 1,
      convRule: rule22
  }, {
      start: 1199,
      length: 1,
      convRule: rule23
  }, {
      start: 1200,
      length: 1,
      convRule: rule22
  }, {
      start: 1201,
      length: 1,
      convRule: rule23
  }, {
      start: 1202,
      length: 1,
      convRule: rule22
  }, {
      start: 1203,
      length: 1,
      convRule: rule23
  }, {
      start: 1204,
      length: 1,
      convRule: rule22
  }, {
      start: 1205,
      length: 1,
      convRule: rule23
  }, {
      start: 1206,
      length: 1,
      convRule: rule22
  }, {
      start: 1207,
      length: 1,
      convRule: rule23
  }, {
      start: 1208,
      length: 1,
      convRule: rule22
  }, {
      start: 1209,
      length: 1,
      convRule: rule23
  }, {
      start: 1210,
      length: 1,
      convRule: rule22
  }, {
      start: 1211,
      length: 1,
      convRule: rule23
  }, {
      start: 1212,
      length: 1,
      convRule: rule22
  }, {
      start: 1213,
      length: 1,
      convRule: rule23
  }, {
      start: 1214,
      length: 1,
      convRule: rule22
  }, {
      start: 1215,
      length: 1,
      convRule: rule23
  }, {
      start: 1216,
      length: 1,
      convRule: rule120
  }, {
      start: 1217,
      length: 1,
      convRule: rule22
  }, {
      start: 1218,
      length: 1,
      convRule: rule23
  }, {
      start: 1219,
      length: 1,
      convRule: rule22
  }, {
      start: 1220,
      length: 1,
      convRule: rule23
  }, {
      start: 1221,
      length: 1,
      convRule: rule22
  }, {
      start: 1222,
      length: 1,
      convRule: rule23
  }, {
      start: 1223,
      length: 1,
      convRule: rule22
  }, {
      start: 1224,
      length: 1,
      convRule: rule23
  }, {
      start: 1225,
      length: 1,
      convRule: rule22
  }, {
      start: 1226,
      length: 1,
      convRule: rule23
  }, {
      start: 1227,
      length: 1,
      convRule: rule22
  }, {
      start: 1228,
      length: 1,
      convRule: rule23
  }, {
      start: 1229,
      length: 1,
      convRule: rule22
  }, {
      start: 1230,
      length: 1,
      convRule: rule23
  }, {
      start: 1231,
      length: 1,
      convRule: rule121
  }, {
      start: 1232,
      length: 1,
      convRule: rule22
  }, {
      start: 1233,
      length: 1,
      convRule: rule23
  }, {
      start: 1234,
      length: 1,
      convRule: rule22
  }, {
      start: 1235,
      length: 1,
      convRule: rule23
  }, {
      start: 1236,
      length: 1,
      convRule: rule22
  }, {
      start: 1237,
      length: 1,
      convRule: rule23
  }, {
      start: 1238,
      length: 1,
      convRule: rule22
  }, {
      start: 1239,
      length: 1,
      convRule: rule23
  }, {
      start: 1240,
      length: 1,
      convRule: rule22
  }, {
      start: 1241,
      length: 1,
      convRule: rule23
  }, {
      start: 1242,
      length: 1,
      convRule: rule22
  }, {
      start: 1243,
      length: 1,
      convRule: rule23
  }, {
      start: 1244,
      length: 1,
      convRule: rule22
  }, {
      start: 1245,
      length: 1,
      convRule: rule23
  }, {
      start: 1246,
      length: 1,
      convRule: rule22
  }, {
      start: 1247,
      length: 1,
      convRule: rule23
  }, {
      start: 1248,
      length: 1,
      convRule: rule22
  }, {
      start: 1249,
      length: 1,
      convRule: rule23
  }, {
      start: 1250,
      length: 1,
      convRule: rule22
  }, {
      start: 1251,
      length: 1,
      convRule: rule23
  }, {
      start: 1252,
      length: 1,
      convRule: rule22
  }, {
      start: 1253,
      length: 1,
      convRule: rule23
  }, {
      start: 1254,
      length: 1,
      convRule: rule22
  }, {
      start: 1255,
      length: 1,
      convRule: rule23
  }, {
      start: 1256,
      length: 1,
      convRule: rule22
  }, {
      start: 1257,
      length: 1,
      convRule: rule23
  }, {
      start: 1258,
      length: 1,
      convRule: rule22
  }, {
      start: 1259,
      length: 1,
      convRule: rule23
  }, {
      start: 1260,
      length: 1,
      convRule: rule22
  }, {
      start: 1261,
      length: 1,
      convRule: rule23
  }, {
      start: 1262,
      length: 1,
      convRule: rule22
  }, {
      start: 1263,
      length: 1,
      convRule: rule23
  }, {
      start: 1264,
      length: 1,
      convRule: rule22
  }, {
      start: 1265,
      length: 1,
      convRule: rule23
  }, {
      start: 1266,
      length: 1,
      convRule: rule22
  }, {
      start: 1267,
      length: 1,
      convRule: rule23
  }, {
      start: 1268,
      length: 1,
      convRule: rule22
  }, {
      start: 1269,
      length: 1,
      convRule: rule23
  }, {
      start: 1270,
      length: 1,
      convRule: rule22
  }, {
      start: 1271,
      length: 1,
      convRule: rule23
  }, {
      start: 1272,
      length: 1,
      convRule: rule22
  }, {
      start: 1273,
      length: 1,
      convRule: rule23
  }, {
      start: 1274,
      length: 1,
      convRule: rule22
  }, {
      start: 1275,
      length: 1,
      convRule: rule23
  }, {
      start: 1276,
      length: 1,
      convRule: rule22
  }, {
      start: 1277,
      length: 1,
      convRule: rule23
  }, {
      start: 1278,
      length: 1,
      convRule: rule22
  }, {
      start: 1279,
      length: 1,
      convRule: rule23
  }, {
      start: 1280,
      length: 1,
      convRule: rule22
  }, {
      start: 1281,
      length: 1,
      convRule: rule23
  }, {
      start: 1282,
      length: 1,
      convRule: rule22
  }, {
      start: 1283,
      length: 1,
      convRule: rule23
  }, {
      start: 1284,
      length: 1,
      convRule: rule22
  }, {
      start: 1285,
      length: 1,
      convRule: rule23
  }, {
      start: 1286,
      length: 1,
      convRule: rule22
  }, {
      start: 1287,
      length: 1,
      convRule: rule23
  }, {
      start: 1288,
      length: 1,
      convRule: rule22
  }, {
      start: 1289,
      length: 1,
      convRule: rule23
  }, {
      start: 1290,
      length: 1,
      convRule: rule22
  }, {
      start: 1291,
      length: 1,
      convRule: rule23
  }, {
      start: 1292,
      length: 1,
      convRule: rule22
  }, {
      start: 1293,
      length: 1,
      convRule: rule23
  }, {
      start: 1294,
      length: 1,
      convRule: rule22
  }, {
      start: 1295,
      length: 1,
      convRule: rule23
  }, {
      start: 1296,
      length: 1,
      convRule: rule22
  }, {
      start: 1297,
      length: 1,
      convRule: rule23
  }, {
      start: 1298,
      length: 1,
      convRule: rule22
  }, {
      start: 1299,
      length: 1,
      convRule: rule23
  }, {
      start: 1300,
      length: 1,
      convRule: rule22
  }, {
      start: 1301,
      length: 1,
      convRule: rule23
  }, {
      start: 1302,
      length: 1,
      convRule: rule22
  }, {
      start: 1303,
      length: 1,
      convRule: rule23
  }, {
      start: 1304,
      length: 1,
      convRule: rule22
  }, {
      start: 1305,
      length: 1,
      convRule: rule23
  }, {
      start: 1306,
      length: 1,
      convRule: rule22
  }, {
      start: 1307,
      length: 1,
      convRule: rule23
  }, {
      start: 1308,
      length: 1,
      convRule: rule22
  }, {
      start: 1309,
      length: 1,
      convRule: rule23
  }, {
      start: 1310,
      length: 1,
      convRule: rule22
  }, {
      start: 1311,
      length: 1,
      convRule: rule23
  }, {
      start: 1312,
      length: 1,
      convRule: rule22
  }, {
      start: 1313,
      length: 1,
      convRule: rule23
  }, {
      start: 1314,
      length: 1,
      convRule: rule22
  }, {
      start: 1315,
      length: 1,
      convRule: rule23
  }, {
      start: 1316,
      length: 1,
      convRule: rule22
  }, {
      start: 1317,
      length: 1,
      convRule: rule23
  }, {
      start: 1318,
      length: 1,
      convRule: rule22
  }, {
      start: 1319,
      length: 1,
      convRule: rule23
  }, {
      start: 1320,
      length: 1,
      convRule: rule22
  }, {
      start: 1321,
      length: 1,
      convRule: rule23
  }, {
      start: 1322,
      length: 1,
      convRule: rule22
  }, {
      start: 1323,
      length: 1,
      convRule: rule23
  }, {
      start: 1324,
      length: 1,
      convRule: rule22
  }, {
      start: 1325,
      length: 1,
      convRule: rule23
  }, {
      start: 1326,
      length: 1,
      convRule: rule22
  }, {
      start: 1327,
      length: 1,
      convRule: rule23
  }, {
      start: 1329,
      length: 38,
      convRule: rule122
  }, {
      start: 1369,
      length: 1,
      convRule: rule91
  }, {
      start: 1370,
      length: 6,
      convRule: rule2
  }, {
      start: 1376,
      length: 1,
      convRule: rule20
  }, {
      start: 1377,
      length: 38,
      convRule: rule123
  }, {
      start: 1415,
      length: 2,
      convRule: rule20
  }, {
      start: 1417,
      length: 1,
      convRule: rule2
  }, {
      start: 1418,
      length: 1,
      convRule: rule7
  }, {
      start: 1421,
      length: 2,
      convRule: rule13
  }, {
      start: 1423,
      length: 1,
      convRule: rule3
  }, {
      start: 1425,
      length: 45,
      convRule: rule92
  }, {
      start: 1470,
      length: 1,
      convRule: rule7
  }, {
      start: 1471,
      length: 1,
      convRule: rule92
  }, {
      start: 1472,
      length: 1,
      convRule: rule2
  }, {
      start: 1473,
      length: 2,
      convRule: rule92
  }, {
      start: 1475,
      length: 1,
      convRule: rule2
  }, {
      start: 1476,
      length: 2,
      convRule: rule92
  }, {
      start: 1478,
      length: 1,
      convRule: rule2
  }, {
      start: 1479,
      length: 1,
      convRule: rule92
  }, {
      start: 1488,
      length: 27,
      convRule: rule14
  }, {
      start: 1519,
      length: 4,
      convRule: rule14
  }, {
      start: 1523,
      length: 2,
      convRule: rule2
  }, {
      start: 1536,
      length: 6,
      convRule: rule16
  }, {
      start: 1542,
      length: 3,
      convRule: rule6
  }, {
      start: 1545,
      length: 2,
      convRule: rule2
  }, {
      start: 1547,
      length: 1,
      convRule: rule3
  }, {
      start: 1548,
      length: 2,
      convRule: rule2
  }, {
      start: 1550,
      length: 2,
      convRule: rule13
  }, {
      start: 1552,
      length: 11,
      convRule: rule92
  }, {
      start: 1563,
      length: 1,
      convRule: rule2
  }, {
      start: 1564,
      length: 1,
      convRule: rule16
  }, {
      start: 1566,
      length: 2,
      convRule: rule2
  }, {
      start: 1568,
      length: 32,
      convRule: rule14
  }, {
      start: 1600,
      length: 1,
      convRule: rule91
  }, {
      start: 1601,
      length: 10,
      convRule: rule14
  }, {
      start: 1611,
      length: 21,
      convRule: rule92
  }, {
      start: 1632,
      length: 10,
      convRule: rule8
  }, {
      start: 1642,
      length: 4,
      convRule: rule2
  }, {
      start: 1646,
      length: 2,
      convRule: rule14
  }, {
      start: 1648,
      length: 1,
      convRule: rule92
  }, {
      start: 1649,
      length: 99,
      convRule: rule14
  }, {
      start: 1748,
      length: 1,
      convRule: rule2
  }, {
      start: 1749,
      length: 1,
      convRule: rule14
  }, {
      start: 1750,
      length: 7,
      convRule: rule92
  }, {
      start: 1757,
      length: 1,
      convRule: rule16
  }, {
      start: 1758,
      length: 1,
      convRule: rule13
  }, {
      start: 1759,
      length: 6,
      convRule: rule92
  }, {
      start: 1765,
      length: 2,
      convRule: rule91
  }, {
      start: 1767,
      length: 2,
      convRule: rule92
  }, {
      start: 1769,
      length: 1,
      convRule: rule13
  }, {
      start: 1770,
      length: 4,
      convRule: rule92
  }, {
      start: 1774,
      length: 2,
      convRule: rule14
  }, {
      start: 1776,
      length: 10,
      convRule: rule8
  }, {
      start: 1786,
      length: 3,
      convRule: rule14
  }, {
      start: 1789,
      length: 2,
      convRule: rule13
  }, {
      start: 1791,
      length: 1,
      convRule: rule14
  }, {
      start: 1792,
      length: 14,
      convRule: rule2
  }, {
      start: 1807,
      length: 1,
      convRule: rule16
  }, {
      start: 1808,
      length: 1,
      convRule: rule14
  }, {
      start: 1809,
      length: 1,
      convRule: rule92
  }, {
      start: 1810,
      length: 30,
      convRule: rule14
  }, {
      start: 1840,
      length: 27,
      convRule: rule92
  }, {
      start: 1869,
      length: 89,
      convRule: rule14
  }, {
      start: 1958,
      length: 11,
      convRule: rule92
  }, {
      start: 1969,
      length: 1,
      convRule: rule14
  }, {
      start: 1984,
      length: 10,
      convRule: rule8
  }, {
      start: 1994,
      length: 33,
      convRule: rule14
  }, {
      start: 2027,
      length: 9,
      convRule: rule92
  }, {
      start: 2036,
      length: 2,
      convRule: rule91
  }, {
      start: 2038,
      length: 1,
      convRule: rule13
  }, {
      start: 2039,
      length: 3,
      convRule: rule2
  }, {
      start: 2042,
      length: 1,
      convRule: rule91
  }, {
      start: 2045,
      length: 1,
      convRule: rule92
  }, {
      start: 2046,
      length: 2,
      convRule: rule3
  }, {
      start: 2048,
      length: 22,
      convRule: rule14
  }, {
      start: 2070,
      length: 4,
      convRule: rule92
  }, {
      start: 2074,
      length: 1,
      convRule: rule91
  }, {
      start: 2075,
      length: 9,
      convRule: rule92
  }, {
      start: 2084,
      length: 1,
      convRule: rule91
  }, {
      start: 2085,
      length: 3,
      convRule: rule92
  }, {
      start: 2088,
      length: 1,
      convRule: rule91
  }, {
      start: 2089,
      length: 5,
      convRule: rule92
  }, {
      start: 2096,
      length: 15,
      convRule: rule2
  }, {
      start: 2112,
      length: 25,
      convRule: rule14
  }, {
      start: 2137,
      length: 3,
      convRule: rule92
  }, {
      start: 2142,
      length: 1,
      convRule: rule2
  }, {
      start: 2144,
      length: 11,
      convRule: rule14
  }, {
      start: 2208,
      length: 21,
      convRule: rule14
  }, {
      start: 2230,
      length: 18,
      convRule: rule14
  }, {
      start: 2259,
      length: 15,
      convRule: rule92
  }, {
      start: 2274,
      length: 1,
      convRule: rule16
  }, {
      start: 2275,
      length: 32,
      convRule: rule92
  }, {
      start: 2307,
      length: 1,
      convRule: rule124
  }, {
      start: 2308,
      length: 54,
      convRule: rule14
  }, {
      start: 2362,
      length: 1,
      convRule: rule92
  }, {
      start: 2363,
      length: 1,
      convRule: rule124
  }, {
      start: 2364,
      length: 1,
      convRule: rule92
  }, {
      start: 2365,
      length: 1,
      convRule: rule14
  }, {
      start: 2366,
      length: 3,
      convRule: rule124
  }, {
      start: 2369,
      length: 8,
      convRule: rule92
  }, {
      start: 2377,
      length: 4,
      convRule: rule124
  }, {
      start: 2381,
      length: 1,
      convRule: rule92
  }, {
      start: 2382,
      length: 2,
      convRule: rule124
  }, {
      start: 2384,
      length: 1,
      convRule: rule14
  }, {
      start: 2385,
      length: 7,
      convRule: rule92
  }, {
      start: 2392,
      length: 10,
      convRule: rule14
  }, {
      start: 2402,
      length: 2,
      convRule: rule92
  }, {
      start: 2404,
      length: 2,
      convRule: rule2
  }, {
      start: 2406,
      length: 10,
      convRule: rule8
  }, {
      start: 2416,
      length: 1,
      convRule: rule2
  }, {
      start: 2417,
      length: 1,
      convRule: rule91
  }, {
      start: 2418,
      length: 15,
      convRule: rule14
  }, {
      start: 2433,
      length: 1,
      convRule: rule92
  }, {
      start: 2434,
      length: 2,
      convRule: rule124
  }, {
      start: 2437,
      length: 8,
      convRule: rule14
  }, {
      start: 2447,
      length: 2,
      convRule: rule14
  }, {
      start: 2451,
      length: 22,
      convRule: rule14
  }, {
      start: 2474,
      length: 7,
      convRule: rule14
  }, {
      start: 2482,
      length: 1,
      convRule: rule14
  }, {
      start: 2486,
      length: 4,
      convRule: rule14
  }, {
      start: 2492,
      length: 1,
      convRule: rule92
  }, {
      start: 2493,
      length: 1,
      convRule: rule14
  }, {
      start: 2494,
      length: 3,
      convRule: rule124
  }, {
      start: 2497,
      length: 4,
      convRule: rule92
  }, {
      start: 2503,
      length: 2,
      convRule: rule124
  }, {
      start: 2507,
      length: 2,
      convRule: rule124
  }, {
      start: 2509,
      length: 1,
      convRule: rule92
  }, {
      start: 2510,
      length: 1,
      convRule: rule14
  }, {
      start: 2519,
      length: 1,
      convRule: rule124
  }, {
      start: 2524,
      length: 2,
      convRule: rule14
  }, {
      start: 2527,
      length: 3,
      convRule: rule14
  }, {
      start: 2530,
      length: 2,
      convRule: rule92
  }, {
      start: 2534,
      length: 10,
      convRule: rule8
  }, {
      start: 2544,
      length: 2,
      convRule: rule14
  }, {
      start: 2546,
      length: 2,
      convRule: rule3
  }, {
      start: 2548,
      length: 6,
      convRule: rule17
  }, {
      start: 2554,
      length: 1,
      convRule: rule13
  }, {
      start: 2555,
      length: 1,
      convRule: rule3
  }, {
      start: 2556,
      length: 1,
      convRule: rule14
  }, {
      start: 2557,
      length: 1,
      convRule: rule2
  }, {
      start: 2558,
      length: 1,
      convRule: rule92
  }, {
      start: 2561,
      length: 2,
      convRule: rule92
  }, {
      start: 2563,
      length: 1,
      convRule: rule124
  }, {
      start: 2565,
      length: 6,
      convRule: rule14
  }, {
      start: 2575,
      length: 2,
      convRule: rule14
  }, {
      start: 2579,
      length: 22,
      convRule: rule14
  }, {
      start: 2602,
      length: 7,
      convRule: rule14
  }, {
      start: 2610,
      length: 2,
      convRule: rule14
  }, {
      start: 2613,
      length: 2,
      convRule: rule14
  }, {
      start: 2616,
      length: 2,
      convRule: rule14
  }, {
      start: 2620,
      length: 1,
      convRule: rule92
  }, {
      start: 2622,
      length: 3,
      convRule: rule124
  }, {
      start: 2625,
      length: 2,
      convRule: rule92
  }, {
      start: 2631,
      length: 2,
      convRule: rule92
  }, {
      start: 2635,
      length: 3,
      convRule: rule92
  }, {
      start: 2641,
      length: 1,
      convRule: rule92
  }, {
      start: 2649,
      length: 4,
      convRule: rule14
  }, {
      start: 2654,
      length: 1,
      convRule: rule14
  }, {
      start: 2662,
      length: 10,
      convRule: rule8
  }, {
      start: 2672,
      length: 2,
      convRule: rule92
  }, {
      start: 2674,
      length: 3,
      convRule: rule14
  }, {
      start: 2677,
      length: 1,
      convRule: rule92
  }, {
      start: 2678,
      length: 1,
      convRule: rule2
  }, {
      start: 2689,
      length: 2,
      convRule: rule92
  }, {
      start: 2691,
      length: 1,
      convRule: rule124
  }, {
      start: 2693,
      length: 9,
      convRule: rule14
  }, {
      start: 2703,
      length: 3,
      convRule: rule14
  }, {
      start: 2707,
      length: 22,
      convRule: rule14
  }, {
      start: 2730,
      length: 7,
      convRule: rule14
  }, {
      start: 2738,
      length: 2,
      convRule: rule14
  }, {
      start: 2741,
      length: 5,
      convRule: rule14
  }, {
      start: 2748,
      length: 1,
      convRule: rule92
  }, {
      start: 2749,
      length: 1,
      convRule: rule14
  }, {
      start: 2750,
      length: 3,
      convRule: rule124
  }, {
      start: 2753,
      length: 5,
      convRule: rule92
  }, {
      start: 2759,
      length: 2,
      convRule: rule92
  }, {
      start: 2761,
      length: 1,
      convRule: rule124
  }, {
      start: 2763,
      length: 2,
      convRule: rule124
  }, {
      start: 2765,
      length: 1,
      convRule: rule92
  }, {
      start: 2768,
      length: 1,
      convRule: rule14
  }, {
      start: 2784,
      length: 2,
      convRule: rule14
  }, {
      start: 2786,
      length: 2,
      convRule: rule92
  }, {
      start: 2790,
      length: 10,
      convRule: rule8
  }, {
      start: 2800,
      length: 1,
      convRule: rule2
  }, {
      start: 2801,
      length: 1,
      convRule: rule3
  }, {
      start: 2809,
      length: 1,
      convRule: rule14
  }, {
      start: 2810,
      length: 6,
      convRule: rule92
  }, {
      start: 2817,
      length: 1,
      convRule: rule92
  }, {
      start: 2818,
      length: 2,
      convRule: rule124
  }, {
      start: 2821,
      length: 8,
      convRule: rule14
  }, {
      start: 2831,
      length: 2,
      convRule: rule14
  }, {
      start: 2835,
      length: 22,
      convRule: rule14
  }, {
      start: 2858,
      length: 7,
      convRule: rule14
  }, {
      start: 2866,
      length: 2,
      convRule: rule14
  }, {
      start: 2869,
      length: 5,
      convRule: rule14
  }, {
      start: 2876,
      length: 1,
      convRule: rule92
  }, {
      start: 2877,
      length: 1,
      convRule: rule14
  }, {
      start: 2878,
      length: 1,
      convRule: rule124
  }, {
      start: 2879,
      length: 1,
      convRule: rule92
  }, {
      start: 2880,
      length: 1,
      convRule: rule124
  }, {
      start: 2881,
      length: 4,
      convRule: rule92
  }, {
      start: 2887,
      length: 2,
      convRule: rule124
  }, {
      start: 2891,
      length: 2,
      convRule: rule124
  }, {
      start: 2893,
      length: 1,
      convRule: rule92
  }, {
      start: 2901,
      length: 2,
      convRule: rule92
  }, {
      start: 2903,
      length: 1,
      convRule: rule124
  }, {
      start: 2908,
      length: 2,
      convRule: rule14
  }, {
      start: 2911,
      length: 3,
      convRule: rule14
  }, {
      start: 2914,
      length: 2,
      convRule: rule92
  }, {
      start: 2918,
      length: 10,
      convRule: rule8
  }, {
      start: 2928,
      length: 1,
      convRule: rule13
  }, {
      start: 2929,
      length: 1,
      convRule: rule14
  }, {
      start: 2930,
      length: 6,
      convRule: rule17
  }, {
      start: 2946,
      length: 1,
      convRule: rule92
  }, {
      start: 2947,
      length: 1,
      convRule: rule14
  }, {
      start: 2949,
      length: 6,
      convRule: rule14
  }, {
      start: 2958,
      length: 3,
      convRule: rule14
  }, {
      start: 2962,
      length: 4,
      convRule: rule14
  }, {
      start: 2969,
      length: 2,
      convRule: rule14
  }, {
      start: 2972,
      length: 1,
      convRule: rule14
  }, {
      start: 2974,
      length: 2,
      convRule: rule14
  }, {
      start: 2979,
      length: 2,
      convRule: rule14
  }, {
      start: 2984,
      length: 3,
      convRule: rule14
  }, {
      start: 2990,
      length: 12,
      convRule: rule14
  }, {
      start: 3006,
      length: 2,
      convRule: rule124
  }, {
      start: 3008,
      length: 1,
      convRule: rule92
  }, {
      start: 3009,
      length: 2,
      convRule: rule124
  }, {
      start: 3014,
      length: 3,
      convRule: rule124
  }, {
      start: 3018,
      length: 3,
      convRule: rule124
  }, {
      start: 3021,
      length: 1,
      convRule: rule92
  }, {
      start: 3024,
      length: 1,
      convRule: rule14
  }, {
      start: 3031,
      length: 1,
      convRule: rule124
  }, {
      start: 3046,
      length: 10,
      convRule: rule8
  }, {
      start: 3056,
      length: 3,
      convRule: rule17
  }, {
      start: 3059,
      length: 6,
      convRule: rule13
  }, {
      start: 3065,
      length: 1,
      convRule: rule3
  }, {
      start: 3066,
      length: 1,
      convRule: rule13
  }, {
      start: 3072,
      length: 1,
      convRule: rule92
  }, {
      start: 3073,
      length: 3,
      convRule: rule124
  }, {
      start: 3076,
      length: 1,
      convRule: rule92
  }, {
      start: 3077,
      length: 8,
      convRule: rule14
  }, {
      start: 3086,
      length: 3,
      convRule: rule14
  }, {
      start: 3090,
      length: 23,
      convRule: rule14
  }, {
      start: 3114,
      length: 16,
      convRule: rule14
  }, {
      start: 3133,
      length: 1,
      convRule: rule14
  }, {
      start: 3134,
      length: 3,
      convRule: rule92
  }, {
      start: 3137,
      length: 4,
      convRule: rule124
  }, {
      start: 3142,
      length: 3,
      convRule: rule92
  }, {
      start: 3146,
      length: 4,
      convRule: rule92
  }, {
      start: 3157,
      length: 2,
      convRule: rule92
  }, {
      start: 3160,
      length: 3,
      convRule: rule14
  }, {
      start: 3168,
      length: 2,
      convRule: rule14
  }, {
      start: 3170,
      length: 2,
      convRule: rule92
  }, {
      start: 3174,
      length: 10,
      convRule: rule8
  }, {
      start: 3191,
      length: 1,
      convRule: rule2
  }, {
      start: 3192,
      length: 7,
      convRule: rule17
  }, {
      start: 3199,
      length: 1,
      convRule: rule13
  }, {
      start: 3200,
      length: 1,
      convRule: rule14
  }, {
      start: 3201,
      length: 1,
      convRule: rule92
  }, {
      start: 3202,
      length: 2,
      convRule: rule124
  }, {
      start: 3204,
      length: 1,
      convRule: rule2
  }, {
      start: 3205,
      length: 8,
      convRule: rule14
  }, {
      start: 3214,
      length: 3,
      convRule: rule14
  }, {
      start: 3218,
      length: 23,
      convRule: rule14
  }, {
      start: 3242,
      length: 10,
      convRule: rule14
  }, {
      start: 3253,
      length: 5,
      convRule: rule14
  }, {
      start: 3260,
      length: 1,
      convRule: rule92
  }, {
      start: 3261,
      length: 1,
      convRule: rule14
  }, {
      start: 3262,
      length: 1,
      convRule: rule124
  }, {
      start: 3263,
      length: 1,
      convRule: rule92
  }, {
      start: 3264,
      length: 5,
      convRule: rule124
  }, {
      start: 3270,
      length: 1,
      convRule: rule92
  }, {
      start: 3271,
      length: 2,
      convRule: rule124
  }, {
      start: 3274,
      length: 2,
      convRule: rule124
  }, {
      start: 3276,
      length: 2,
      convRule: rule92
  }, {
      start: 3285,
      length: 2,
      convRule: rule124
  }, {
      start: 3294,
      length: 1,
      convRule: rule14
  }, {
      start: 3296,
      length: 2,
      convRule: rule14
  }, {
      start: 3298,
      length: 2,
      convRule: rule92
  }, {
      start: 3302,
      length: 10,
      convRule: rule8
  }, {
      start: 3313,
      length: 2,
      convRule: rule14
  }, {
      start: 3328,
      length: 2,
      convRule: rule92
  }, {
      start: 3330,
      length: 2,
      convRule: rule124
  }, {
      start: 3332,
      length: 9,
      convRule: rule14
  }, {
      start: 3342,
      length: 3,
      convRule: rule14
  }, {
      start: 3346,
      length: 41,
      convRule: rule14
  }, {
      start: 3387,
      length: 2,
      convRule: rule92
  }, {
      start: 3389,
      length: 1,
      convRule: rule14
  }, {
      start: 3390,
      length: 3,
      convRule: rule124
  }, {
      start: 3393,
      length: 4,
      convRule: rule92
  }, {
      start: 3398,
      length: 3,
      convRule: rule124
  }, {
      start: 3402,
      length: 3,
      convRule: rule124
  }, {
      start: 3405,
      length: 1,
      convRule: rule92
  }, {
      start: 3406,
      length: 1,
      convRule: rule14
  }, {
      start: 3407,
      length: 1,
      convRule: rule13
  }, {
      start: 3412,
      length: 3,
      convRule: rule14
  }, {
      start: 3415,
      length: 1,
      convRule: rule124
  }, {
      start: 3416,
      length: 7,
      convRule: rule17
  }, {
      start: 3423,
      length: 3,
      convRule: rule14
  }, {
      start: 3426,
      length: 2,
      convRule: rule92
  }, {
      start: 3430,
      length: 10,
      convRule: rule8
  }, {
      start: 3440,
      length: 9,
      convRule: rule17
  }, {
      start: 3449,
      length: 1,
      convRule: rule13
  }, {
      start: 3450,
      length: 6,
      convRule: rule14
  }, {
      start: 3457,
      length: 1,
      convRule: rule92
  }, {
      start: 3458,
      length: 2,
      convRule: rule124
  }, {
      start: 3461,
      length: 18,
      convRule: rule14
  }, {
      start: 3482,
      length: 24,
      convRule: rule14
  }, {
      start: 3507,
      length: 9,
      convRule: rule14
  }, {
      start: 3517,
      length: 1,
      convRule: rule14
  }, {
      start: 3520,
      length: 7,
      convRule: rule14
  }, {
      start: 3530,
      length: 1,
      convRule: rule92
  }, {
      start: 3535,
      length: 3,
      convRule: rule124
  }, {
      start: 3538,
      length: 3,
      convRule: rule92
  }, {
      start: 3542,
      length: 1,
      convRule: rule92
  }, {
      start: 3544,
      length: 8,
      convRule: rule124
  }, {
      start: 3558,
      length: 10,
      convRule: rule8
  }, {
      start: 3570,
      length: 2,
      convRule: rule124
  }, {
      start: 3572,
      length: 1,
      convRule: rule2
  }, {
      start: 3585,
      length: 48,
      convRule: rule14
  }, {
      start: 3633,
      length: 1,
      convRule: rule92
  }, {
      start: 3634,
      length: 2,
      convRule: rule14
  }, {
      start: 3636,
      length: 7,
      convRule: rule92
  }, {
      start: 3647,
      length: 1,
      convRule: rule3
  }, {
      start: 3648,
      length: 6,
      convRule: rule14
  }, {
      start: 3654,
      length: 1,
      convRule: rule91
  }, {
      start: 3655,
      length: 8,
      convRule: rule92
  }, {
      start: 3663,
      length: 1,
      convRule: rule2
  }, {
      start: 3664,
      length: 10,
      convRule: rule8
  }, {
      start: 3674,
      length: 2,
      convRule: rule2
  }, {
      start: 3713,
      length: 2,
      convRule: rule14
  }, {
      start: 3716,
      length: 1,
      convRule: rule14
  }, {
      start: 3718,
      length: 5,
      convRule: rule14
  }, {
      start: 3724,
      length: 24,
      convRule: rule14
  }, {
      start: 3749,
      length: 1,
      convRule: rule14
  }, {
      start: 3751,
      length: 10,
      convRule: rule14
  }, {
      start: 3761,
      length: 1,
      convRule: rule92
  }, {
      start: 3762,
      length: 2,
      convRule: rule14
  }, {
      start: 3764,
      length: 9,
      convRule: rule92
  }, {
      start: 3773,
      length: 1,
      convRule: rule14
  }, {
      start: 3776,
      length: 5,
      convRule: rule14
  }, {
      start: 3782,
      length: 1,
      convRule: rule91
  }, {
      start: 3784,
      length: 6,
      convRule: rule92
  }, {
      start: 3792,
      length: 10,
      convRule: rule8
  }, {
      start: 3804,
      length: 4,
      convRule: rule14
  }, {
      start: 3840,
      length: 1,
      convRule: rule14
  }, {
      start: 3841,
      length: 3,
      convRule: rule13
  }, {
      start: 3844,
      length: 15,
      convRule: rule2
  }, {
      start: 3859,
      length: 1,
      convRule: rule13
  }, {
      start: 3860,
      length: 1,
      convRule: rule2
  }, {
      start: 3861,
      length: 3,
      convRule: rule13
  }, {
      start: 3864,
      length: 2,
      convRule: rule92
  }, {
      start: 3866,
      length: 6,
      convRule: rule13
  }, {
      start: 3872,
      length: 10,
      convRule: rule8
  }, {
      start: 3882,
      length: 10,
      convRule: rule17
  }, {
      start: 3892,
      length: 1,
      convRule: rule13
  }, {
      start: 3893,
      length: 1,
      convRule: rule92
  }, {
      start: 3894,
      length: 1,
      convRule: rule13
  }, {
      start: 3895,
      length: 1,
      convRule: rule92
  }, {
      start: 3896,
      length: 1,
      convRule: rule13
  }, {
      start: 3897,
      length: 1,
      convRule: rule92
  }, {
      start: 3898,
      length: 1,
      convRule: rule4
  }, {
      start: 3899,
      length: 1,
      convRule: rule5
  }, {
      start: 3900,
      length: 1,
      convRule: rule4
  }, {
      start: 3901,
      length: 1,
      convRule: rule5
  }, {
      start: 3902,
      length: 2,
      convRule: rule124
  }, {
      start: 3904,
      length: 8,
      convRule: rule14
  }, {
      start: 3913,
      length: 36,
      convRule: rule14
  }, {
      start: 3953,
      length: 14,
      convRule: rule92
  }, {
      start: 3967,
      length: 1,
      convRule: rule124
  }, {
      start: 3968,
      length: 5,
      convRule: rule92
  }, {
      start: 3973,
      length: 1,
      convRule: rule2
  }, {
      start: 3974,
      length: 2,
      convRule: rule92
  }, {
      start: 3976,
      length: 5,
      convRule: rule14
  }, {
      start: 3981,
      length: 11,
      convRule: rule92
  }, {
      start: 3993,
      length: 36,
      convRule: rule92
  }, {
      start: 4030,
      length: 8,
      convRule: rule13
  }, {
      start: 4038,
      length: 1,
      convRule: rule92
  }, {
      start: 4039,
      length: 6,
      convRule: rule13
  }, {
      start: 4046,
      length: 2,
      convRule: rule13
  }, {
      start: 4048,
      length: 5,
      convRule: rule2
  }, {
      start: 4053,
      length: 4,
      convRule: rule13
  }, {
      start: 4057,
      length: 2,
      convRule: rule2
  }, {
      start: 4096,
      length: 43,
      convRule: rule14
  }, {
      start: 4139,
      length: 2,
      convRule: rule124
  }, {
      start: 4141,
      length: 4,
      convRule: rule92
  }, {
      start: 4145,
      length: 1,
      convRule: rule124
  }, {
      start: 4146,
      length: 6,
      convRule: rule92
  }, {
      start: 4152,
      length: 1,
      convRule: rule124
  }, {
      start: 4153,
      length: 2,
      convRule: rule92
  }, {
      start: 4155,
      length: 2,
      convRule: rule124
  }, {
      start: 4157,
      length: 2,
      convRule: rule92
  }, {
      start: 4159,
      length: 1,
      convRule: rule14
  }, {
      start: 4160,
      length: 10,
      convRule: rule8
  }, {
      start: 4170,
      length: 6,
      convRule: rule2
  }, {
      start: 4176,
      length: 6,
      convRule: rule14
  }, {
      start: 4182,
      length: 2,
      convRule: rule124
  }, {
      start: 4184,
      length: 2,
      convRule: rule92
  }, {
      start: 4186,
      length: 4,
      convRule: rule14
  }, {
      start: 4190,
      length: 3,
      convRule: rule92
  }, {
      start: 4193,
      length: 1,
      convRule: rule14
  }, {
      start: 4194,
      length: 3,
      convRule: rule124
  }, {
      start: 4197,
      length: 2,
      convRule: rule14
  }, {
      start: 4199,
      length: 7,
      convRule: rule124
  }, {
      start: 4206,
      length: 3,
      convRule: rule14
  }, {
      start: 4209,
      length: 4,
      convRule: rule92
  }, {
      start: 4213,
      length: 13,
      convRule: rule14
  }, {
      start: 4226,
      length: 1,
      convRule: rule92
  }, {
      start: 4227,
      length: 2,
      convRule: rule124
  }, {
      start: 4229,
      length: 2,
      convRule: rule92
  }, {
      start: 4231,
      length: 6,
      convRule: rule124
  }, {
      start: 4237,
      length: 1,
      convRule: rule92
  }, {
      start: 4238,
      length: 1,
      convRule: rule14
  }, {
      start: 4239,
      length: 1,
      convRule: rule124
  }, {
      start: 4240,
      length: 10,
      convRule: rule8
  }, {
      start: 4250,
      length: 3,
      convRule: rule124
  }, {
      start: 4253,
      length: 1,
      convRule: rule92
  }, {
      start: 4254,
      length: 2,
      convRule: rule13
  }, {
      start: 4256,
      length: 38,
      convRule: rule125
  }, {
      start: 4295,
      length: 1,
      convRule: rule125
  }, {
      start: 4301,
      length: 1,
      convRule: rule125
  }, {
      start: 4304,
      length: 43,
      convRule: rule126
  }, {
      start: 4347,
      length: 1,
      convRule: rule2
  }, {
      start: 4348,
      length: 1,
      convRule: rule91
  }, {
      start: 4349,
      length: 3,
      convRule: rule126
  }, {
      start: 4352,
      length: 329,
      convRule: rule14
  }, {
      start: 4682,
      length: 4,
      convRule: rule14
  }, {
      start: 4688,
      length: 7,
      convRule: rule14
  }, {
      start: 4696,
      length: 1,
      convRule: rule14
  }, {
      start: 4698,
      length: 4,
      convRule: rule14
  }, {
      start: 4704,
      length: 41,
      convRule: rule14
  }, {
      start: 4746,
      length: 4,
      convRule: rule14
  }, {
      start: 4752,
      length: 33,
      convRule: rule14
  }, {
      start: 4786,
      length: 4,
      convRule: rule14
  }, {
      start: 4792,
      length: 7,
      convRule: rule14
  }, {
      start: 4800,
      length: 1,
      convRule: rule14
  }, {
      start: 4802,
      length: 4,
      convRule: rule14
  }, {
      start: 4808,
      length: 15,
      convRule: rule14
  }, {
      start: 4824,
      length: 57,
      convRule: rule14
  }, {
      start: 4882,
      length: 4,
      convRule: rule14
  }, {
      start: 4888,
      length: 67,
      convRule: rule14
  }, {
      start: 4957,
      length: 3,
      convRule: rule92
  }, {
      start: 4960,
      length: 9,
      convRule: rule2
  }, {
      start: 4969,
      length: 20,
      convRule: rule17
  }, {
      start: 4992,
      length: 16,
      convRule: rule14
  }, {
      start: 5008,
      length: 10,
      convRule: rule13
  }, {
      start: 5024,
      length: 80,
      convRule: rule127
  }, {
      start: 5104,
      length: 6,
      convRule: rule104
  }, {
      start: 5112,
      length: 6,
      convRule: rule110
  }, {
      start: 5120,
      length: 1,
      convRule: rule7
  }, {
      start: 5121,
      length: 620,
      convRule: rule14
  }, {
      start: 5741,
      length: 1,
      convRule: rule13
  }, {
      start: 5742,
      length: 1,
      convRule: rule2
  }, {
      start: 5743,
      length: 17,
      convRule: rule14
  }, {
      start: 5760,
      length: 1,
      convRule: rule1
  }, {
      start: 5761,
      length: 26,
      convRule: rule14
  }, {
      start: 5787,
      length: 1,
      convRule: rule4
  }, {
      start: 5788,
      length: 1,
      convRule: rule5
  }, {
      start: 5792,
      length: 75,
      convRule: rule14
  }, {
      start: 5867,
      length: 3,
      convRule: rule2
  }, {
      start: 5870,
      length: 3,
      convRule: rule128
  }, {
      start: 5873,
      length: 8,
      convRule: rule14
  }, {
      start: 5888,
      length: 13,
      convRule: rule14
  }, {
      start: 5902,
      length: 4,
      convRule: rule14
  }, {
      start: 5906,
      length: 3,
      convRule: rule92
  }, {
      start: 5920,
      length: 18,
      convRule: rule14
  }, {
      start: 5938,
      length: 3,
      convRule: rule92
  }, {
      start: 5941,
      length: 2,
      convRule: rule2
  }, {
      start: 5952,
      length: 18,
      convRule: rule14
  }, {
      start: 5970,
      length: 2,
      convRule: rule92
  }, {
      start: 5984,
      length: 13,
      convRule: rule14
  }, {
      start: 5998,
      length: 3,
      convRule: rule14
  }, {
      start: 6002,
      length: 2,
      convRule: rule92
  }, {
      start: 6016,
      length: 52,
      convRule: rule14
  }, {
      start: 6068,
      length: 2,
      convRule: rule92
  }, {
      start: 6070,
      length: 1,
      convRule: rule124
  }, {
      start: 6071,
      length: 7,
      convRule: rule92
  }, {
      start: 6078,
      length: 8,
      convRule: rule124
  }, {
      start: 6086,
      length: 1,
      convRule: rule92
  }, {
      start: 6087,
      length: 2,
      convRule: rule124
  }, {
      start: 6089,
      length: 11,
      convRule: rule92
  }, {
      start: 6100,
      length: 3,
      convRule: rule2
  }, {
      start: 6103,
      length: 1,
      convRule: rule91
  }, {
      start: 6104,
      length: 3,
      convRule: rule2
  }, {
      start: 6107,
      length: 1,
      convRule: rule3
  }, {
      start: 6108,
      length: 1,
      convRule: rule14
  }, {
      start: 6109,
      length: 1,
      convRule: rule92
  }, {
      start: 6112,
      length: 10,
      convRule: rule8
  }, {
      start: 6128,
      length: 10,
      convRule: rule17
  }, {
      start: 6144,
      length: 6,
      convRule: rule2
  }, {
      start: 6150,
      length: 1,
      convRule: rule7
  }, {
      start: 6151,
      length: 4,
      convRule: rule2
  }, {
      start: 6155,
      length: 3,
      convRule: rule92
  }, {
      start: 6158,
      length: 1,
      convRule: rule16
  }, {
      start: 6160,
      length: 10,
      convRule: rule8
  }, {
      start: 6176,
      length: 35,
      convRule: rule14
  }, {
      start: 6211,
      length: 1,
      convRule: rule91
  }, {
      start: 6212,
      length: 53,
      convRule: rule14
  }, {
      start: 6272,
      length: 5,
      convRule: rule14
  }, {
      start: 6277,
      length: 2,
      convRule: rule92
  }, {
      start: 6279,
      length: 34,
      convRule: rule14
  }, {
      start: 6313,
      length: 1,
      convRule: rule92
  }, {
      start: 6314,
      length: 1,
      convRule: rule14
  }, {
      start: 6320,
      length: 70,
      convRule: rule14
  }, {
      start: 6400,
      length: 31,
      convRule: rule14
  }, {
      start: 6432,
      length: 3,
      convRule: rule92
  }, {
      start: 6435,
      length: 4,
      convRule: rule124
  }, {
      start: 6439,
      length: 2,
      convRule: rule92
  }, {
      start: 6441,
      length: 3,
      convRule: rule124
  }, {
      start: 6448,
      length: 2,
      convRule: rule124
  }, {
      start: 6450,
      length: 1,
      convRule: rule92
  }, {
      start: 6451,
      length: 6,
      convRule: rule124
  }, {
      start: 6457,
      length: 3,
      convRule: rule92
  }, {
      start: 6464,
      length: 1,
      convRule: rule13
  }, {
      start: 6468,
      length: 2,
      convRule: rule2
  }, {
      start: 6470,
      length: 10,
      convRule: rule8
  }, {
      start: 6480,
      length: 30,
      convRule: rule14
  }, {
      start: 6512,
      length: 5,
      convRule: rule14
  }, {
      start: 6528,
      length: 44,
      convRule: rule14
  }, {
      start: 6576,
      length: 26,
      convRule: rule14
  }, {
      start: 6608,
      length: 10,
      convRule: rule8
  }, {
      start: 6618,
      length: 1,
      convRule: rule17
  }, {
      start: 6622,
      length: 34,
      convRule: rule13
  }, {
      start: 6656,
      length: 23,
      convRule: rule14
  }, {
      start: 6679,
      length: 2,
      convRule: rule92
  }, {
      start: 6681,
      length: 2,
      convRule: rule124
  }, {
      start: 6683,
      length: 1,
      convRule: rule92
  }, {
      start: 6686,
      length: 2,
      convRule: rule2
  }, {
      start: 6688,
      length: 53,
      convRule: rule14
  }, {
      start: 6741,
      length: 1,
      convRule: rule124
  }, {
      start: 6742,
      length: 1,
      convRule: rule92
  }, {
      start: 6743,
      length: 1,
      convRule: rule124
  }, {
      start: 6744,
      length: 7,
      convRule: rule92
  }, {
      start: 6752,
      length: 1,
      convRule: rule92
  }, {
      start: 6753,
      length: 1,
      convRule: rule124
  }, {
      start: 6754,
      length: 1,
      convRule: rule92
  }, {
      start: 6755,
      length: 2,
      convRule: rule124
  }, {
      start: 6757,
      length: 8,
      convRule: rule92
  }, {
      start: 6765,
      length: 6,
      convRule: rule124
  }, {
      start: 6771,
      length: 10,
      convRule: rule92
  }, {
      start: 6783,
      length: 1,
      convRule: rule92
  }, {
      start: 6784,
      length: 10,
      convRule: rule8
  }, {
      start: 6800,
      length: 10,
      convRule: rule8
  }, {
      start: 6816,
      length: 7,
      convRule: rule2
  }, {
      start: 6823,
      length: 1,
      convRule: rule91
  }, {
      start: 6824,
      length: 6,
      convRule: rule2
  }, {
      start: 6832,
      length: 14,
      convRule: rule92
  }, {
      start: 6846,
      length: 1,
      convRule: rule119
  }, {
      start: 6847,
      length: 2,
      convRule: rule92
  }, {
      start: 6912,
      length: 4,
      convRule: rule92
  }, {
      start: 6916,
      length: 1,
      convRule: rule124
  }, {
      start: 6917,
      length: 47,
      convRule: rule14
  }, {
      start: 6964,
      length: 1,
      convRule: rule92
  }, {
      start: 6965,
      length: 1,
      convRule: rule124
  }, {
      start: 6966,
      length: 5,
      convRule: rule92
  }, {
      start: 6971,
      length: 1,
      convRule: rule124
  }, {
      start: 6972,
      length: 1,
      convRule: rule92
  }, {
      start: 6973,
      length: 5,
      convRule: rule124
  }, {
      start: 6978,
      length: 1,
      convRule: rule92
  }, {
      start: 6979,
      length: 2,
      convRule: rule124
  }, {
      start: 6981,
      length: 7,
      convRule: rule14
  }, {
      start: 6992,
      length: 10,
      convRule: rule8
  }, {
      start: 7002,
      length: 7,
      convRule: rule2
  }, {
      start: 7009,
      length: 10,
      convRule: rule13
  }, {
      start: 7019,
      length: 9,
      convRule: rule92
  }, {
      start: 7028,
      length: 9,
      convRule: rule13
  }, {
      start: 7040,
      length: 2,
      convRule: rule92
  }, {
      start: 7042,
      length: 1,
      convRule: rule124
  }, {
      start: 7043,
      length: 30,
      convRule: rule14
  }, {
      start: 7073,
      length: 1,
      convRule: rule124
  }, {
      start: 7074,
      length: 4,
      convRule: rule92
  }, {
      start: 7078,
      length: 2,
      convRule: rule124
  }, {
      start: 7080,
      length: 2,
      convRule: rule92
  }, {
      start: 7082,
      length: 1,
      convRule: rule124
  }, {
      start: 7083,
      length: 3,
      convRule: rule92
  }, {
      start: 7086,
      length: 2,
      convRule: rule14
  }, {
      start: 7088,
      length: 10,
      convRule: rule8
  }, {
      start: 7098,
      length: 44,
      convRule: rule14
  }, {
      start: 7142,
      length: 1,
      convRule: rule92
  }, {
      start: 7143,
      length: 1,
      convRule: rule124
  }, {
      start: 7144,
      length: 2,
      convRule: rule92
  }, {
      start: 7146,
      length: 3,
      convRule: rule124
  }, {
      start: 7149,
      length: 1,
      convRule: rule92
  }, {
      start: 7150,
      length: 1,
      convRule: rule124
  }, {
      start: 7151,
      length: 3,
      convRule: rule92
  }, {
      start: 7154,
      length: 2,
      convRule: rule124
  }, {
      start: 7164,
      length: 4,
      convRule: rule2
  }, {
      start: 7168,
      length: 36,
      convRule: rule14
  }, {
      start: 7204,
      length: 8,
      convRule: rule124
  }, {
      start: 7212,
      length: 8,
      convRule: rule92
  }, {
      start: 7220,
      length: 2,
      convRule: rule124
  }, {
      start: 7222,
      length: 2,
      convRule: rule92
  }, {
      start: 7227,
      length: 5,
      convRule: rule2
  }, {
      start: 7232,
      length: 10,
      convRule: rule8
  }, {
      start: 7245,
      length: 3,
      convRule: rule14
  }, {
      start: 7248,
      length: 10,
      convRule: rule8
  }, {
      start: 7258,
      length: 30,
      convRule: rule14
  }, {
      start: 7288,
      length: 6,
      convRule: rule91
  }, {
      start: 7294,
      length: 2,
      convRule: rule2
  }, {
      start: 7296,
      length: 1,
      convRule: rule129
  }, {
      start: 7297,
      length: 1,
      convRule: rule130
  }, {
      start: 7298,
      length: 1,
      convRule: rule131
  }, {
      start: 7299,
      length: 2,
      convRule: rule132
  }, {
      start: 7301,
      length: 1,
      convRule: rule133
  }, {
      start: 7302,
      length: 1,
      convRule: rule134
  }, {
      start: 7303,
      length: 1,
      convRule: rule135
  }, {
      start: 7304,
      length: 1,
      convRule: rule136
  }, {
      start: 7312,
      length: 43,
      convRule: rule137
  }, {
      start: 7357,
      length: 3,
      convRule: rule137
  }, {
      start: 7360,
      length: 8,
      convRule: rule2
  }, {
      start: 7376,
      length: 3,
      convRule: rule92
  }, {
      start: 7379,
      length: 1,
      convRule: rule2
  }, {
      start: 7380,
      length: 13,
      convRule: rule92
  }, {
      start: 7393,
      length: 1,
      convRule: rule124
  }, {
      start: 7394,
      length: 7,
      convRule: rule92
  }, {
      start: 7401,
      length: 4,
      convRule: rule14
  }, {
      start: 7405,
      length: 1,
      convRule: rule92
  }, {
      start: 7406,
      length: 6,
      convRule: rule14
  }, {
      start: 7412,
      length: 1,
      convRule: rule92
  }, {
      start: 7413,
      length: 2,
      convRule: rule14
  }, {
      start: 7415,
      length: 1,
      convRule: rule124
  }, {
      start: 7416,
      length: 2,
      convRule: rule92
  }, {
      start: 7418,
      length: 1,
      convRule: rule14
  }, {
      start: 7424,
      length: 44,
      convRule: rule20
  }, {
      start: 7468,
      length: 63,
      convRule: rule91
  }, {
      start: 7531,
      length: 13,
      convRule: rule20
  }, {
      start: 7544,
      length: 1,
      convRule: rule91
  }, {
      start: 7545,
      length: 1,
      convRule: rule138
  }, {
      start: 7546,
      length: 3,
      convRule: rule20
  }, {
      start: 7549,
      length: 1,
      convRule: rule139
  }, {
      start: 7550,
      length: 16,
      convRule: rule20
  }, {
      start: 7566,
      length: 1,
      convRule: rule140
  }, {
      start: 7567,
      length: 12,
      convRule: rule20
  }, {
      start: 7579,
      length: 37,
      convRule: rule91
  }, {
      start: 7616,
      length: 58,
      convRule: rule92
  }, {
      start: 7675,
      length: 5,
      convRule: rule92
  }, {
      start: 7680,
      length: 1,
      convRule: rule22
  }, {
      start: 7681,
      length: 1,
      convRule: rule23
  }, {
      start: 7682,
      length: 1,
      convRule: rule22
  }, {
      start: 7683,
      length: 1,
      convRule: rule23
  }, {
      start: 7684,
      length: 1,
      convRule: rule22
  }, {
      start: 7685,
      length: 1,
      convRule: rule23
  }, {
      start: 7686,
      length: 1,
      convRule: rule22
  }, {
      start: 7687,
      length: 1,
      convRule: rule23
  }, {
      start: 7688,
      length: 1,
      convRule: rule22
  }, {
      start: 7689,
      length: 1,
      convRule: rule23
  }, {
      start: 7690,
      length: 1,
      convRule: rule22
  }, {
      start: 7691,
      length: 1,
      convRule: rule23
  }, {
      start: 7692,
      length: 1,
      convRule: rule22
  }, {
      start: 7693,
      length: 1,
      convRule: rule23
  }, {
      start: 7694,
      length: 1,
      convRule: rule22
  }, {
      start: 7695,
      length: 1,
      convRule: rule23
  }, {
      start: 7696,
      length: 1,
      convRule: rule22
  }, {
      start: 7697,
      length: 1,
      convRule: rule23
  }, {
      start: 7698,
      length: 1,
      convRule: rule22
  }, {
      start: 7699,
      length: 1,
      convRule: rule23
  }, {
      start: 7700,
      length: 1,
      convRule: rule22
  }, {
      start: 7701,
      length: 1,
      convRule: rule23
  }, {
      start: 7702,
      length: 1,
      convRule: rule22
  }, {
      start: 7703,
      length: 1,
      convRule: rule23
  }, {
      start: 7704,
      length: 1,
      convRule: rule22
  }, {
      start: 7705,
      length: 1,
      convRule: rule23
  }, {
      start: 7706,
      length: 1,
      convRule: rule22
  }, {
      start: 7707,
      length: 1,
      convRule: rule23
  }, {
      start: 7708,
      length: 1,
      convRule: rule22
  }, {
      start: 7709,
      length: 1,
      convRule: rule23
  }, {
      start: 7710,
      length: 1,
      convRule: rule22
  }, {
      start: 7711,
      length: 1,
      convRule: rule23
  }, {
      start: 7712,
      length: 1,
      convRule: rule22
  }, {
      start: 7713,
      length: 1,
      convRule: rule23
  }, {
      start: 7714,
      length: 1,
      convRule: rule22
  }, {
      start: 7715,
      length: 1,
      convRule: rule23
  }, {
      start: 7716,
      length: 1,
      convRule: rule22
  }, {
      start: 7717,
      length: 1,
      convRule: rule23
  }, {
      start: 7718,
      length: 1,
      convRule: rule22
  }, {
      start: 7719,
      length: 1,
      convRule: rule23
  }, {
      start: 7720,
      length: 1,
      convRule: rule22
  }, {
      start: 7721,
      length: 1,
      convRule: rule23
  }, {
      start: 7722,
      length: 1,
      convRule: rule22
  }, {
      start: 7723,
      length: 1,
      convRule: rule23
  }, {
      start: 7724,
      length: 1,
      convRule: rule22
  }, {
      start: 7725,
      length: 1,
      convRule: rule23
  }, {
      start: 7726,
      length: 1,
      convRule: rule22
  }, {
      start: 7727,
      length: 1,
      convRule: rule23
  }, {
      start: 7728,
      length: 1,
      convRule: rule22
  }, {
      start: 7729,
      length: 1,
      convRule: rule23
  }, {
      start: 7730,
      length: 1,
      convRule: rule22
  }, {
      start: 7731,
      length: 1,
      convRule: rule23
  }, {
      start: 7732,
      length: 1,
      convRule: rule22
  }, {
      start: 7733,
      length: 1,
      convRule: rule23
  }, {
      start: 7734,
      length: 1,
      convRule: rule22
  }, {
      start: 7735,
      length: 1,
      convRule: rule23
  }, {
      start: 7736,
      length: 1,
      convRule: rule22
  }, {
      start: 7737,
      length: 1,
      convRule: rule23
  }, {
      start: 7738,
      length: 1,
      convRule: rule22
  }, {
      start: 7739,
      length: 1,
      convRule: rule23
  }, {
      start: 7740,
      length: 1,
      convRule: rule22
  }, {
      start: 7741,
      length: 1,
      convRule: rule23
  }, {
      start: 7742,
      length: 1,
      convRule: rule22
  }, {
      start: 7743,
      length: 1,
      convRule: rule23
  }, {
      start: 7744,
      length: 1,
      convRule: rule22
  }, {
      start: 7745,
      length: 1,
      convRule: rule23
  }, {
      start: 7746,
      length: 1,
      convRule: rule22
  }, {
      start: 7747,
      length: 1,
      convRule: rule23
  }, {
      start: 7748,
      length: 1,
      convRule: rule22
  }, {
      start: 7749,
      length: 1,
      convRule: rule23
  }, {
      start: 7750,
      length: 1,
      convRule: rule22
  }, {
      start: 7751,
      length: 1,
      convRule: rule23
  }, {
      start: 7752,
      length: 1,
      convRule: rule22
  }, {
      start: 7753,
      length: 1,
      convRule: rule23
  }, {
      start: 7754,
      length: 1,
      convRule: rule22
  }, {
      start: 7755,
      length: 1,
      convRule: rule23
  }, {
      start: 7756,
      length: 1,
      convRule: rule22
  }, {
      start: 7757,
      length: 1,
      convRule: rule23
  }, {
      start: 7758,
      length: 1,
      convRule: rule22
  }, {
      start: 7759,
      length: 1,
      convRule: rule23
  }, {
      start: 7760,
      length: 1,
      convRule: rule22
  }, {
      start: 7761,
      length: 1,
      convRule: rule23
  }, {
      start: 7762,
      length: 1,
      convRule: rule22
  }, {
      start: 7763,
      length: 1,
      convRule: rule23
  }, {
      start: 7764,
      length: 1,
      convRule: rule22
  }, {
      start: 7765,
      length: 1,
      convRule: rule23
  }, {
      start: 7766,
      length: 1,
      convRule: rule22
  }, {
      start: 7767,
      length: 1,
      convRule: rule23
  }, {
      start: 7768,
      length: 1,
      convRule: rule22
  }, {
      start: 7769,
      length: 1,
      convRule: rule23
  }, {
      start: 7770,
      length: 1,
      convRule: rule22
  }, {
      start: 7771,
      length: 1,
      convRule: rule23
  }, {
      start: 7772,
      length: 1,
      convRule: rule22
  }, {
      start: 7773,
      length: 1,
      convRule: rule23
  }, {
      start: 7774,
      length: 1,
      convRule: rule22
  }, {
      start: 7775,
      length: 1,
      convRule: rule23
  }, {
      start: 7776,
      length: 1,
      convRule: rule22
  }, {
      start: 7777,
      length: 1,
      convRule: rule23
  }, {
      start: 7778,
      length: 1,
      convRule: rule22
  }, {
      start: 7779,
      length: 1,
      convRule: rule23
  }, {
      start: 7780,
      length: 1,
      convRule: rule22
  }, {
      start: 7781,
      length: 1,
      convRule: rule23
  }, {
      start: 7782,
      length: 1,
      convRule: rule22
  }, {
      start: 7783,
      length: 1,
      convRule: rule23
  }, {
      start: 7784,
      length: 1,
      convRule: rule22
  }, {
      start: 7785,
      length: 1,
      convRule: rule23
  }, {
      start: 7786,
      length: 1,
      convRule: rule22
  }, {
      start: 7787,
      length: 1,
      convRule: rule23
  }, {
      start: 7788,
      length: 1,
      convRule: rule22
  }, {
      start: 7789,
      length: 1,
      convRule: rule23
  }, {
      start: 7790,
      length: 1,
      convRule: rule22
  }, {
      start: 7791,
      length: 1,
      convRule: rule23
  }, {
      start: 7792,
      length: 1,
      convRule: rule22
  }, {
      start: 7793,
      length: 1,
      convRule: rule23
  }, {
      start: 7794,
      length: 1,
      convRule: rule22
  }, {
      start: 7795,
      length: 1,
      convRule: rule23
  }, {
      start: 7796,
      length: 1,
      convRule: rule22
  }, {
      start: 7797,
      length: 1,
      convRule: rule23
  }, {
      start: 7798,
      length: 1,
      convRule: rule22
  }, {
      start: 7799,
      length: 1,
      convRule: rule23
  }, {
      start: 7800,
      length: 1,
      convRule: rule22
  }, {
      start: 7801,
      length: 1,
      convRule: rule23
  }, {
      start: 7802,
      length: 1,
      convRule: rule22
  }, {
      start: 7803,
      length: 1,
      convRule: rule23
  }, {
      start: 7804,
      length: 1,
      convRule: rule22
  }, {
      start: 7805,
      length: 1,
      convRule: rule23
  }, {
      start: 7806,
      length: 1,
      convRule: rule22
  }, {
      start: 7807,
      length: 1,
      convRule: rule23
  }, {
      start: 7808,
      length: 1,
      convRule: rule22
  }, {
      start: 7809,
      length: 1,
      convRule: rule23
  }, {
      start: 7810,
      length: 1,
      convRule: rule22
  }, {
      start: 7811,
      length: 1,
      convRule: rule23
  }, {
      start: 7812,
      length: 1,
      convRule: rule22
  }, {
      start: 7813,
      length: 1,
      convRule: rule23
  }, {
      start: 7814,
      length: 1,
      convRule: rule22
  }, {
      start: 7815,
      length: 1,
      convRule: rule23
  }, {
      start: 7816,
      length: 1,
      convRule: rule22
  }, {
      start: 7817,
      length: 1,
      convRule: rule23
  }, {
      start: 7818,
      length: 1,
      convRule: rule22
  }, {
      start: 7819,
      length: 1,
      convRule: rule23
  }, {
      start: 7820,
      length: 1,
      convRule: rule22
  }, {
      start: 7821,
      length: 1,
      convRule: rule23
  }, {
      start: 7822,
      length: 1,
      convRule: rule22
  }, {
      start: 7823,
      length: 1,
      convRule: rule23
  }, {
      start: 7824,
      length: 1,
      convRule: rule22
  }, {
      start: 7825,
      length: 1,
      convRule: rule23
  }, {
      start: 7826,
      length: 1,
      convRule: rule22
  }, {
      start: 7827,
      length: 1,
      convRule: rule23
  }, {
      start: 7828,
      length: 1,
      convRule: rule22
  }, {
      start: 7829,
      length: 1,
      convRule: rule23
  }, {
      start: 7830,
      length: 5,
      convRule: rule20
  }, {
      start: 7835,
      length: 1,
      convRule: rule141
  }, {
      start: 7836,
      length: 2,
      convRule: rule20
  }, {
      start: 7838,
      length: 1,
      convRule: rule142
  }, {
      start: 7839,
      length: 1,
      convRule: rule20
  }, {
      start: 7840,
      length: 1,
      convRule: rule22
  }, {
      start: 7841,
      length: 1,
      convRule: rule23
  }, {
      start: 7842,
      length: 1,
      convRule: rule22
  }, {
      start: 7843,
      length: 1,
      convRule: rule23
  }, {
      start: 7844,
      length: 1,
      convRule: rule22
  }, {
      start: 7845,
      length: 1,
      convRule: rule23
  }, {
      start: 7846,
      length: 1,
      convRule: rule22
  }, {
      start: 7847,
      length: 1,
      convRule: rule23
  }, {
      start: 7848,
      length: 1,
      convRule: rule22
  }, {
      start: 7849,
      length: 1,
      convRule: rule23
  }, {
      start: 7850,
      length: 1,
      convRule: rule22
  }, {
      start: 7851,
      length: 1,
      convRule: rule23
  }, {
      start: 7852,
      length: 1,
      convRule: rule22
  }, {
      start: 7853,
      length: 1,
      convRule: rule23
  }, {
      start: 7854,
      length: 1,
      convRule: rule22
  }, {
      start: 7855,
      length: 1,
      convRule: rule23
  }, {
      start: 7856,
      length: 1,
      convRule: rule22
  }, {
      start: 7857,
      length: 1,
      convRule: rule23
  }, {
      start: 7858,
      length: 1,
      convRule: rule22
  }, {
      start: 7859,
      length: 1,
      convRule: rule23
  }, {
      start: 7860,
      length: 1,
      convRule: rule22
  }, {
      start: 7861,
      length: 1,
      convRule: rule23
  }, {
      start: 7862,
      length: 1,
      convRule: rule22
  }, {
      start: 7863,
      length: 1,
      convRule: rule23
  }, {
      start: 7864,
      length: 1,
      convRule: rule22
  }, {
      start: 7865,
      length: 1,
      convRule: rule23
  }, {
      start: 7866,
      length: 1,
      convRule: rule22
  }, {
      start: 7867,
      length: 1,
      convRule: rule23
  }, {
      start: 7868,
      length: 1,
      convRule: rule22
  }, {
      start: 7869,
      length: 1,
      convRule: rule23
  }, {
      start: 7870,
      length: 1,
      convRule: rule22
  }, {
      start: 7871,
      length: 1,
      convRule: rule23
  }, {
      start: 7872,
      length: 1,
      convRule: rule22
  }, {
      start: 7873,
      length: 1,
      convRule: rule23
  }, {
      start: 7874,
      length: 1,
      convRule: rule22
  }, {
      start: 7875,
      length: 1,
      convRule: rule23
  }, {
      start: 7876,
      length: 1,
      convRule: rule22
  }, {
      start: 7877,
      length: 1,
      convRule: rule23
  }, {
      start: 7878,
      length: 1,
      convRule: rule22
  }, {
      start: 7879,
      length: 1,
      convRule: rule23
  }, {
      start: 7880,
      length: 1,
      convRule: rule22
  }, {
      start: 7881,
      length: 1,
      convRule: rule23
  }, {
      start: 7882,
      length: 1,
      convRule: rule22
  }, {
      start: 7883,
      length: 1,
      convRule: rule23
  }, {
      start: 7884,
      length: 1,
      convRule: rule22
  }, {
      start: 7885,
      length: 1,
      convRule: rule23
  }, {
      start: 7886,
      length: 1,
      convRule: rule22
  }, {
      start: 7887,
      length: 1,
      convRule: rule23
  }, {
      start: 7888,
      length: 1,
      convRule: rule22
  }, {
      start: 7889,
      length: 1,
      convRule: rule23
  }, {
      start: 7890,
      length: 1,
      convRule: rule22
  }, {
      start: 7891,
      length: 1,
      convRule: rule23
  }, {
      start: 7892,
      length: 1,
      convRule: rule22
  }, {
      start: 7893,
      length: 1,
      convRule: rule23
  }, {
      start: 7894,
      length: 1,
      convRule: rule22
  }, {
      start: 7895,
      length: 1,
      convRule: rule23
  }, {
      start: 7896,
      length: 1,
      convRule: rule22
  }, {
      start: 7897,
      length: 1,
      convRule: rule23
  }, {
      start: 7898,
      length: 1,
      convRule: rule22
  }, {
      start: 7899,
      length: 1,
      convRule: rule23
  }, {
      start: 7900,
      length: 1,
      convRule: rule22
  }, {
      start: 7901,
      length: 1,
      convRule: rule23
  }, {
      start: 7902,
      length: 1,
      convRule: rule22
  }, {
      start: 7903,
      length: 1,
      convRule: rule23
  }, {
      start: 7904,
      length: 1,
      convRule: rule22
  }, {
      start: 7905,
      length: 1,
      convRule: rule23
  }, {
      start: 7906,
      length: 1,
      convRule: rule22
  }, {
      start: 7907,
      length: 1,
      convRule: rule23
  }, {
      start: 7908,
      length: 1,
      convRule: rule22
  }, {
      start: 7909,
      length: 1,
      convRule: rule23
  }, {
      start: 7910,
      length: 1,
      convRule: rule22
  }, {
      start: 7911,
      length: 1,
      convRule: rule23
  }, {
      start: 7912,
      length: 1,
      convRule: rule22
  }, {
      start: 7913,
      length: 1,
      convRule: rule23
  }, {
      start: 7914,
      length: 1,
      convRule: rule22
  }, {
      start: 7915,
      length: 1,
      convRule: rule23
  }, {
      start: 7916,
      length: 1,
      convRule: rule22
  }, {
      start: 7917,
      length: 1,
      convRule: rule23
  }, {
      start: 7918,
      length: 1,
      convRule: rule22
  }, {
      start: 7919,
      length: 1,
      convRule: rule23
  }, {
      start: 7920,
      length: 1,
      convRule: rule22
  }, {
      start: 7921,
      length: 1,
      convRule: rule23
  }, {
      start: 7922,
      length: 1,
      convRule: rule22
  }, {
      start: 7923,
      length: 1,
      convRule: rule23
  }, {
      start: 7924,
      length: 1,
      convRule: rule22
  }, {
      start: 7925,
      length: 1,
      convRule: rule23
  }, {
      start: 7926,
      length: 1,
      convRule: rule22
  }, {
      start: 7927,
      length: 1,
      convRule: rule23
  }, {
      start: 7928,
      length: 1,
      convRule: rule22
  }, {
      start: 7929,
      length: 1,
      convRule: rule23
  }, {
      start: 7930,
      length: 1,
      convRule: rule22
  }, {
      start: 7931,
      length: 1,
      convRule: rule23
  }, {
      start: 7932,
      length: 1,
      convRule: rule22
  }, {
      start: 7933,
      length: 1,
      convRule: rule23
  }, {
      start: 7934,
      length: 1,
      convRule: rule22
  }, {
      start: 7935,
      length: 1,
      convRule: rule23
  }, {
      start: 7936,
      length: 8,
      convRule: rule143
  }, {
      start: 7944,
      length: 8,
      convRule: rule144
  }, {
      start: 7952,
      length: 6,
      convRule: rule143
  }, {
      start: 7960,
      length: 6,
      convRule: rule144
  }, {
      start: 7968,
      length: 8,
      convRule: rule143
  }, {
      start: 7976,
      length: 8,
      convRule: rule144
  }, {
      start: 7984,
      length: 8,
      convRule: rule143
  }, {
      start: 7992,
      length: 8,
      convRule: rule144
  }, {
      start: 8000,
      length: 6,
      convRule: rule143
  }, {
      start: 8008,
      length: 6,
      convRule: rule144
  }, {
      start: 8016,
      length: 1,
      convRule: rule20
  }, {
      start: 8017,
      length: 1,
      convRule: rule143
  }, {
      start: 8018,
      length: 1,
      convRule: rule20
  }, {
      start: 8019,
      length: 1,
      convRule: rule143
  }, {
      start: 8020,
      length: 1,
      convRule: rule20
  }, {
      start: 8021,
      length: 1,
      convRule: rule143
  }, {
      start: 8022,
      length: 1,
      convRule: rule20
  }, {
      start: 8023,
      length: 1,
      convRule: rule143
  }, {
      start: 8025,
      length: 1,
      convRule: rule144
  }, {
      start: 8027,
      length: 1,
      convRule: rule144
  }, {
      start: 8029,
      length: 1,
      convRule: rule144
  }, {
      start: 8031,
      length: 1,
      convRule: rule144
  }, {
      start: 8032,
      length: 8,
      convRule: rule143
  }, {
      start: 8040,
      length: 8,
      convRule: rule144
  }, {
      start: 8048,
      length: 2,
      convRule: rule145
  }, {
      start: 8050,
      length: 4,
      convRule: rule146
  }, {
      start: 8054,
      length: 2,
      convRule: rule147
  }, {
      start: 8056,
      length: 2,
      convRule: rule148
  }, {
      start: 8058,
      length: 2,
      convRule: rule149
  }, {
      start: 8060,
      length: 2,
      convRule: rule150
  }, {
      start: 8064,
      length: 8,
      convRule: rule143
  }, {
      start: 8072,
      length: 8,
      convRule: rule151
  }, {
      start: 8080,
      length: 8,
      convRule: rule143
  }, {
      start: 8088,
      length: 8,
      convRule: rule151
  }, {
      start: 8096,
      length: 8,
      convRule: rule143
  }, {
      start: 8104,
      length: 8,
      convRule: rule151
  }, {
      start: 8112,
      length: 2,
      convRule: rule143
  }, {
      start: 8114,
      length: 1,
      convRule: rule20
  }, {
      start: 8115,
      length: 1,
      convRule: rule152
  }, {
      start: 8116,
      length: 1,
      convRule: rule20
  }, {
      start: 8118,
      length: 2,
      convRule: rule20
  }, {
      start: 8120,
      length: 2,
      convRule: rule144
  }, {
      start: 8122,
      length: 2,
      convRule: rule153
  }, {
      start: 8124,
      length: 1,
      convRule: rule154
  }, {
      start: 8125,
      length: 1,
      convRule: rule10
  }, {
      start: 8126,
      length: 1,
      convRule: rule155
  }, {
      start: 8127,
      length: 3,
      convRule: rule10
  }, {
      start: 8130,
      length: 1,
      convRule: rule20
  }, {
      start: 8131,
      length: 1,
      convRule: rule152
  }, {
      start: 8132,
      length: 1,
      convRule: rule20
  }, {
      start: 8134,
      length: 2,
      convRule: rule20
  }, {
      start: 8136,
      length: 4,
      convRule: rule156
  }, {
      start: 8140,
      length: 1,
      convRule: rule154
  }, {
      start: 8141,
      length: 3,
      convRule: rule10
  }, {
      start: 8144,
      length: 2,
      convRule: rule143
  }, {
      start: 8146,
      length: 2,
      convRule: rule20
  }, {
      start: 8150,
      length: 2,
      convRule: rule20
  }, {
      start: 8152,
      length: 2,
      convRule: rule144
  }, {
      start: 8154,
      length: 2,
      convRule: rule157
  }, {
      start: 8157,
      length: 3,
      convRule: rule10
  }, {
      start: 8160,
      length: 2,
      convRule: rule143
  }, {
      start: 8162,
      length: 3,
      convRule: rule20
  }, {
      start: 8165,
      length: 1,
      convRule: rule113
  }, {
      start: 8166,
      length: 2,
      convRule: rule20
  }, {
      start: 8168,
      length: 2,
      convRule: rule144
  }, {
      start: 8170,
      length: 2,
      convRule: rule158
  }, {
      start: 8172,
      length: 1,
      convRule: rule117
  }, {
      start: 8173,
      length: 3,
      convRule: rule10
  }, {
      start: 8178,
      length: 1,
      convRule: rule20
  }, {
      start: 8179,
      length: 1,
      convRule: rule152
  }, {
      start: 8180,
      length: 1,
      convRule: rule20
  }, {
      start: 8182,
      length: 2,
      convRule: rule20
  }, {
      start: 8184,
      length: 2,
      convRule: rule159
  }, {
      start: 8186,
      length: 2,
      convRule: rule160
  }, {
      start: 8188,
      length: 1,
      convRule: rule154
  }, {
      start: 8189,
      length: 2,
      convRule: rule10
  }, {
      start: 8192,
      length: 11,
      convRule: rule1
  }, {
      start: 8203,
      length: 5,
      convRule: rule16
  }, {
      start: 8208,
      length: 6,
      convRule: rule7
  }, {
      start: 8214,
      length: 2,
      convRule: rule2
  }, {
      start: 8216,
      length: 1,
      convRule: rule15
  }, {
      start: 8217,
      length: 1,
      convRule: rule19
  }, {
      start: 8218,
      length: 1,
      convRule: rule4
  }, {
      start: 8219,
      length: 2,
      convRule: rule15
  }, {
      start: 8221,
      length: 1,
      convRule: rule19
  }, {
      start: 8222,
      length: 1,
      convRule: rule4
  }, {
      start: 8223,
      length: 1,
      convRule: rule15
  }, {
      start: 8224,
      length: 8,
      convRule: rule2
  }, {
      start: 8232,
      length: 1,
      convRule: rule161
  }, {
      start: 8233,
      length: 1,
      convRule: rule162
  }, {
      start: 8234,
      length: 5,
      convRule: rule16
  }, {
      start: 8239,
      length: 1,
      convRule: rule1
  }, {
      start: 8240,
      length: 9,
      convRule: rule2
  }, {
      start: 8249,
      length: 1,
      convRule: rule15
  }, {
      start: 8250,
      length: 1,
      convRule: rule19
  }, {
      start: 8251,
      length: 4,
      convRule: rule2
  }, {
      start: 8255,
      length: 2,
      convRule: rule11
  }, {
      start: 8257,
      length: 3,
      convRule: rule2
  }, {
      start: 8260,
      length: 1,
      convRule: rule6
  }, {
      start: 8261,
      length: 1,
      convRule: rule4
  }, {
      start: 8262,
      length: 1,
      convRule: rule5
  }, {
      start: 8263,
      length: 11,
      convRule: rule2
  }, {
      start: 8274,
      length: 1,
      convRule: rule6
  }, {
      start: 8275,
      length: 1,
      convRule: rule2
  }, {
      start: 8276,
      length: 1,
      convRule: rule11
  }, {
      start: 8277,
      length: 10,
      convRule: rule2
  }, {
      start: 8287,
      length: 1,
      convRule: rule1
  }, {
      start: 8288,
      length: 5,
      convRule: rule16
  }, {
      start: 8294,
      length: 10,
      convRule: rule16
  }, {
      start: 8304,
      length: 1,
      convRule: rule17
  }, {
      start: 8305,
      length: 1,
      convRule: rule91
  }, {
      start: 8308,
      length: 6,
      convRule: rule17
  }, {
      start: 8314,
      length: 3,
      convRule: rule6
  }, {
      start: 8317,
      length: 1,
      convRule: rule4
  }, {
      start: 8318,
      length: 1,
      convRule: rule5
  }, {
      start: 8319,
      length: 1,
      convRule: rule91
  }, {
      start: 8320,
      length: 10,
      convRule: rule17
  }, {
      start: 8330,
      length: 3,
      convRule: rule6
  }, {
      start: 8333,
      length: 1,
      convRule: rule4
  }, {
      start: 8334,
      length: 1,
      convRule: rule5
  }, {
      start: 8336,
      length: 13,
      convRule: rule91
  }, {
      start: 8352,
      length: 32,
      convRule: rule3
  }, {
      start: 8400,
      length: 13,
      convRule: rule92
  }, {
      start: 8413,
      length: 4,
      convRule: rule119
  }, {
      start: 8417,
      length: 1,
      convRule: rule92
  }, {
      start: 8418,
      length: 3,
      convRule: rule119
  }, {
      start: 8421,
      length: 12,
      convRule: rule92
  }, {
      start: 8448,
      length: 2,
      convRule: rule13
  }, {
      start: 8450,
      length: 1,
      convRule: rule107
  }, {
      start: 8451,
      length: 4,
      convRule: rule13
  }, {
      start: 8455,
      length: 1,
      convRule: rule107
  }, {
      start: 8456,
      length: 2,
      convRule: rule13
  }, {
      start: 8458,
      length: 1,
      convRule: rule20
  }, {
      start: 8459,
      length: 3,
      convRule: rule107
  }, {
      start: 8462,
      length: 2,
      convRule: rule20
  }, {
      start: 8464,
      length: 3,
      convRule: rule107
  }, {
      start: 8467,
      length: 1,
      convRule: rule20
  }, {
      start: 8468,
      length: 1,
      convRule: rule13
  }, {
      start: 8469,
      length: 1,
      convRule: rule107
  }, {
      start: 8470,
      length: 2,
      convRule: rule13
  }, {
      start: 8472,
      length: 1,
      convRule: rule6
  }, {
      start: 8473,
      length: 5,
      convRule: rule107
  }, {
      start: 8478,
      length: 6,
      convRule: rule13
  }, {
      start: 8484,
      length: 1,
      convRule: rule107
  }, {
      start: 8485,
      length: 1,
      convRule: rule13
  }, {
      start: 8486,
      length: 1,
      convRule: rule163
  }, {
      start: 8487,
      length: 1,
      convRule: rule13
  }, {
      start: 8488,
      length: 1,
      convRule: rule107
  }, {
      start: 8489,
      length: 1,
      convRule: rule13
  }, {
      start: 8490,
      length: 1,
      convRule: rule164
  }, {
      start: 8491,
      length: 1,
      convRule: rule165
  }, {
      start: 8492,
      length: 2,
      convRule: rule107
  }, {
      start: 8494,
      length: 1,
      convRule: rule13
  }, {
      start: 8495,
      length: 1,
      convRule: rule20
  }, {
      start: 8496,
      length: 2,
      convRule: rule107
  }, {
      start: 8498,
      length: 1,
      convRule: rule166
  }, {
      start: 8499,
      length: 1,
      convRule: rule107
  }, {
      start: 8500,
      length: 1,
      convRule: rule20
  }, {
      start: 8501,
      length: 4,
      convRule: rule14
  }, {
      start: 8505,
      length: 1,
      convRule: rule20
  }, {
      start: 8506,
      length: 2,
      convRule: rule13
  }, {
      start: 8508,
      length: 2,
      convRule: rule20
  }, {
      start: 8510,
      length: 2,
      convRule: rule107
  }, {
      start: 8512,
      length: 5,
      convRule: rule6
  }, {
      start: 8517,
      length: 1,
      convRule: rule107
  }, {
      start: 8518,
      length: 4,
      convRule: rule20
  }, {
      start: 8522,
      length: 1,
      convRule: rule13
  }, {
      start: 8523,
      length: 1,
      convRule: rule6
  }, {
      start: 8524,
      length: 2,
      convRule: rule13
  }, {
      start: 8526,
      length: 1,
      convRule: rule167
  }, {
      start: 8527,
      length: 1,
      convRule: rule13
  }, {
      start: 8528,
      length: 16,
      convRule: rule17
  }, {
      start: 8544,
      length: 16,
      convRule: rule168
  }, {
      start: 8560,
      length: 16,
      convRule: rule169
  }, {
      start: 8576,
      length: 3,
      convRule: rule128
  }, {
      start: 8579,
      length: 1,
      convRule: rule22
  }, {
      start: 8580,
      length: 1,
      convRule: rule23
  }, {
      start: 8581,
      length: 4,
      convRule: rule128
  }, {
      start: 8585,
      length: 1,
      convRule: rule17
  }, {
      start: 8586,
      length: 2,
      convRule: rule13
  }, {
      start: 8592,
      length: 5,
      convRule: rule6
  }, {
      start: 8597,
      length: 5,
      convRule: rule13
  }, {
      start: 8602,
      length: 2,
      convRule: rule6
  }, {
      start: 8604,
      length: 4,
      convRule: rule13
  }, {
      start: 8608,
      length: 1,
      convRule: rule6
  }, {
      start: 8609,
      length: 2,
      convRule: rule13
  }, {
      start: 8611,
      length: 1,
      convRule: rule6
  }, {
      start: 8612,
      length: 2,
      convRule: rule13
  }, {
      start: 8614,
      length: 1,
      convRule: rule6
  }, {
      start: 8615,
      length: 7,
      convRule: rule13
  }, {
      start: 8622,
      length: 1,
      convRule: rule6
  }, {
      start: 8623,
      length: 31,
      convRule: rule13
  }, {
      start: 8654,
      length: 2,
      convRule: rule6
  }, {
      start: 8656,
      length: 2,
      convRule: rule13
  }, {
      start: 8658,
      length: 1,
      convRule: rule6
  }, {
      start: 8659,
      length: 1,
      convRule: rule13
  }, {
      start: 8660,
      length: 1,
      convRule: rule6
  }, {
      start: 8661,
      length: 31,
      convRule: rule13
  }, {
      start: 8692,
      length: 268,
      convRule: rule6
  }, {
      start: 8960,
      length: 8,
      convRule: rule13
  }, {
      start: 8968,
      length: 1,
      convRule: rule4
  }, {
      start: 8969,
      length: 1,
      convRule: rule5
  }, {
      start: 8970,
      length: 1,
      convRule: rule4
  }, {
      start: 8971,
      length: 1,
      convRule: rule5
  }, {
      start: 8972,
      length: 20,
      convRule: rule13
  }, {
      start: 8992,
      length: 2,
      convRule: rule6
  }, {
      start: 8994,
      length: 7,
      convRule: rule13
  }, {
      start: 9001,
      length: 1,
      convRule: rule4
  }, {
      start: 9002,
      length: 1,
      convRule: rule5
  }, {
      start: 9003,
      length: 81,
      convRule: rule13
  }, {
      start: 9084,
      length: 1,
      convRule: rule6
  }, {
      start: 9085,
      length: 30,
      convRule: rule13
  }, {
      start: 9115,
      length: 25,
      convRule: rule6
  }, {
      start: 9140,
      length: 40,
      convRule: rule13
  }, {
      start: 9180,
      length: 6,
      convRule: rule6
  }, {
      start: 9186,
      length: 69,
      convRule: rule13
  }, {
      start: 9280,
      length: 11,
      convRule: rule13
  }, {
      start: 9312,
      length: 60,
      convRule: rule17
  }, {
      start: 9372,
      length: 26,
      convRule: rule13
  }, {
      start: 9398,
      length: 26,
      convRule: rule170
  }, {
      start: 9424,
      length: 26,
      convRule: rule171
  }, {
      start: 9450,
      length: 22,
      convRule: rule17
  }, {
      start: 9472,
      length: 183,
      convRule: rule13
  }, {
      start: 9655,
      length: 1,
      convRule: rule6
  }, {
      start: 9656,
      length: 9,
      convRule: rule13
  }, {
      start: 9665,
      length: 1,
      convRule: rule6
  }, {
      start: 9666,
      length: 54,
      convRule: rule13
  }, {
      start: 9720,
      length: 8,
      convRule: rule6
  }, {
      start: 9728,
      length: 111,
      convRule: rule13
  }, {
      start: 9839,
      length: 1,
      convRule: rule6
  }, {
      start: 9840,
      length: 248,
      convRule: rule13
  }, {
      start: 10088,
      length: 1,
      convRule: rule4
  }, {
      start: 10089,
      length: 1,
      convRule: rule5
  }, {
      start: 10090,
      length: 1,
      convRule: rule4
  }, {
      start: 10091,
      length: 1,
      convRule: rule5
  }, {
      start: 10092,
      length: 1,
      convRule: rule4
  }, {
      start: 10093,
      length: 1,
      convRule: rule5
  }, {
      start: 10094,
      length: 1,
      convRule: rule4
  }, {
      start: 10095,
      length: 1,
      convRule: rule5
  }, {
      start: 10096,
      length: 1,
      convRule: rule4
  }, {
      start: 10097,
      length: 1,
      convRule: rule5
  }, {
      start: 10098,
      length: 1,
      convRule: rule4
  }, {
      start: 10099,
      length: 1,
      convRule: rule5
  }, {
      start: 10100,
      length: 1,
      convRule: rule4
  }, {
      start: 10101,
      length: 1,
      convRule: rule5
  }, {
      start: 10102,
      length: 30,
      convRule: rule17
  }, {
      start: 10132,
      length: 44,
      convRule: rule13
  }, {
      start: 10176,
      length: 5,
      convRule: rule6
  }, {
      start: 10181,
      length: 1,
      convRule: rule4
  }, {
      start: 10182,
      length: 1,
      convRule: rule5
  }, {
      start: 10183,
      length: 31,
      convRule: rule6
  }, {
      start: 10214,
      length: 1,
      convRule: rule4
  }, {
      start: 10215,
      length: 1,
      convRule: rule5
  }, {
      start: 10216,
      length: 1,
      convRule: rule4
  }, {
      start: 10217,
      length: 1,
      convRule: rule5
  }, {
      start: 10218,
      length: 1,
      convRule: rule4
  }, {
      start: 10219,
      length: 1,
      convRule: rule5
  }, {
      start: 10220,
      length: 1,
      convRule: rule4
  }, {
      start: 10221,
      length: 1,
      convRule: rule5
  }, {
      start: 10222,
      length: 1,
      convRule: rule4
  }, {
      start: 10223,
      length: 1,
      convRule: rule5
  }, {
      start: 10224,
      length: 16,
      convRule: rule6
  }, {
      start: 10240,
      length: 256,
      convRule: rule13
  }, {
      start: 10496,
      length: 131,
      convRule: rule6
  }, {
      start: 10627,
      length: 1,
      convRule: rule4
  }, {
      start: 10628,
      length: 1,
      convRule: rule5
  }, {
      start: 10629,
      length: 1,
      convRule: rule4
  }, {
      start: 10630,
      length: 1,
      convRule: rule5
  }, {
      start: 10631,
      length: 1,
      convRule: rule4
  }, {
      start: 10632,
      length: 1,
      convRule: rule5
  }, {
      start: 10633,
      length: 1,
      convRule: rule4
  }, {
      start: 10634,
      length: 1,
      convRule: rule5
  }, {
      start: 10635,
      length: 1,
      convRule: rule4
  }, {
      start: 10636,
      length: 1,
      convRule: rule5
  }, {
      start: 10637,
      length: 1,
      convRule: rule4
  }, {
      start: 10638,
      length: 1,
      convRule: rule5
  }, {
      start: 10639,
      length: 1,
      convRule: rule4
  }, {
      start: 10640,
      length: 1,
      convRule: rule5
  }, {
      start: 10641,
      length: 1,
      convRule: rule4
  }, {
      start: 10642,
      length: 1,
      convRule: rule5
  }, {
      start: 10643,
      length: 1,
      convRule: rule4
  }, {
      start: 10644,
      length: 1,
      convRule: rule5
  }, {
      start: 10645,
      length: 1,
      convRule: rule4
  }, {
      start: 10646,
      length: 1,
      convRule: rule5
  }, {
      start: 10647,
      length: 1,
      convRule: rule4
  }, {
      start: 10648,
      length: 1,
      convRule: rule5
  }, {
      start: 10649,
      length: 63,
      convRule: rule6
  }, {
      start: 10712,
      length: 1,
      convRule: rule4
  }, {
      start: 10713,
      length: 1,
      convRule: rule5
  }, {
      start: 10714,
      length: 1,
      convRule: rule4
  }, {
      start: 10715,
      length: 1,
      convRule: rule5
  }, {
      start: 10716,
      length: 32,
      convRule: rule6
  }, {
      start: 10748,
      length: 1,
      convRule: rule4
  }, {
      start: 10749,
      length: 1,
      convRule: rule5
  }, {
      start: 10750,
      length: 258,
      convRule: rule6
  }, {
      start: 11008,
      length: 48,
      convRule: rule13
  }, {
      start: 11056,
      length: 21,
      convRule: rule6
  }, {
      start: 11077,
      length: 2,
      convRule: rule13
  }, {
      start: 11079,
      length: 6,
      convRule: rule6
  }, {
      start: 11085,
      length: 39,
      convRule: rule13
  }, {
      start: 11126,
      length: 32,
      convRule: rule13
  }, {
      start: 11159,
      length: 105,
      convRule: rule13
  }, {
      start: 11264,
      length: 47,
      convRule: rule122
  }, {
      start: 11312,
      length: 47,
      convRule: rule123
  }, {
      start: 11360,
      length: 1,
      convRule: rule22
  }, {
      start: 11361,
      length: 1,
      convRule: rule23
  }, {
      start: 11362,
      length: 1,
      convRule: rule172
  }, {
      start: 11363,
      length: 1,
      convRule: rule173
  }, {
      start: 11364,
      length: 1,
      convRule: rule174
  }, {
      start: 11365,
      length: 1,
      convRule: rule175
  }, {
      start: 11366,
      length: 1,
      convRule: rule176
  }, {
      start: 11367,
      length: 1,
      convRule: rule22
  }, {
      start: 11368,
      length: 1,
      convRule: rule23
  }, {
      start: 11369,
      length: 1,
      convRule: rule22
  }, {
      start: 11370,
      length: 1,
      convRule: rule23
  }, {
      start: 11371,
      length: 1,
      convRule: rule22
  }, {
      start: 11372,
      length: 1,
      convRule: rule23
  }, {
      start: 11373,
      length: 1,
      convRule: rule177
  }, {
      start: 11374,
      length: 1,
      convRule: rule178
  }, {
      start: 11375,
      length: 1,
      convRule: rule179
  }, {
      start: 11376,
      length: 1,
      convRule: rule180
  }, {
      start: 11377,
      length: 1,
      convRule: rule20
  }, {
      start: 11378,
      length: 1,
      convRule: rule22
  }, {
      start: 11379,
      length: 1,
      convRule: rule23
  }, {
      start: 11380,
      length: 1,
      convRule: rule20
  }, {
      start: 11381,
      length: 1,
      convRule: rule22
  }, {
      start: 11382,
      length: 1,
      convRule: rule23
  }, {
      start: 11383,
      length: 5,
      convRule: rule20
  }, {
      start: 11388,
      length: 2,
      convRule: rule91
  }, {
      start: 11390,
      length: 2,
      convRule: rule181
  }, {
      start: 11392,
      length: 1,
      convRule: rule22
  }, {
      start: 11393,
      length: 1,
      convRule: rule23
  }, {
      start: 11394,
      length: 1,
      convRule: rule22
  }, {
      start: 11395,
      length: 1,
      convRule: rule23
  }, {
      start: 11396,
      length: 1,
      convRule: rule22
  }, {
      start: 11397,
      length: 1,
      convRule: rule23
  }, {
      start: 11398,
      length: 1,
      convRule: rule22
  }, {
      start: 11399,
      length: 1,
      convRule: rule23
  }, {
      start: 11400,
      length: 1,
      convRule: rule22
  }, {
      start: 11401,
      length: 1,
      convRule: rule23
  }, {
      start: 11402,
      length: 1,
      convRule: rule22
  }, {
      start: 11403,
      length: 1,
      convRule: rule23
  }, {
      start: 11404,
      length: 1,
      convRule: rule22
  }, {
      start: 11405,
      length: 1,
      convRule: rule23
  }, {
      start: 11406,
      length: 1,
      convRule: rule22
  }, {
      start: 11407,
      length: 1,
      convRule: rule23
  }, {
      start: 11408,
      length: 1,
      convRule: rule22
  }, {
      start: 11409,
      length: 1,
      convRule: rule23
  }, {
      start: 11410,
      length: 1,
      convRule: rule22
  }, {
      start: 11411,
      length: 1,
      convRule: rule23
  }, {
      start: 11412,
      length: 1,
      convRule: rule22
  }, {
      start: 11413,
      length: 1,
      convRule: rule23
  }, {
      start: 11414,
      length: 1,
      convRule: rule22
  }, {
      start: 11415,
      length: 1,
      convRule: rule23
  }, {
      start: 11416,
      length: 1,
      convRule: rule22
  }, {
      start: 11417,
      length: 1,
      convRule: rule23
  }, {
      start: 11418,
      length: 1,
      convRule: rule22
  }, {
      start: 11419,
      length: 1,
      convRule: rule23
  }, {
      start: 11420,
      length: 1,
      convRule: rule22
  }, {
      start: 11421,
      length: 1,
      convRule: rule23
  }, {
      start: 11422,
      length: 1,
      convRule: rule22
  }, {
      start: 11423,
      length: 1,
      convRule: rule23
  }, {
      start: 11424,
      length: 1,
      convRule: rule22
  }, {
      start: 11425,
      length: 1,
      convRule: rule23
  }, {
      start: 11426,
      length: 1,
      convRule: rule22
  }, {
      start: 11427,
      length: 1,
      convRule: rule23
  }, {
      start: 11428,
      length: 1,
      convRule: rule22
  }, {
      start: 11429,
      length: 1,
      convRule: rule23
  }, {
      start: 11430,
      length: 1,
      convRule: rule22
  }, {
      start: 11431,
      length: 1,
      convRule: rule23
  }, {
      start: 11432,
      length: 1,
      convRule: rule22
  }, {
      start: 11433,
      length: 1,
      convRule: rule23
  }, {
      start: 11434,
      length: 1,
      convRule: rule22
  }, {
      start: 11435,
      length: 1,
      convRule: rule23
  }, {
      start: 11436,
      length: 1,
      convRule: rule22
  }, {
      start: 11437,
      length: 1,
      convRule: rule23
  }, {
      start: 11438,
      length: 1,
      convRule: rule22
  }, {
      start: 11439,
      length: 1,
      convRule: rule23
  }, {
      start: 11440,
      length: 1,
      convRule: rule22
  }, {
      start: 11441,
      length: 1,
      convRule: rule23
  }, {
      start: 11442,
      length: 1,
      convRule: rule22
  }, {
      start: 11443,
      length: 1,
      convRule: rule23
  }, {
      start: 11444,
      length: 1,
      convRule: rule22
  }, {
      start: 11445,
      length: 1,
      convRule: rule23
  }, {
      start: 11446,
      length: 1,
      convRule: rule22
  }, {
      start: 11447,
      length: 1,
      convRule: rule23
  }, {
      start: 11448,
      length: 1,
      convRule: rule22
  }, {
      start: 11449,
      length: 1,
      convRule: rule23
  }, {
      start: 11450,
      length: 1,
      convRule: rule22
  }, {
      start: 11451,
      length: 1,
      convRule: rule23
  }, {
      start: 11452,
      length: 1,
      convRule: rule22
  }, {
      start: 11453,
      length: 1,
      convRule: rule23
  }, {
      start: 11454,
      length: 1,
      convRule: rule22
  }, {
      start: 11455,
      length: 1,
      convRule: rule23
  }, {
      start: 11456,
      length: 1,
      convRule: rule22
  }, {
      start: 11457,
      length: 1,
      convRule: rule23
  }, {
      start: 11458,
      length: 1,
      convRule: rule22
  }, {
      start: 11459,
      length: 1,
      convRule: rule23
  }, {
      start: 11460,
      length: 1,
      convRule: rule22
  }, {
      start: 11461,
      length: 1,
      convRule: rule23
  }, {
      start: 11462,
      length: 1,
      convRule: rule22
  }, {
      start: 11463,
      length: 1,
      convRule: rule23
  }, {
      start: 11464,
      length: 1,
      convRule: rule22
  }, {
      start: 11465,
      length: 1,
      convRule: rule23
  }, {
      start: 11466,
      length: 1,
      convRule: rule22
  }, {
      start: 11467,
      length: 1,
      convRule: rule23
  }, {
      start: 11468,
      length: 1,
      convRule: rule22
  }, {
      start: 11469,
      length: 1,
      convRule: rule23
  }, {
      start: 11470,
      length: 1,
      convRule: rule22
  }, {
      start: 11471,
      length: 1,
      convRule: rule23
  }, {
      start: 11472,
      length: 1,
      convRule: rule22
  }, {
      start: 11473,
      length: 1,
      convRule: rule23
  }, {
      start: 11474,
      length: 1,
      convRule: rule22
  }, {
      start: 11475,
      length: 1,
      convRule: rule23
  }, {
      start: 11476,
      length: 1,
      convRule: rule22
  }, {
      start: 11477,
      length: 1,
      convRule: rule23
  }, {
      start: 11478,
      length: 1,
      convRule: rule22
  }, {
      start: 11479,
      length: 1,
      convRule: rule23
  }, {
      start: 11480,
      length: 1,
      convRule: rule22
  }, {
      start: 11481,
      length: 1,
      convRule: rule23
  }, {
      start: 11482,
      length: 1,
      convRule: rule22
  }, {
      start: 11483,
      length: 1,
      convRule: rule23
  }, {
      start: 11484,
      length: 1,
      convRule: rule22
  }, {
      start: 11485,
      length: 1,
      convRule: rule23
  }, {
      start: 11486,
      length: 1,
      convRule: rule22
  }, {
      start: 11487,
      length: 1,
      convRule: rule23
  }, {
      start: 11488,
      length: 1,
      convRule: rule22
  }, {
      start: 11489,
      length: 1,
      convRule: rule23
  }, {
      start: 11490,
      length: 1,
      convRule: rule22
  }, {
      start: 11491,
      length: 1,
      convRule: rule23
  }, {
      start: 11492,
      length: 1,
      convRule: rule20
  }, {
      start: 11493,
      length: 6,
      convRule: rule13
  }, {
      start: 11499,
      length: 1,
      convRule: rule22
  }, {
      start: 11500,
      length: 1,
      convRule: rule23
  }, {
      start: 11501,
      length: 1,
      convRule: rule22
  }, {
      start: 11502,
      length: 1,
      convRule: rule23
  }, {
      start: 11503,
      length: 3,
      convRule: rule92
  }, {
      start: 11506,
      length: 1,
      convRule: rule22
  }, {
      start: 11507,
      length: 1,
      convRule: rule23
  }, {
      start: 11513,
      length: 4,
      convRule: rule2
  }, {
      start: 11517,
      length: 1,
      convRule: rule17
  }, {
      start: 11518,
      length: 2,
      convRule: rule2
  }, {
      start: 11520,
      length: 38,
      convRule: rule182
  }, {
      start: 11559,
      length: 1,
      convRule: rule182
  }, {
      start: 11565,
      length: 1,
      convRule: rule182
  }, {
      start: 11568,
      length: 56,
      convRule: rule14
  }, {
      start: 11631,
      length: 1,
      convRule: rule91
  }, {
      start: 11632,
      length: 1,
      convRule: rule2
  }, {
      start: 11647,
      length: 1,
      convRule: rule92
  }, {
      start: 11648,
      length: 23,
      convRule: rule14
  }, {
      start: 11680,
      length: 7,
      convRule: rule14
  }, {
      start: 11688,
      length: 7,
      convRule: rule14
  }, {
      start: 11696,
      length: 7,
      convRule: rule14
  }, {
      start: 11704,
      length: 7,
      convRule: rule14
  }, {
      start: 11712,
      length: 7,
      convRule: rule14
  }, {
      start: 11720,
      length: 7,
      convRule: rule14
  }, {
      start: 11728,
      length: 7,
      convRule: rule14
  }, {
      start: 11736,
      length: 7,
      convRule: rule14
  }, {
      start: 11744,
      length: 32,
      convRule: rule92
  }, {
      start: 11776,
      length: 2,
      convRule: rule2
  }, {
      start: 11778,
      length: 1,
      convRule: rule15
  }, {
      start: 11779,
      length: 1,
      convRule: rule19
  }, {
      start: 11780,
      length: 1,
      convRule: rule15
  }, {
      start: 11781,
      length: 1,
      convRule: rule19
  }, {
      start: 11782,
      length: 3,
      convRule: rule2
  }, {
      start: 11785,
      length: 1,
      convRule: rule15
  }, {
      start: 11786,
      length: 1,
      convRule: rule19
  }, {
      start: 11787,
      length: 1,
      convRule: rule2
  }, {
      start: 11788,
      length: 1,
      convRule: rule15
  }, {
      start: 11789,
      length: 1,
      convRule: rule19
  }, {
      start: 11790,
      length: 9,
      convRule: rule2
  }, {
      start: 11799,
      length: 1,
      convRule: rule7
  }, {
      start: 11800,
      length: 2,
      convRule: rule2
  }, {
      start: 11802,
      length: 1,
      convRule: rule7
  }, {
      start: 11803,
      length: 1,
      convRule: rule2
  }, {
      start: 11804,
      length: 1,
      convRule: rule15
  }, {
      start: 11805,
      length: 1,
      convRule: rule19
  }, {
      start: 11806,
      length: 2,
      convRule: rule2
  }, {
      start: 11808,
      length: 1,
      convRule: rule15
  }, {
      start: 11809,
      length: 1,
      convRule: rule19
  }, {
      start: 11810,
      length: 1,
      convRule: rule4
  }, {
      start: 11811,
      length: 1,
      convRule: rule5
  }, {
      start: 11812,
      length: 1,
      convRule: rule4
  }, {
      start: 11813,
      length: 1,
      convRule: rule5
  }, {
      start: 11814,
      length: 1,
      convRule: rule4
  }, {
      start: 11815,
      length: 1,
      convRule: rule5
  }, {
      start: 11816,
      length: 1,
      convRule: rule4
  }, {
      start: 11817,
      length: 1,
      convRule: rule5
  }, {
      start: 11818,
      length: 5,
      convRule: rule2
  }, {
      start: 11823,
      length: 1,
      convRule: rule91
  }, {
      start: 11824,
      length: 10,
      convRule: rule2
  }, {
      start: 11834,
      length: 2,
      convRule: rule7
  }, {
      start: 11836,
      length: 4,
      convRule: rule2
  }, {
      start: 11840,
      length: 1,
      convRule: rule7
  }, {
      start: 11841,
      length: 1,
      convRule: rule2
  }, {
      start: 11842,
      length: 1,
      convRule: rule4
  }, {
      start: 11843,
      length: 13,
      convRule: rule2
  }, {
      start: 11856,
      length: 2,
      convRule: rule13
  }, {
      start: 11858,
      length: 1,
      convRule: rule2
  }, {
      start: 11904,
      length: 26,
      convRule: rule13
  }, {
      start: 11931,
      length: 89,
      convRule: rule13
  }, {
      start: 12032,
      length: 214,
      convRule: rule13
  }, {
      start: 12272,
      length: 12,
      convRule: rule13
  }, {
      start: 12288,
      length: 1,
      convRule: rule1
  }, {
      start: 12289,
      length: 3,
      convRule: rule2
  }, {
      start: 12292,
      length: 1,
      convRule: rule13
  }, {
      start: 12293,
      length: 1,
      convRule: rule91
  }, {
      start: 12294,
      length: 1,
      convRule: rule14
  }, {
      start: 12295,
      length: 1,
      convRule: rule128
  }, {
      start: 12296,
      length: 1,
      convRule: rule4
  }, {
      start: 12297,
      length: 1,
      convRule: rule5
  }, {
      start: 12298,
      length: 1,
      convRule: rule4
  }, {
      start: 12299,
      length: 1,
      convRule: rule5
  }, {
      start: 12300,
      length: 1,
      convRule: rule4
  }, {
      start: 12301,
      length: 1,
      convRule: rule5
  }, {
      start: 12302,
      length: 1,
      convRule: rule4
  }, {
      start: 12303,
      length: 1,
      convRule: rule5
  }, {
      start: 12304,
      length: 1,
      convRule: rule4
  }, {
      start: 12305,
      length: 1,
      convRule: rule5
  }, {
      start: 12306,
      length: 2,
      convRule: rule13
  }, {
      start: 12308,
      length: 1,
      convRule: rule4
  }, {
      start: 12309,
      length: 1,
      convRule: rule5
  }, {
      start: 12310,
      length: 1,
      convRule: rule4
  }, {
      start: 12311,
      length: 1,
      convRule: rule5
  }, {
      start: 12312,
      length: 1,
      convRule: rule4
  }, {
      start: 12313,
      length: 1,
      convRule: rule5
  }, {
      start: 12314,
      length: 1,
      convRule: rule4
  }, {
      start: 12315,
      length: 1,
      convRule: rule5
  }, {
      start: 12316,
      length: 1,
      convRule: rule7
  }, {
      start: 12317,
      length: 1,
      convRule: rule4
  }, {
      start: 12318,
      length: 2,
      convRule: rule5
  }, {
      start: 12320,
      length: 1,
      convRule: rule13
  }, {
      start: 12321,
      length: 9,
      convRule: rule128
  }, {
      start: 12330,
      length: 4,
      convRule: rule92
  }, {
      start: 12334,
      length: 2,
      convRule: rule124
  }, {
      start: 12336,
      length: 1,
      convRule: rule7
  }, {
      start: 12337,
      length: 5,
      convRule: rule91
  }, {
      start: 12342,
      length: 2,
      convRule: rule13
  }, {
      start: 12344,
      length: 3,
      convRule: rule128
  }, {
      start: 12347,
      length: 1,
      convRule: rule91
  }, {
      start: 12348,
      length: 1,
      convRule: rule14
  }, {
      start: 12349,
      length: 1,
      convRule: rule2
  }, {
      start: 12350,
      length: 2,
      convRule: rule13
  }, {
      start: 12353,
      length: 86,
      convRule: rule14
  }, {
      start: 12441,
      length: 2,
      convRule: rule92
  }, {
      start: 12443,
      length: 2,
      convRule: rule10
  }, {
      start: 12445,
      length: 2,
      convRule: rule91
  }, {
      start: 12447,
      length: 1,
      convRule: rule14
  }, {
      start: 12448,
      length: 1,
      convRule: rule7
  }, {
      start: 12449,
      length: 90,
      convRule: rule14
  }, {
      start: 12539,
      length: 1,
      convRule: rule2
  }, {
      start: 12540,
      length: 3,
      convRule: rule91
  }, {
      start: 12543,
      length: 1,
      convRule: rule14
  }, {
      start: 12549,
      length: 43,
      convRule: rule14
  }, {
      start: 12593,
      length: 94,
      convRule: rule14
  }, {
      start: 12688,
      length: 2,
      convRule: rule13
  }, {
      start: 12690,
      length: 4,
      convRule: rule17
  }, {
      start: 12694,
      length: 10,
      convRule: rule13
  }, {
      start: 12704,
      length: 32,
      convRule: rule14
  }, {
      start: 12736,
      length: 36,
      convRule: rule13
  }, {
      start: 12784,
      length: 16,
      convRule: rule14
  }, {
      start: 12800,
      length: 31,
      convRule: rule13
  }, {
      start: 12832,
      length: 10,
      convRule: rule17
  }, {
      start: 12842,
      length: 30,
      convRule: rule13
  }, {
      start: 12872,
      length: 8,
      convRule: rule17
  }, {
      start: 12880,
      length: 1,
      convRule: rule13
  }, {
      start: 12881,
      length: 15,
      convRule: rule17
  }, {
      start: 12896,
      length: 32,
      convRule: rule13
  }, {
      start: 12928,
      length: 10,
      convRule: rule17
  }, {
      start: 12938,
      length: 39,
      convRule: rule13
  }, {
      start: 12977,
      length: 15,
      convRule: rule17
  }, {
      start: 12992,
      length: 320,
      convRule: rule13
  }, {
      start: 13312,
      length: 6592,
      convRule: rule14
  }, {
      start: 19904,
      length: 64,
      convRule: rule13
  }, {
      start: 19968,
      length: 20989,
      convRule: rule14
  }, {
      start: 40960,
      length: 21,
      convRule: rule14
  }, {
      start: 40981,
      length: 1,
      convRule: rule91
  }, {
      start: 40982,
      length: 1143,
      convRule: rule14
  }, {
      start: 42128,
      length: 55,
      convRule: rule13
  }, {
      start: 42192,
      length: 40,
      convRule: rule14
  }, {
      start: 42232,
      length: 6,
      convRule: rule91
  }, {
      start: 42238,
      length: 2,
      convRule: rule2
  }, {
      start: 42240,
      length: 268,
      convRule: rule14
  }, {
      start: 42508,
      length: 1,
      convRule: rule91
  }, {
      start: 42509,
      length: 3,
      convRule: rule2
  }, {
      start: 42512,
      length: 16,
      convRule: rule14
  }, {
      start: 42528,
      length: 10,
      convRule: rule8
  }, {
      start: 42538,
      length: 2,
      convRule: rule14
  }, {
      start: 42560,
      length: 1,
      convRule: rule22
  }, {
      start: 42561,
      length: 1,
      convRule: rule23
  }, {
      start: 42562,
      length: 1,
      convRule: rule22
  }, {
      start: 42563,
      length: 1,
      convRule: rule23
  }, {
      start: 42564,
      length: 1,
      convRule: rule22
  }, {
      start: 42565,
      length: 1,
      convRule: rule23
  }, {
      start: 42566,
      length: 1,
      convRule: rule22
  }, {
      start: 42567,
      length: 1,
      convRule: rule23
  }, {
      start: 42568,
      length: 1,
      convRule: rule22
  }, {
      start: 42569,
      length: 1,
      convRule: rule23
  }, {
      start: 42570,
      length: 1,
      convRule: rule22
  }, {
      start: 42571,
      length: 1,
      convRule: rule23
  }, {
      start: 42572,
      length: 1,
      convRule: rule22
  }, {
      start: 42573,
      length: 1,
      convRule: rule23
  }, {
      start: 42574,
      length: 1,
      convRule: rule22
  }, {
      start: 42575,
      length: 1,
      convRule: rule23
  }, {
      start: 42576,
      length: 1,
      convRule: rule22
  }, {
      start: 42577,
      length: 1,
      convRule: rule23
  }, {
      start: 42578,
      length: 1,
      convRule: rule22
  }, {
      start: 42579,
      length: 1,
      convRule: rule23
  }, {
      start: 42580,
      length: 1,
      convRule: rule22
  }, {
      start: 42581,
      length: 1,
      convRule: rule23
  }, {
      start: 42582,
      length: 1,
      convRule: rule22
  }, {
      start: 42583,
      length: 1,
      convRule: rule23
  }, {
      start: 42584,
      length: 1,
      convRule: rule22
  }, {
      start: 42585,
      length: 1,
      convRule: rule23
  }, {
      start: 42586,
      length: 1,
      convRule: rule22
  }, {
      start: 42587,
      length: 1,
      convRule: rule23
  }, {
      start: 42588,
      length: 1,
      convRule: rule22
  }, {
      start: 42589,
      length: 1,
      convRule: rule23
  }, {
      start: 42590,
      length: 1,
      convRule: rule22
  }, {
      start: 42591,
      length: 1,
      convRule: rule23
  }, {
      start: 42592,
      length: 1,
      convRule: rule22
  }, {
      start: 42593,
      length: 1,
      convRule: rule23
  }, {
      start: 42594,
      length: 1,
      convRule: rule22
  }, {
      start: 42595,
      length: 1,
      convRule: rule23
  }, {
      start: 42596,
      length: 1,
      convRule: rule22
  }, {
      start: 42597,
      length: 1,
      convRule: rule23
  }, {
      start: 42598,
      length: 1,
      convRule: rule22
  }, {
      start: 42599,
      length: 1,
      convRule: rule23
  }, {
      start: 42600,
      length: 1,
      convRule: rule22
  }, {
      start: 42601,
      length: 1,
      convRule: rule23
  }, {
      start: 42602,
      length: 1,
      convRule: rule22
  }, {
      start: 42603,
      length: 1,
      convRule: rule23
  }, {
      start: 42604,
      length: 1,
      convRule: rule22
  }, {
      start: 42605,
      length: 1,
      convRule: rule23
  }, {
      start: 42606,
      length: 1,
      convRule: rule14
  }, {
      start: 42607,
      length: 1,
      convRule: rule92
  }, {
      start: 42608,
      length: 3,
      convRule: rule119
  }, {
      start: 42611,
      length: 1,
      convRule: rule2
  }, {
      start: 42612,
      length: 10,
      convRule: rule92
  }, {
      start: 42622,
      length: 1,
      convRule: rule2
  }, {
      start: 42623,
      length: 1,
      convRule: rule91
  }, {
      start: 42624,
      length: 1,
      convRule: rule22
  }, {
      start: 42625,
      length: 1,
      convRule: rule23
  }, {
      start: 42626,
      length: 1,
      convRule: rule22
  }, {
      start: 42627,
      length: 1,
      convRule: rule23
  }, {
      start: 42628,
      length: 1,
      convRule: rule22
  }, {
      start: 42629,
      length: 1,
      convRule: rule23
  }, {
      start: 42630,
      length: 1,
      convRule: rule22
  }, {
      start: 42631,
      length: 1,
      convRule: rule23
  }, {
      start: 42632,
      length: 1,
      convRule: rule22
  }, {
      start: 42633,
      length: 1,
      convRule: rule23
  }, {
      start: 42634,
      length: 1,
      convRule: rule22
  }, {
      start: 42635,
      length: 1,
      convRule: rule23
  }, {
      start: 42636,
      length: 1,
      convRule: rule22
  }, {
      start: 42637,
      length: 1,
      convRule: rule23
  }, {
      start: 42638,
      length: 1,
      convRule: rule22
  }, {
      start: 42639,
      length: 1,
      convRule: rule23
  }, {
      start: 42640,
      length: 1,
      convRule: rule22
  }, {
      start: 42641,
      length: 1,
      convRule: rule23
  }, {
      start: 42642,
      length: 1,
      convRule: rule22
  }, {
      start: 42643,
      length: 1,
      convRule: rule23
  }, {
      start: 42644,
      length: 1,
      convRule: rule22
  }, {
      start: 42645,
      length: 1,
      convRule: rule23
  }, {
      start: 42646,
      length: 1,
      convRule: rule22
  }, {
      start: 42647,
      length: 1,
      convRule: rule23
  }, {
      start: 42648,
      length: 1,
      convRule: rule22
  }, {
      start: 42649,
      length: 1,
      convRule: rule23
  }, {
      start: 42650,
      length: 1,
      convRule: rule22
  }, {
      start: 42651,
      length: 1,
      convRule: rule23
  }, {
      start: 42652,
      length: 2,
      convRule: rule91
  }, {
      start: 42654,
      length: 2,
      convRule: rule92
  }, {
      start: 42656,
      length: 70,
      convRule: rule14
  }, {
      start: 42726,
      length: 10,
      convRule: rule128
  }, {
      start: 42736,
      length: 2,
      convRule: rule92
  }, {
      start: 42738,
      length: 6,
      convRule: rule2
  }, {
      start: 42752,
      length: 23,
      convRule: rule10
  }, {
      start: 42775,
      length: 9,
      convRule: rule91
  }, {
      start: 42784,
      length: 2,
      convRule: rule10
  }, {
      start: 42786,
      length: 1,
      convRule: rule22
  }, {
      start: 42787,
      length: 1,
      convRule: rule23
  }, {
      start: 42788,
      length: 1,
      convRule: rule22
  }, {
      start: 42789,
      length: 1,
      convRule: rule23
  }, {
      start: 42790,
      length: 1,
      convRule: rule22
  }, {
      start: 42791,
      length: 1,
      convRule: rule23
  }, {
      start: 42792,
      length: 1,
      convRule: rule22
  }, {
      start: 42793,
      length: 1,
      convRule: rule23
  }, {
      start: 42794,
      length: 1,
      convRule: rule22
  }, {
      start: 42795,
      length: 1,
      convRule: rule23
  }, {
      start: 42796,
      length: 1,
      convRule: rule22
  }, {
      start: 42797,
      length: 1,
      convRule: rule23
  }, {
      start: 42798,
      length: 1,
      convRule: rule22
  }, {
      start: 42799,
      length: 1,
      convRule: rule23
  }, {
      start: 42800,
      length: 2,
      convRule: rule20
  }, {
      start: 42802,
      length: 1,
      convRule: rule22
  }, {
      start: 42803,
      length: 1,
      convRule: rule23
  }, {
      start: 42804,
      length: 1,
      convRule: rule22
  }, {
      start: 42805,
      length: 1,
      convRule: rule23
  }, {
      start: 42806,
      length: 1,
      convRule: rule22
  }, {
      start: 42807,
      length: 1,
      convRule: rule23
  }, {
      start: 42808,
      length: 1,
      convRule: rule22
  }, {
      start: 42809,
      length: 1,
      convRule: rule23
  }, {
      start: 42810,
      length: 1,
      convRule: rule22
  }, {
      start: 42811,
      length: 1,
      convRule: rule23
  }, {
      start: 42812,
      length: 1,
      convRule: rule22
  }, {
      start: 42813,
      length: 1,
      convRule: rule23
  }, {
      start: 42814,
      length: 1,
      convRule: rule22
  }, {
      start: 42815,
      length: 1,
      convRule: rule23
  }, {
      start: 42816,
      length: 1,
      convRule: rule22
  }, {
      start: 42817,
      length: 1,
      convRule: rule23
  }, {
      start: 42818,
      length: 1,
      convRule: rule22
  }, {
      start: 42819,
      length: 1,
      convRule: rule23
  }, {
      start: 42820,
      length: 1,
      convRule: rule22
  }, {
      start: 42821,
      length: 1,
      convRule: rule23
  }, {
      start: 42822,
      length: 1,
      convRule: rule22
  }, {
      start: 42823,
      length: 1,
      convRule: rule23
  }, {
      start: 42824,
      length: 1,
      convRule: rule22
  }, {
      start: 42825,
      length: 1,
      convRule: rule23
  }, {
      start: 42826,
      length: 1,
      convRule: rule22
  }, {
      start: 42827,
      length: 1,
      convRule: rule23
  }, {
      start: 42828,
      length: 1,
      convRule: rule22
  }, {
      start: 42829,
      length: 1,
      convRule: rule23
  }, {
      start: 42830,
      length: 1,
      convRule: rule22
  }, {
      start: 42831,
      length: 1,
      convRule: rule23
  }, {
      start: 42832,
      length: 1,
      convRule: rule22
  }, {
      start: 42833,
      length: 1,
      convRule: rule23
  }, {
      start: 42834,
      length: 1,
      convRule: rule22
  }, {
      start: 42835,
      length: 1,
      convRule: rule23
  }, {
      start: 42836,
      length: 1,
      convRule: rule22
  }, {
      start: 42837,
      length: 1,
      convRule: rule23
  }, {
      start: 42838,
      length: 1,
      convRule: rule22
  }, {
      start: 42839,
      length: 1,
      convRule: rule23
  }, {
      start: 42840,
      length: 1,
      convRule: rule22
  }, {
      start: 42841,
      length: 1,
      convRule: rule23
  }, {
      start: 42842,
      length: 1,
      convRule: rule22
  }, {
      start: 42843,
      length: 1,
      convRule: rule23
  }, {
      start: 42844,
      length: 1,
      convRule: rule22
  }, {
      start: 42845,
      length: 1,
      convRule: rule23
  }, {
      start: 42846,
      length: 1,
      convRule: rule22
  }, {
      start: 42847,
      length: 1,
      convRule: rule23
  }, {
      start: 42848,
      length: 1,
      convRule: rule22
  }, {
      start: 42849,
      length: 1,
      convRule: rule23
  }, {
      start: 42850,
      length: 1,
      convRule: rule22
  }, {
      start: 42851,
      length: 1,
      convRule: rule23
  }, {
      start: 42852,
      length: 1,
      convRule: rule22
  }, {
      start: 42853,
      length: 1,
      convRule: rule23
  }, {
      start: 42854,
      length: 1,
      convRule: rule22
  }, {
      start: 42855,
      length: 1,
      convRule: rule23
  }, {
      start: 42856,
      length: 1,
      convRule: rule22
  }, {
      start: 42857,
      length: 1,
      convRule: rule23
  }, {
      start: 42858,
      length: 1,
      convRule: rule22
  }, {
      start: 42859,
      length: 1,
      convRule: rule23
  }, {
      start: 42860,
      length: 1,
      convRule: rule22
  }, {
      start: 42861,
      length: 1,
      convRule: rule23
  }, {
      start: 42862,
      length: 1,
      convRule: rule22
  }, {
      start: 42863,
      length: 1,
      convRule: rule23
  }, {
      start: 42864,
      length: 1,
      convRule: rule91
  }, {
      start: 42865,
      length: 8,
      convRule: rule20
  }, {
      start: 42873,
      length: 1,
      convRule: rule22
  }, {
      start: 42874,
      length: 1,
      convRule: rule23
  }, {
      start: 42875,
      length: 1,
      convRule: rule22
  }, {
      start: 42876,
      length: 1,
      convRule: rule23
  }, {
      start: 42877,
      length: 1,
      convRule: rule183
  }, {
      start: 42878,
      length: 1,
      convRule: rule22
  }, {
      start: 42879,
      length: 1,
      convRule: rule23
  }, {
      start: 42880,
      length: 1,
      convRule: rule22
  }, {
      start: 42881,
      length: 1,
      convRule: rule23
  }, {
      start: 42882,
      length: 1,
      convRule: rule22
  }, {
      start: 42883,
      length: 1,
      convRule: rule23
  }, {
      start: 42884,
      length: 1,
      convRule: rule22
  }, {
      start: 42885,
      length: 1,
      convRule: rule23
  }, {
      start: 42886,
      length: 1,
      convRule: rule22
  }, {
      start: 42887,
      length: 1,
      convRule: rule23
  }, {
      start: 42888,
      length: 1,
      convRule: rule91
  }, {
      start: 42889,
      length: 2,
      convRule: rule10
  }, {
      start: 42891,
      length: 1,
      convRule: rule22
  }, {
      start: 42892,
      length: 1,
      convRule: rule23
  }, {
      start: 42893,
      length: 1,
      convRule: rule184
  }, {
      start: 42894,
      length: 1,
      convRule: rule20
  }, {
      start: 42895,
      length: 1,
      convRule: rule14
  }, {
      start: 42896,
      length: 1,
      convRule: rule22
  }, {
      start: 42897,
      length: 1,
      convRule: rule23
  }, {
      start: 42898,
      length: 1,
      convRule: rule22
  }, {
      start: 42899,
      length: 1,
      convRule: rule23
  }, {
      start: 42900,
      length: 1,
      convRule: rule185
  }, {
      start: 42901,
      length: 1,
      convRule: rule20
  }, {
      start: 42902,
      length: 1,
      convRule: rule22
  }, {
      start: 42903,
      length: 1,
      convRule: rule23
  }, {
      start: 42904,
      length: 1,
      convRule: rule22
  }, {
      start: 42905,
      length: 1,
      convRule: rule23
  }, {
      start: 42906,
      length: 1,
      convRule: rule22
  }, {
      start: 42907,
      length: 1,
      convRule: rule23
  }, {
      start: 42908,
      length: 1,
      convRule: rule22
  }, {
      start: 42909,
      length: 1,
      convRule: rule23
  }, {
      start: 42910,
      length: 1,
      convRule: rule22
  }, {
      start: 42911,
      length: 1,
      convRule: rule23
  }, {
      start: 42912,
      length: 1,
      convRule: rule22
  }, {
      start: 42913,
      length: 1,
      convRule: rule23
  }, {
      start: 42914,
      length: 1,
      convRule: rule22
  }, {
      start: 42915,
      length: 1,
      convRule: rule23
  }, {
      start: 42916,
      length: 1,
      convRule: rule22
  }, {
      start: 42917,
      length: 1,
      convRule: rule23
  }, {
      start: 42918,
      length: 1,
      convRule: rule22
  }, {
      start: 42919,
      length: 1,
      convRule: rule23
  }, {
      start: 42920,
      length: 1,
      convRule: rule22
  }, {
      start: 42921,
      length: 1,
      convRule: rule23
  }, {
      start: 42922,
      length: 1,
      convRule: rule186
  }, {
      start: 42923,
      length: 1,
      convRule: rule187
  }, {
      start: 42924,
      length: 1,
      convRule: rule188
  }, {
      start: 42925,
      length: 1,
      convRule: rule189
  }, {
      start: 42926,
      length: 1,
      convRule: rule186
  }, {
      start: 42927,
      length: 1,
      convRule: rule20
  }, {
      start: 42928,
      length: 1,
      convRule: rule190
  }, {
      start: 42929,
      length: 1,
      convRule: rule191
  }, {
      start: 42930,
      length: 1,
      convRule: rule192
  }, {
      start: 42931,
      length: 1,
      convRule: rule193
  }, {
      start: 42932,
      length: 1,
      convRule: rule22
  }, {
      start: 42933,
      length: 1,
      convRule: rule23
  }, {
      start: 42934,
      length: 1,
      convRule: rule22
  }, {
      start: 42935,
      length: 1,
      convRule: rule23
  }, {
      start: 42936,
      length: 1,
      convRule: rule22
  }, {
      start: 42937,
      length: 1,
      convRule: rule23
  }, {
      start: 42938,
      length: 1,
      convRule: rule22
  }, {
      start: 42939,
      length: 1,
      convRule: rule23
  }, {
      start: 42940,
      length: 1,
      convRule: rule22
  }, {
      start: 42941,
      length: 1,
      convRule: rule23
  }, {
      start: 42942,
      length: 1,
      convRule: rule22
  }, {
      start: 42943,
      length: 1,
      convRule: rule23
  }, {
      start: 42946,
      length: 1,
      convRule: rule22
  }, {
      start: 42947,
      length: 1,
      convRule: rule23
  }, {
      start: 42948,
      length: 1,
      convRule: rule194
  }, {
      start: 42949,
      length: 1,
      convRule: rule195
  }, {
      start: 42950,
      length: 1,
      convRule: rule196
  }, {
      start: 42951,
      length: 1,
      convRule: rule22
  }, {
      start: 42952,
      length: 1,
      convRule: rule23
  }, {
      start: 42953,
      length: 1,
      convRule: rule22
  }, {
      start: 42954,
      length: 1,
      convRule: rule23
  }, {
      start: 42997,
      length: 1,
      convRule: rule22
  }, {
      start: 42998,
      length: 1,
      convRule: rule23
  }, {
      start: 42999,
      length: 1,
      convRule: rule14
  }, {
      start: 43000,
      length: 2,
      convRule: rule91
  }, {
      start: 43002,
      length: 1,
      convRule: rule20
  }, {
      start: 43003,
      length: 7,
      convRule: rule14
  }, {
      start: 43010,
      length: 1,
      convRule: rule92
  }, {
      start: 43011,
      length: 3,
      convRule: rule14
  }, {
      start: 43014,
      length: 1,
      convRule: rule92
  }, {
      start: 43015,
      length: 4,
      convRule: rule14
  }, {
      start: 43019,
      length: 1,
      convRule: rule92
  }, {
      start: 43020,
      length: 23,
      convRule: rule14
  }, {
      start: 43043,
      length: 2,
      convRule: rule124
  }, {
      start: 43045,
      length: 2,
      convRule: rule92
  }, {
      start: 43047,
      length: 1,
      convRule: rule124
  }, {
      start: 43048,
      length: 4,
      convRule: rule13
  }, {
      start: 43052,
      length: 1,
      convRule: rule92
  }, {
      start: 43056,
      length: 6,
      convRule: rule17
  }, {
      start: 43062,
      length: 2,
      convRule: rule13
  }, {
      start: 43064,
      length: 1,
      convRule: rule3
  }, {
      start: 43065,
      length: 1,
      convRule: rule13
  }, {
      start: 43072,
      length: 52,
      convRule: rule14
  }, {
      start: 43124,
      length: 4,
      convRule: rule2
  }, {
      start: 43136,
      length: 2,
      convRule: rule124
  }, {
      start: 43138,
      length: 50,
      convRule: rule14
  }, {
      start: 43188,
      length: 16,
      convRule: rule124
  }, {
      start: 43204,
      length: 2,
      convRule: rule92
  }, {
      start: 43214,
      length: 2,
      convRule: rule2
  }, {
      start: 43216,
      length: 10,
      convRule: rule8
  }, {
      start: 43232,
      length: 18,
      convRule: rule92
  }, {
      start: 43250,
      length: 6,
      convRule: rule14
  }, {
      start: 43256,
      length: 3,
      convRule: rule2
  }, {
      start: 43259,
      length: 1,
      convRule: rule14
  }, {
      start: 43260,
      length: 1,
      convRule: rule2
  }, {
      start: 43261,
      length: 2,
      convRule: rule14
  }, {
      start: 43263,
      length: 1,
      convRule: rule92
  }, {
      start: 43264,
      length: 10,
      convRule: rule8
  }, {
      start: 43274,
      length: 28,
      convRule: rule14
  }, {
      start: 43302,
      length: 8,
      convRule: rule92
  }, {
      start: 43310,
      length: 2,
      convRule: rule2
  }, {
      start: 43312,
      length: 23,
      convRule: rule14
  }, {
      start: 43335,
      length: 11,
      convRule: rule92
  }, {
      start: 43346,
      length: 2,
      convRule: rule124
  }, {
      start: 43359,
      length: 1,
      convRule: rule2
  }, {
      start: 43360,
      length: 29,
      convRule: rule14
  }, {
      start: 43392,
      length: 3,
      convRule: rule92
  }, {
      start: 43395,
      length: 1,
      convRule: rule124
  }, {
      start: 43396,
      length: 47,
      convRule: rule14
  }, {
      start: 43443,
      length: 1,
      convRule: rule92
  }, {
      start: 43444,
      length: 2,
      convRule: rule124
  }, {
      start: 43446,
      length: 4,
      convRule: rule92
  }, {
      start: 43450,
      length: 2,
      convRule: rule124
  }, {
      start: 43452,
      length: 2,
      convRule: rule92
  }, {
      start: 43454,
      length: 3,
      convRule: rule124
  }, {
      start: 43457,
      length: 13,
      convRule: rule2
  }, {
      start: 43471,
      length: 1,
      convRule: rule91
  }, {
      start: 43472,
      length: 10,
      convRule: rule8
  }, {
      start: 43486,
      length: 2,
      convRule: rule2
  }, {
      start: 43488,
      length: 5,
      convRule: rule14
  }, {
      start: 43493,
      length: 1,
      convRule: rule92
  }, {
      start: 43494,
      length: 1,
      convRule: rule91
  }, {
      start: 43495,
      length: 9,
      convRule: rule14
  }, {
      start: 43504,
      length: 10,
      convRule: rule8
  }, {
      start: 43514,
      length: 5,
      convRule: rule14
  }, {
      start: 43520,
      length: 41,
      convRule: rule14
  }, {
      start: 43561,
      length: 6,
      convRule: rule92
  }, {
      start: 43567,
      length: 2,
      convRule: rule124
  }, {
      start: 43569,
      length: 2,
      convRule: rule92
  }, {
      start: 43571,
      length: 2,
      convRule: rule124
  }, {
      start: 43573,
      length: 2,
      convRule: rule92
  }, {
      start: 43584,
      length: 3,
      convRule: rule14
  }, {
      start: 43587,
      length: 1,
      convRule: rule92
  }, {
      start: 43588,
      length: 8,
      convRule: rule14
  }, {
      start: 43596,
      length: 1,
      convRule: rule92
  }, {
      start: 43597,
      length: 1,
      convRule: rule124
  }, {
      start: 43600,
      length: 10,
      convRule: rule8
  }, {
      start: 43612,
      length: 4,
      convRule: rule2
  }, {
      start: 43616,
      length: 16,
      convRule: rule14
  }, {
      start: 43632,
      length: 1,
      convRule: rule91
  }, {
      start: 43633,
      length: 6,
      convRule: rule14
  }, {
      start: 43639,
      length: 3,
      convRule: rule13
  }, {
      start: 43642,
      length: 1,
      convRule: rule14
  }, {
      start: 43643,
      length: 1,
      convRule: rule124
  }, {
      start: 43644,
      length: 1,
      convRule: rule92
  }, {
      start: 43645,
      length: 1,
      convRule: rule124
  }, {
      start: 43646,
      length: 50,
      convRule: rule14
  }, {
      start: 43696,
      length: 1,
      convRule: rule92
  }, {
      start: 43697,
      length: 1,
      convRule: rule14
  }, {
      start: 43698,
      length: 3,
      convRule: rule92
  }, {
      start: 43701,
      length: 2,
      convRule: rule14
  }, {
      start: 43703,
      length: 2,
      convRule: rule92
  }, {
      start: 43705,
      length: 5,
      convRule: rule14
  }, {
      start: 43710,
      length: 2,
      convRule: rule92
  }, {
      start: 43712,
      length: 1,
      convRule: rule14
  }, {
      start: 43713,
      length: 1,
      convRule: rule92
  }, {
      start: 43714,
      length: 1,
      convRule: rule14
  }, {
      start: 43739,
      length: 2,
      convRule: rule14
  }, {
      start: 43741,
      length: 1,
      convRule: rule91
  }, {
      start: 43742,
      length: 2,
      convRule: rule2
  }, {
      start: 43744,
      length: 11,
      convRule: rule14
  }, {
      start: 43755,
      length: 1,
      convRule: rule124
  }, {
      start: 43756,
      length: 2,
      convRule: rule92
  }, {
      start: 43758,
      length: 2,
      convRule: rule124
  }, {
      start: 43760,
      length: 2,
      convRule: rule2
  }, {
      start: 43762,
      length: 1,
      convRule: rule14
  }, {
      start: 43763,
      length: 2,
      convRule: rule91
  }, {
      start: 43765,
      length: 1,
      convRule: rule124
  }, {
      start: 43766,
      length: 1,
      convRule: rule92
  }, {
      start: 43777,
      length: 6,
      convRule: rule14
  }, {
      start: 43785,
      length: 6,
      convRule: rule14
  }, {
      start: 43793,
      length: 6,
      convRule: rule14
  }, {
      start: 43808,
      length: 7,
      convRule: rule14
  }, {
      start: 43816,
      length: 7,
      convRule: rule14
  }, {
      start: 43824,
      length: 35,
      convRule: rule20
  }, {
      start: 43859,
      length: 1,
      convRule: rule197
  }, {
      start: 43860,
      length: 7,
      convRule: rule20
  }, {
      start: 43867,
      length: 1,
      convRule: rule10
  }, {
      start: 43868,
      length: 4,
      convRule: rule91
  }, {
      start: 43872,
      length: 9,
      convRule: rule20
  }, {
      start: 43881,
      length: 1,
      convRule: rule91
  }, {
      start: 43882,
      length: 2,
      convRule: rule10
  }, {
      start: 43888,
      length: 80,
      convRule: rule198
  }, {
      start: 43968,
      length: 35,
      convRule: rule14
  }, {
      start: 44003,
      length: 2,
      convRule: rule124
  }, {
      start: 44005,
      length: 1,
      convRule: rule92
  }, {
      start: 44006,
      length: 2,
      convRule: rule124
  }, {
      start: 44008,
      length: 1,
      convRule: rule92
  }, {
      start: 44009,
      length: 2,
      convRule: rule124
  }, {
      start: 44011,
      length: 1,
      convRule: rule2
  }, {
      start: 44012,
      length: 1,
      convRule: rule124
  }, {
      start: 44013,
      length: 1,
      convRule: rule92
  }, {
      start: 44016,
      length: 10,
      convRule: rule8
  }, {
      start: 44032,
      length: 11172,
      convRule: rule14
  }, {
      start: 55216,
      length: 23,
      convRule: rule14
  }, {
      start: 55243,
      length: 49,
      convRule: rule14
  }, {
      start: 55296,
      length: 896,
      convRule: rule199
  }, {
      start: 56192,
      length: 128,
      convRule: rule199
  }, {
      start: 56320,
      length: 1024,
      convRule: rule199
  }, {
      start: 57344,
      length: 6400,
      convRule: rule200
  }, {
      start: 63744,
      length: 366,
      convRule: rule14
  }, {
      start: 64112,
      length: 106,
      convRule: rule14
  }, {
      start: 64256,
      length: 7,
      convRule: rule20
  }, {
      start: 64275,
      length: 5,
      convRule: rule20
  }, {
      start: 64285,
      length: 1,
      convRule: rule14
  }, {
      start: 64286,
      length: 1,
      convRule: rule92
  }, {
      start: 64287,
      length: 10,
      convRule: rule14
  }, {
      start: 64297,
      length: 1,
      convRule: rule6
  }, {
      start: 64298,
      length: 13,
      convRule: rule14
  }, {
      start: 64312,
      length: 5,
      convRule: rule14
  }, {
      start: 64318,
      length: 1,
      convRule: rule14
  }, {
      start: 64320,
      length: 2,
      convRule: rule14
  }, {
      start: 64323,
      length: 2,
      convRule: rule14
  }, {
      start: 64326,
      length: 108,
      convRule: rule14
  }, {
      start: 64434,
      length: 16,
      convRule: rule10
  }, {
      start: 64467,
      length: 363,
      convRule: rule14
  }, {
      start: 64830,
      length: 1,
      convRule: rule5
  }, {
      start: 64831,
      length: 1,
      convRule: rule4
  }, {
      start: 64848,
      length: 64,
      convRule: rule14
  }, {
      start: 64914,
      length: 54,
      convRule: rule14
  }, {
      start: 65008,
      length: 12,
      convRule: rule14
  }, {
      start: 65020,
      length: 1,
      convRule: rule3
  }, {
      start: 65021,
      length: 1,
      convRule: rule13
  }, {
      start: 65024,
      length: 16,
      convRule: rule92
  }, {
      start: 65040,
      length: 7,
      convRule: rule2
  }, {
      start: 65047,
      length: 1,
      convRule: rule4
  }, {
      start: 65048,
      length: 1,
      convRule: rule5
  }, {
      start: 65049,
      length: 1,
      convRule: rule2
  }, {
      start: 65056,
      length: 16,
      convRule: rule92
  }, {
      start: 65072,
      length: 1,
      convRule: rule2
  }, {
      start: 65073,
      length: 2,
      convRule: rule7
  }, {
      start: 65075,
      length: 2,
      convRule: rule11
  }, {
      start: 65077,
      length: 1,
      convRule: rule4
  }, {
      start: 65078,
      length: 1,
      convRule: rule5
  }, {
      start: 65079,
      length: 1,
      convRule: rule4
  }, {
      start: 65080,
      length: 1,
      convRule: rule5
  }, {
      start: 65081,
      length: 1,
      convRule: rule4
  }, {
      start: 65082,
      length: 1,
      convRule: rule5
  }, {
      start: 65083,
      length: 1,
      convRule: rule4
  }, {
      start: 65084,
      length: 1,
      convRule: rule5
  }, {
      start: 65085,
      length: 1,
      convRule: rule4
  }, {
      start: 65086,
      length: 1,
      convRule: rule5
  }, {
      start: 65087,
      length: 1,
      convRule: rule4
  }, {
      start: 65088,
      length: 1,
      convRule: rule5
  }, {
      start: 65089,
      length: 1,
      convRule: rule4
  }, {
      start: 65090,
      length: 1,
      convRule: rule5
  }, {
      start: 65091,
      length: 1,
      convRule: rule4
  }, {
      start: 65092,
      length: 1,
      convRule: rule5
  }, {
      start: 65093,
      length: 2,
      convRule: rule2
  }, {
      start: 65095,
      length: 1,
      convRule: rule4
  }, {
      start: 65096,
      length: 1,
      convRule: rule5
  }, {
      start: 65097,
      length: 4,
      convRule: rule2
  }, {
      start: 65101,
      length: 3,
      convRule: rule11
  }, {
      start: 65104,
      length: 3,
      convRule: rule2
  }, {
      start: 65108,
      length: 4,
      convRule: rule2
  }, {
      start: 65112,
      length: 1,
      convRule: rule7
  }, {
      start: 65113,
      length: 1,
      convRule: rule4
  }, {
      start: 65114,
      length: 1,
      convRule: rule5
  }, {
      start: 65115,
      length: 1,
      convRule: rule4
  }, {
      start: 65116,
      length: 1,
      convRule: rule5
  }, {
      start: 65117,
      length: 1,
      convRule: rule4
  }, {
      start: 65118,
      length: 1,
      convRule: rule5
  }, {
      start: 65119,
      length: 3,
      convRule: rule2
  }, {
      start: 65122,
      length: 1,
      convRule: rule6
  }, {
      start: 65123,
      length: 1,
      convRule: rule7
  }, {
      start: 65124,
      length: 3,
      convRule: rule6
  }, {
      start: 65128,
      length: 1,
      convRule: rule2
  }, {
      start: 65129,
      length: 1,
      convRule: rule3
  }, {
      start: 65130,
      length: 2,
      convRule: rule2
  }, {
      start: 65136,
      length: 5,
      convRule: rule14
  }, {
      start: 65142,
      length: 135,
      convRule: rule14
  }, {
      start: 65279,
      length: 1,
      convRule: rule16
  }, {
      start: 65281,
      length: 3,
      convRule: rule2
  }, {
      start: 65284,
      length: 1,
      convRule: rule3
  }, {
      start: 65285,
      length: 3,
      convRule: rule2
  }, {
      start: 65288,
      length: 1,
      convRule: rule4
  }, {
      start: 65289,
      length: 1,
      convRule: rule5
  }, {
      start: 65290,
      length: 1,
      convRule: rule2
  }, {
      start: 65291,
      length: 1,
      convRule: rule6
  }, {
      start: 65292,
      length: 1,
      convRule: rule2
  }, {
      start: 65293,
      length: 1,
      convRule: rule7
  }, {
      start: 65294,
      length: 2,
      convRule: rule2
  }, {
      start: 65296,
      length: 10,
      convRule: rule8
  }, {
      start: 65306,
      length: 2,
      convRule: rule2
  }, {
      start: 65308,
      length: 3,
      convRule: rule6
  }, {
      start: 65311,
      length: 2,
      convRule: rule2
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65339,
      length: 1,
      convRule: rule4
  }, {
      start: 65340,
      length: 1,
      convRule: rule2
  }, {
      start: 65341,
      length: 1,
      convRule: rule5
  }, {
      start: 65342,
      length: 1,
      convRule: rule10
  }, {
      start: 65343,
      length: 1,
      convRule: rule11
  }, {
      start: 65344,
      length: 1,
      convRule: rule10
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 65371,
      length: 1,
      convRule: rule4
  }, {
      start: 65372,
      length: 1,
      convRule: rule6
  }, {
      start: 65373,
      length: 1,
      convRule: rule5
  }, {
      start: 65374,
      length: 1,
      convRule: rule6
  }, {
      start: 65375,
      length: 1,
      convRule: rule4
  }, {
      start: 65376,
      length: 1,
      convRule: rule5
  }, {
      start: 65377,
      length: 1,
      convRule: rule2
  }, {
      start: 65378,
      length: 1,
      convRule: rule4
  }, {
      start: 65379,
      length: 1,
      convRule: rule5
  }, {
      start: 65380,
      length: 2,
      convRule: rule2
  }, {
      start: 65382,
      length: 10,
      convRule: rule14
  }, {
      start: 65392,
      length: 1,
      convRule: rule91
  }, {
      start: 65393,
      length: 45,
      convRule: rule14
  }, {
      start: 65438,
      length: 2,
      convRule: rule91
  }, {
      start: 65440,
      length: 31,
      convRule: rule14
  }, {
      start: 65474,
      length: 6,
      convRule: rule14
  }, {
      start: 65482,
      length: 6,
      convRule: rule14
  }, {
      start: 65490,
      length: 6,
      convRule: rule14
  }, {
      start: 65498,
      length: 3,
      convRule: rule14
  }, {
      start: 65504,
      length: 2,
      convRule: rule3
  }, {
      start: 65506,
      length: 1,
      convRule: rule6
  }, {
      start: 65507,
      length: 1,
      convRule: rule10
  }, {
      start: 65508,
      length: 1,
      convRule: rule13
  }, {
      start: 65509,
      length: 2,
      convRule: rule3
  }, {
      start: 65512,
      length: 1,
      convRule: rule13
  }, {
      start: 65513,
      length: 4,
      convRule: rule6
  }, {
      start: 65517,
      length: 2,
      convRule: rule13
  }, {
      start: 65529,
      length: 3,
      convRule: rule16
  }, {
      start: 65532,
      length: 2,
      convRule: rule13
  }, {
      start: 65536,
      length: 12,
      convRule: rule14
  }, {
      start: 65549,
      length: 26,
      convRule: rule14
  }, {
      start: 65576,
      length: 19,
      convRule: rule14
  }, {
      start: 65596,
      length: 2,
      convRule: rule14
  }, {
      start: 65599,
      length: 15,
      convRule: rule14
  }, {
      start: 65616,
      length: 14,
      convRule: rule14
  }, {
      start: 65664,
      length: 123,
      convRule: rule14
  }, {
      start: 65792,
      length: 3,
      convRule: rule2
  }, {
      start: 65799,
      length: 45,
      convRule: rule17
  }, {
      start: 65847,
      length: 9,
      convRule: rule13
  }, {
      start: 65856,
      length: 53,
      convRule: rule128
  }, {
      start: 65909,
      length: 4,
      convRule: rule17
  }, {
      start: 65913,
      length: 17,
      convRule: rule13
  }, {
      start: 65930,
      length: 2,
      convRule: rule17
  }, {
      start: 65932,
      length: 3,
      convRule: rule13
  }, {
      start: 65936,
      length: 13,
      convRule: rule13
  }, {
      start: 65952,
      length: 1,
      convRule: rule13
  }, {
      start: 66000,
      length: 45,
      convRule: rule13
  }, {
      start: 66045,
      length: 1,
      convRule: rule92
  }, {
      start: 66176,
      length: 29,
      convRule: rule14
  }, {
      start: 66208,
      length: 49,
      convRule: rule14
  }, {
      start: 66272,
      length: 1,
      convRule: rule92
  }, {
      start: 66273,
      length: 27,
      convRule: rule17
  }, {
      start: 66304,
      length: 32,
      convRule: rule14
  }, {
      start: 66336,
      length: 4,
      convRule: rule17
  }, {
      start: 66349,
      length: 20,
      convRule: rule14
  }, {
      start: 66369,
      length: 1,
      convRule: rule128
  }, {
      start: 66370,
      length: 8,
      convRule: rule14
  }, {
      start: 66378,
      length: 1,
      convRule: rule128
  }, {
      start: 66384,
      length: 38,
      convRule: rule14
  }, {
      start: 66422,
      length: 5,
      convRule: rule92
  }, {
      start: 66432,
      length: 30,
      convRule: rule14
  }, {
      start: 66463,
      length: 1,
      convRule: rule2
  }, {
      start: 66464,
      length: 36,
      convRule: rule14
  }, {
      start: 66504,
      length: 8,
      convRule: rule14
  }, {
      start: 66512,
      length: 1,
      convRule: rule2
  }, {
      start: 66513,
      length: 5,
      convRule: rule128
  }, {
      start: 66560,
      length: 40,
      convRule: rule201
  }, {
      start: 66600,
      length: 40,
      convRule: rule202
  }, {
      start: 66640,
      length: 78,
      convRule: rule14
  }, {
      start: 66720,
      length: 10,
      convRule: rule8
  }, {
      start: 66736,
      length: 36,
      convRule: rule201
  }, {
      start: 66776,
      length: 36,
      convRule: rule202
  }, {
      start: 66816,
      length: 40,
      convRule: rule14
  }, {
      start: 66864,
      length: 52,
      convRule: rule14
  }, {
      start: 66927,
      length: 1,
      convRule: rule2
  }, {
      start: 67072,
      length: 311,
      convRule: rule14
  }, {
      start: 67392,
      length: 22,
      convRule: rule14
  }, {
      start: 67424,
      length: 8,
      convRule: rule14
  }, {
      start: 67584,
      length: 6,
      convRule: rule14
  }, {
      start: 67592,
      length: 1,
      convRule: rule14
  }, {
      start: 67594,
      length: 44,
      convRule: rule14
  }, {
      start: 67639,
      length: 2,
      convRule: rule14
  }, {
      start: 67644,
      length: 1,
      convRule: rule14
  }, {
      start: 67647,
      length: 23,
      convRule: rule14
  }, {
      start: 67671,
      length: 1,
      convRule: rule2
  }, {
      start: 67672,
      length: 8,
      convRule: rule17
  }, {
      start: 67680,
      length: 23,
      convRule: rule14
  }, {
      start: 67703,
      length: 2,
      convRule: rule13
  }, {
      start: 67705,
      length: 7,
      convRule: rule17
  }, {
      start: 67712,
      length: 31,
      convRule: rule14
  }, {
      start: 67751,
      length: 9,
      convRule: rule17
  }, {
      start: 67808,
      length: 19,
      convRule: rule14
  }, {
      start: 67828,
      length: 2,
      convRule: rule14
  }, {
      start: 67835,
      length: 5,
      convRule: rule17
  }, {
      start: 67840,
      length: 22,
      convRule: rule14
  }, {
      start: 67862,
      length: 6,
      convRule: rule17
  }, {
      start: 67871,
      length: 1,
      convRule: rule2
  }, {
      start: 67872,
      length: 26,
      convRule: rule14
  }, {
      start: 67903,
      length: 1,
      convRule: rule2
  }, {
      start: 67968,
      length: 56,
      convRule: rule14
  }, {
      start: 68028,
      length: 2,
      convRule: rule17
  }, {
      start: 68030,
      length: 2,
      convRule: rule14
  }, {
      start: 68032,
      length: 16,
      convRule: rule17
  }, {
      start: 68050,
      length: 46,
      convRule: rule17
  }, {
      start: 68096,
      length: 1,
      convRule: rule14
  }, {
      start: 68097,
      length: 3,
      convRule: rule92
  }, {
      start: 68101,
      length: 2,
      convRule: rule92
  }, {
      start: 68108,
      length: 4,
      convRule: rule92
  }, {
      start: 68112,
      length: 4,
      convRule: rule14
  }, {
      start: 68117,
      length: 3,
      convRule: rule14
  }, {
      start: 68121,
      length: 29,
      convRule: rule14
  }, {
      start: 68152,
      length: 3,
      convRule: rule92
  }, {
      start: 68159,
      length: 1,
      convRule: rule92
  }, {
      start: 68160,
      length: 9,
      convRule: rule17
  }, {
      start: 68176,
      length: 9,
      convRule: rule2
  }, {
      start: 68192,
      length: 29,
      convRule: rule14
  }, {
      start: 68221,
      length: 2,
      convRule: rule17
  }, {
      start: 68223,
      length: 1,
      convRule: rule2
  }, {
      start: 68224,
      length: 29,
      convRule: rule14
  }, {
      start: 68253,
      length: 3,
      convRule: rule17
  }, {
      start: 68288,
      length: 8,
      convRule: rule14
  }, {
      start: 68296,
      length: 1,
      convRule: rule13
  }, {
      start: 68297,
      length: 28,
      convRule: rule14
  }, {
      start: 68325,
      length: 2,
      convRule: rule92
  }, {
      start: 68331,
      length: 5,
      convRule: rule17
  }, {
      start: 68336,
      length: 7,
      convRule: rule2
  }, {
      start: 68352,
      length: 54,
      convRule: rule14
  }, {
      start: 68409,
      length: 7,
      convRule: rule2
  }, {
      start: 68416,
      length: 22,
      convRule: rule14
  }, {
      start: 68440,
      length: 8,
      convRule: rule17
  }, {
      start: 68448,
      length: 19,
      convRule: rule14
  }, {
      start: 68472,
      length: 8,
      convRule: rule17
  }, {
      start: 68480,
      length: 18,
      convRule: rule14
  }, {
      start: 68505,
      length: 4,
      convRule: rule2
  }, {
      start: 68521,
      length: 7,
      convRule: rule17
  }, {
      start: 68608,
      length: 73,
      convRule: rule14
  }, {
      start: 68736,
      length: 51,
      convRule: rule97
  }, {
      start: 68800,
      length: 51,
      convRule: rule102
  }, {
      start: 68858,
      length: 6,
      convRule: rule17
  }, {
      start: 68864,
      length: 36,
      convRule: rule14
  }, {
      start: 68900,
      length: 4,
      convRule: rule92
  }, {
      start: 68912,
      length: 10,
      convRule: rule8
  }, {
      start: 69216,
      length: 31,
      convRule: rule17
  }, {
      start: 69248,
      length: 42,
      convRule: rule14
  }, {
      start: 69291,
      length: 2,
      convRule: rule92
  }, {
      start: 69293,
      length: 1,
      convRule: rule7
  }, {
      start: 69296,
      length: 2,
      convRule: rule14
  }, {
      start: 69376,
      length: 29,
      convRule: rule14
  }, {
      start: 69405,
      length: 10,
      convRule: rule17
  }, {
      start: 69415,
      length: 1,
      convRule: rule14
  }, {
      start: 69424,
      length: 22,
      convRule: rule14
  }, {
      start: 69446,
      length: 11,
      convRule: rule92
  }, {
      start: 69457,
      length: 4,
      convRule: rule17
  }, {
      start: 69461,
      length: 5,
      convRule: rule2
  }, {
      start: 69552,
      length: 21,
      convRule: rule14
  }, {
      start: 69573,
      length: 7,
      convRule: rule17
  }, {
      start: 69600,
      length: 23,
      convRule: rule14
  }, {
      start: 69632,
      length: 1,
      convRule: rule124
  }, {
      start: 69633,
      length: 1,
      convRule: rule92
  }, {
      start: 69634,
      length: 1,
      convRule: rule124
  }, {
      start: 69635,
      length: 53,
      convRule: rule14
  }, {
      start: 69688,
      length: 15,
      convRule: rule92
  }, {
      start: 69703,
      length: 7,
      convRule: rule2
  }, {
      start: 69714,
      length: 20,
      convRule: rule17
  }, {
      start: 69734,
      length: 10,
      convRule: rule8
  }, {
      start: 69759,
      length: 3,
      convRule: rule92
  }, {
      start: 69762,
      length: 1,
      convRule: rule124
  }, {
      start: 69763,
      length: 45,
      convRule: rule14
  }, {
      start: 69808,
      length: 3,
      convRule: rule124
  }, {
      start: 69811,
      length: 4,
      convRule: rule92
  }, {
      start: 69815,
      length: 2,
      convRule: rule124
  }, {
      start: 69817,
      length: 2,
      convRule: rule92
  }, {
      start: 69819,
      length: 2,
      convRule: rule2
  }, {
      start: 69821,
      length: 1,
      convRule: rule16
  }, {
      start: 69822,
      length: 4,
      convRule: rule2
  }, {
      start: 69837,
      length: 1,
      convRule: rule16
  }, {
      start: 69840,
      length: 25,
      convRule: rule14
  }, {
      start: 69872,
      length: 10,
      convRule: rule8
  }, {
      start: 69888,
      length: 3,
      convRule: rule92
  }, {
      start: 69891,
      length: 36,
      convRule: rule14
  }, {
      start: 69927,
      length: 5,
      convRule: rule92
  }, {
      start: 69932,
      length: 1,
      convRule: rule124
  }, {
      start: 69933,
      length: 8,
      convRule: rule92
  }, {
      start: 69942,
      length: 10,
      convRule: rule8
  }, {
      start: 69952,
      length: 4,
      convRule: rule2
  }, {
      start: 69956,
      length: 1,
      convRule: rule14
  }, {
      start: 69957,
      length: 2,
      convRule: rule124
  }, {
      start: 69959,
      length: 1,
      convRule: rule14
  }, {
      start: 69968,
      length: 35,
      convRule: rule14
  }, {
      start: 70003,
      length: 1,
      convRule: rule92
  }, {
      start: 70004,
      length: 2,
      convRule: rule2
  }, {
      start: 70006,
      length: 1,
      convRule: rule14
  }, {
      start: 70016,
      length: 2,
      convRule: rule92
  }, {
      start: 70018,
      length: 1,
      convRule: rule124
  }, {
      start: 70019,
      length: 48,
      convRule: rule14
  }, {
      start: 70067,
      length: 3,
      convRule: rule124
  }, {
      start: 70070,
      length: 9,
      convRule: rule92
  }, {
      start: 70079,
      length: 2,
      convRule: rule124
  }, {
      start: 70081,
      length: 4,
      convRule: rule14
  }, {
      start: 70085,
      length: 4,
      convRule: rule2
  }, {
      start: 70089,
      length: 4,
      convRule: rule92
  }, {
      start: 70093,
      length: 1,
      convRule: rule2
  }, {
      start: 70094,
      length: 1,
      convRule: rule124
  }, {
      start: 70095,
      length: 1,
      convRule: rule92
  }, {
      start: 70096,
      length: 10,
      convRule: rule8
  }, {
      start: 70106,
      length: 1,
      convRule: rule14
  }, {
      start: 70107,
      length: 1,
      convRule: rule2
  }, {
      start: 70108,
      length: 1,
      convRule: rule14
  }, {
      start: 70109,
      length: 3,
      convRule: rule2
  }, {
      start: 70113,
      length: 20,
      convRule: rule17
  }, {
      start: 70144,
      length: 18,
      convRule: rule14
  }, {
      start: 70163,
      length: 25,
      convRule: rule14
  }, {
      start: 70188,
      length: 3,
      convRule: rule124
  }, {
      start: 70191,
      length: 3,
      convRule: rule92
  }, {
      start: 70194,
      length: 2,
      convRule: rule124
  }, {
      start: 70196,
      length: 1,
      convRule: rule92
  }, {
      start: 70197,
      length: 1,
      convRule: rule124
  }, {
      start: 70198,
      length: 2,
      convRule: rule92
  }, {
      start: 70200,
      length: 6,
      convRule: rule2
  }, {
      start: 70206,
      length: 1,
      convRule: rule92
  }, {
      start: 70272,
      length: 7,
      convRule: rule14
  }, {
      start: 70280,
      length: 1,
      convRule: rule14
  }, {
      start: 70282,
      length: 4,
      convRule: rule14
  }, {
      start: 70287,
      length: 15,
      convRule: rule14
  }, {
      start: 70303,
      length: 10,
      convRule: rule14
  }, {
      start: 70313,
      length: 1,
      convRule: rule2
  }, {
      start: 70320,
      length: 47,
      convRule: rule14
  }, {
      start: 70367,
      length: 1,
      convRule: rule92
  }, {
      start: 70368,
      length: 3,
      convRule: rule124
  }, {
      start: 70371,
      length: 8,
      convRule: rule92
  }, {
      start: 70384,
      length: 10,
      convRule: rule8
  }, {
      start: 70400,
      length: 2,
      convRule: rule92
  }, {
      start: 70402,
      length: 2,
      convRule: rule124
  }, {
      start: 70405,
      length: 8,
      convRule: rule14
  }, {
      start: 70415,
      length: 2,
      convRule: rule14
  }, {
      start: 70419,
      length: 22,
      convRule: rule14
  }, {
      start: 70442,
      length: 7,
      convRule: rule14
  }, {
      start: 70450,
      length: 2,
      convRule: rule14
  }, {
      start: 70453,
      length: 5,
      convRule: rule14
  }, {
      start: 70459,
      length: 2,
      convRule: rule92
  }, {
      start: 70461,
      length: 1,
      convRule: rule14
  }, {
      start: 70462,
      length: 2,
      convRule: rule124
  }, {
      start: 70464,
      length: 1,
      convRule: rule92
  }, {
      start: 70465,
      length: 4,
      convRule: rule124
  }, {
      start: 70471,
      length: 2,
      convRule: rule124
  }, {
      start: 70475,
      length: 3,
      convRule: rule124
  }, {
      start: 70480,
      length: 1,
      convRule: rule14
  }, {
      start: 70487,
      length: 1,
      convRule: rule124
  }, {
      start: 70493,
      length: 5,
      convRule: rule14
  }, {
      start: 70498,
      length: 2,
      convRule: rule124
  }, {
      start: 70502,
      length: 7,
      convRule: rule92
  }, {
      start: 70512,
      length: 5,
      convRule: rule92
  }, {
      start: 70656,
      length: 53,
      convRule: rule14
  }, {
      start: 70709,
      length: 3,
      convRule: rule124
  }, {
      start: 70712,
      length: 8,
      convRule: rule92
  }, {
      start: 70720,
      length: 2,
      convRule: rule124
  }, {
      start: 70722,
      length: 3,
      convRule: rule92
  }, {
      start: 70725,
      length: 1,
      convRule: rule124
  }, {
      start: 70726,
      length: 1,
      convRule: rule92
  }, {
      start: 70727,
      length: 4,
      convRule: rule14
  }, {
      start: 70731,
      length: 5,
      convRule: rule2
  }, {
      start: 70736,
      length: 10,
      convRule: rule8
  }, {
      start: 70746,
      length: 2,
      convRule: rule2
  }, {
      start: 70749,
      length: 1,
      convRule: rule2
  }, {
      start: 70750,
      length: 1,
      convRule: rule92
  }, {
      start: 70751,
      length: 3,
      convRule: rule14
  }, {
      start: 70784,
      length: 48,
      convRule: rule14
  }, {
      start: 70832,
      length: 3,
      convRule: rule124
  }, {
      start: 70835,
      length: 6,
      convRule: rule92
  }, {
      start: 70841,
      length: 1,
      convRule: rule124
  }, {
      start: 70842,
      length: 1,
      convRule: rule92
  }, {
      start: 70843,
      length: 4,
      convRule: rule124
  }, {
      start: 70847,
      length: 2,
      convRule: rule92
  }, {
      start: 70849,
      length: 1,
      convRule: rule124
  }, {
      start: 70850,
      length: 2,
      convRule: rule92
  }, {
      start: 70852,
      length: 2,
      convRule: rule14
  }, {
      start: 70854,
      length: 1,
      convRule: rule2
  }, {
      start: 70855,
      length: 1,
      convRule: rule14
  }, {
      start: 70864,
      length: 10,
      convRule: rule8
  }, {
      start: 71040,
      length: 47,
      convRule: rule14
  }, {
      start: 71087,
      length: 3,
      convRule: rule124
  }, {
      start: 71090,
      length: 4,
      convRule: rule92
  }, {
      start: 71096,
      length: 4,
      convRule: rule124
  }, {
      start: 71100,
      length: 2,
      convRule: rule92
  }, {
      start: 71102,
      length: 1,
      convRule: rule124
  }, {
      start: 71103,
      length: 2,
      convRule: rule92
  }, {
      start: 71105,
      length: 23,
      convRule: rule2
  }, {
      start: 71128,
      length: 4,
      convRule: rule14
  }, {
      start: 71132,
      length: 2,
      convRule: rule92
  }, {
      start: 71168,
      length: 48,
      convRule: rule14
  }, {
      start: 71216,
      length: 3,
      convRule: rule124
  }, {
      start: 71219,
      length: 8,
      convRule: rule92
  }, {
      start: 71227,
      length: 2,
      convRule: rule124
  }, {
      start: 71229,
      length: 1,
      convRule: rule92
  }, {
      start: 71230,
      length: 1,
      convRule: rule124
  }, {
      start: 71231,
      length: 2,
      convRule: rule92
  }, {
      start: 71233,
      length: 3,
      convRule: rule2
  }, {
      start: 71236,
      length: 1,
      convRule: rule14
  }, {
      start: 71248,
      length: 10,
      convRule: rule8
  }, {
      start: 71264,
      length: 13,
      convRule: rule2
  }, {
      start: 71296,
      length: 43,
      convRule: rule14
  }, {
      start: 71339,
      length: 1,
      convRule: rule92
  }, {
      start: 71340,
      length: 1,
      convRule: rule124
  }, {
      start: 71341,
      length: 1,
      convRule: rule92
  }, {
      start: 71342,
      length: 2,
      convRule: rule124
  }, {
      start: 71344,
      length: 6,
      convRule: rule92
  }, {
      start: 71350,
      length: 1,
      convRule: rule124
  }, {
      start: 71351,
      length: 1,
      convRule: rule92
  }, {
      start: 71352,
      length: 1,
      convRule: rule14
  }, {
      start: 71360,
      length: 10,
      convRule: rule8
  }, {
      start: 71424,
      length: 27,
      convRule: rule14
  }, {
      start: 71453,
      length: 3,
      convRule: rule92
  }, {
      start: 71456,
      length: 2,
      convRule: rule124
  }, {
      start: 71458,
      length: 4,
      convRule: rule92
  }, {
      start: 71462,
      length: 1,
      convRule: rule124
  }, {
      start: 71463,
      length: 5,
      convRule: rule92
  }, {
      start: 71472,
      length: 10,
      convRule: rule8
  }, {
      start: 71482,
      length: 2,
      convRule: rule17
  }, {
      start: 71484,
      length: 3,
      convRule: rule2
  }, {
      start: 71487,
      length: 1,
      convRule: rule13
  }, {
      start: 71680,
      length: 44,
      convRule: rule14
  }, {
      start: 71724,
      length: 3,
      convRule: rule124
  }, {
      start: 71727,
      length: 9,
      convRule: rule92
  }, {
      start: 71736,
      length: 1,
      convRule: rule124
  }, {
      start: 71737,
      length: 2,
      convRule: rule92
  }, {
      start: 71739,
      length: 1,
      convRule: rule2
  }, {
      start: 71840,
      length: 32,
      convRule: rule9
  }, {
      start: 71872,
      length: 32,
      convRule: rule12
  }, {
      start: 71904,
      length: 10,
      convRule: rule8
  }, {
      start: 71914,
      length: 9,
      convRule: rule17
  }, {
      start: 71935,
      length: 8,
      convRule: rule14
  }, {
      start: 71945,
      length: 1,
      convRule: rule14
  }, {
      start: 71948,
      length: 8,
      convRule: rule14
  }, {
      start: 71957,
      length: 2,
      convRule: rule14
  }, {
      start: 71960,
      length: 24,
      convRule: rule14
  }, {
      start: 71984,
      length: 6,
      convRule: rule124
  }, {
      start: 71991,
      length: 2,
      convRule: rule124
  }, {
      start: 71995,
      length: 2,
      convRule: rule92
  }, {
      start: 71997,
      length: 1,
      convRule: rule124
  }, {
      start: 71998,
      length: 1,
      convRule: rule92
  }, {
      start: 71999,
      length: 1,
      convRule: rule14
  }, {
      start: 72000,
      length: 1,
      convRule: rule124
  }, {
      start: 72001,
      length: 1,
      convRule: rule14
  }, {
      start: 72002,
      length: 1,
      convRule: rule124
  }, {
      start: 72003,
      length: 1,
      convRule: rule92
  }, {
      start: 72004,
      length: 3,
      convRule: rule2
  }, {
      start: 72016,
      length: 10,
      convRule: rule8
  }, {
      start: 72096,
      length: 8,
      convRule: rule14
  }, {
      start: 72106,
      length: 39,
      convRule: rule14
  }, {
      start: 72145,
      length: 3,
      convRule: rule124
  }, {
      start: 72148,
      length: 4,
      convRule: rule92
  }, {
      start: 72154,
      length: 2,
      convRule: rule92
  }, {
      start: 72156,
      length: 4,
      convRule: rule124
  }, {
      start: 72160,
      length: 1,
      convRule: rule92
  }, {
      start: 72161,
      length: 1,
      convRule: rule14
  }, {
      start: 72162,
      length: 1,
      convRule: rule2
  }, {
      start: 72163,
      length: 1,
      convRule: rule14
  }, {
      start: 72164,
      length: 1,
      convRule: rule124
  }, {
      start: 72192,
      length: 1,
      convRule: rule14
  }, {
      start: 72193,
      length: 10,
      convRule: rule92
  }, {
      start: 72203,
      length: 40,
      convRule: rule14
  }, {
      start: 72243,
      length: 6,
      convRule: rule92
  }, {
      start: 72249,
      length: 1,
      convRule: rule124
  }, {
      start: 72250,
      length: 1,
      convRule: rule14
  }, {
      start: 72251,
      length: 4,
      convRule: rule92
  }, {
      start: 72255,
      length: 8,
      convRule: rule2
  }, {
      start: 72263,
      length: 1,
      convRule: rule92
  }, {
      start: 72272,
      length: 1,
      convRule: rule14
  }, {
      start: 72273,
      length: 6,
      convRule: rule92
  }, {
      start: 72279,
      length: 2,
      convRule: rule124
  }, {
      start: 72281,
      length: 3,
      convRule: rule92
  }, {
      start: 72284,
      length: 46,
      convRule: rule14
  }, {
      start: 72330,
      length: 13,
      convRule: rule92
  }, {
      start: 72343,
      length: 1,
      convRule: rule124
  }, {
      start: 72344,
      length: 2,
      convRule: rule92
  }, {
      start: 72346,
      length: 3,
      convRule: rule2
  }, {
      start: 72349,
      length: 1,
      convRule: rule14
  }, {
      start: 72350,
      length: 5,
      convRule: rule2
  }, {
      start: 72384,
      length: 57,
      convRule: rule14
  }, {
      start: 72704,
      length: 9,
      convRule: rule14
  }, {
      start: 72714,
      length: 37,
      convRule: rule14
  }, {
      start: 72751,
      length: 1,
      convRule: rule124
  }, {
      start: 72752,
      length: 7,
      convRule: rule92
  }, {
      start: 72760,
      length: 6,
      convRule: rule92
  }, {
      start: 72766,
      length: 1,
      convRule: rule124
  }, {
      start: 72767,
      length: 1,
      convRule: rule92
  }, {
      start: 72768,
      length: 1,
      convRule: rule14
  }, {
      start: 72769,
      length: 5,
      convRule: rule2
  }, {
      start: 72784,
      length: 10,
      convRule: rule8
  }, {
      start: 72794,
      length: 19,
      convRule: rule17
  }, {
      start: 72816,
      length: 2,
      convRule: rule2
  }, {
      start: 72818,
      length: 30,
      convRule: rule14
  }, {
      start: 72850,
      length: 22,
      convRule: rule92
  }, {
      start: 72873,
      length: 1,
      convRule: rule124
  }, {
      start: 72874,
      length: 7,
      convRule: rule92
  }, {
      start: 72881,
      length: 1,
      convRule: rule124
  }, {
      start: 72882,
      length: 2,
      convRule: rule92
  }, {
      start: 72884,
      length: 1,
      convRule: rule124
  }, {
      start: 72885,
      length: 2,
      convRule: rule92
  }, {
      start: 72960,
      length: 7,
      convRule: rule14
  }, {
      start: 72968,
      length: 2,
      convRule: rule14
  }, {
      start: 72971,
      length: 38,
      convRule: rule14
  }, {
      start: 73009,
      length: 6,
      convRule: rule92
  }, {
      start: 73018,
      length: 1,
      convRule: rule92
  }, {
      start: 73020,
      length: 2,
      convRule: rule92
  }, {
      start: 73023,
      length: 7,
      convRule: rule92
  }, {
      start: 73030,
      length: 1,
      convRule: rule14
  }, {
      start: 73031,
      length: 1,
      convRule: rule92
  }, {
      start: 73040,
      length: 10,
      convRule: rule8
  }, {
      start: 73056,
      length: 6,
      convRule: rule14
  }, {
      start: 73063,
      length: 2,
      convRule: rule14
  }, {
      start: 73066,
      length: 32,
      convRule: rule14
  }, {
      start: 73098,
      length: 5,
      convRule: rule124
  }, {
      start: 73104,
      length: 2,
      convRule: rule92
  }, {
      start: 73107,
      length: 2,
      convRule: rule124
  }, {
      start: 73109,
      length: 1,
      convRule: rule92
  }, {
      start: 73110,
      length: 1,
      convRule: rule124
  }, {
      start: 73111,
      length: 1,
      convRule: rule92
  }, {
      start: 73112,
      length: 1,
      convRule: rule14
  }, {
      start: 73120,
      length: 10,
      convRule: rule8
  }, {
      start: 73440,
      length: 19,
      convRule: rule14
  }, {
      start: 73459,
      length: 2,
      convRule: rule92
  }, {
      start: 73461,
      length: 2,
      convRule: rule124
  }, {
      start: 73463,
      length: 2,
      convRule: rule2
  }, {
      start: 73648,
      length: 1,
      convRule: rule14
  }, {
      start: 73664,
      length: 21,
      convRule: rule17
  }, {
      start: 73685,
      length: 8,
      convRule: rule13
  }, {
      start: 73693,
      length: 4,
      convRule: rule3
  }, {
      start: 73697,
      length: 17,
      convRule: rule13
  }, {
      start: 73727,
      length: 1,
      convRule: rule2
  }, {
      start: 73728,
      length: 922,
      convRule: rule14
  }, {
      start: 74752,
      length: 111,
      convRule: rule128
  }, {
      start: 74864,
      length: 5,
      convRule: rule2
  }, {
      start: 74880,
      length: 196,
      convRule: rule14
  }, {
      start: 77824,
      length: 1071,
      convRule: rule14
  }, {
      start: 78896,
      length: 9,
      convRule: rule16
  }, {
      start: 82944,
      length: 583,
      convRule: rule14
  }, {
      start: 92160,
      length: 569,
      convRule: rule14
  }, {
      start: 92736,
      length: 31,
      convRule: rule14
  }, {
      start: 92768,
      length: 10,
      convRule: rule8
  }, {
      start: 92782,
      length: 2,
      convRule: rule2
  }, {
      start: 92880,
      length: 30,
      convRule: rule14
  }, {
      start: 92912,
      length: 5,
      convRule: rule92
  }, {
      start: 92917,
      length: 1,
      convRule: rule2
  }, {
      start: 92928,
      length: 48,
      convRule: rule14
  }, {
      start: 92976,
      length: 7,
      convRule: rule92
  }, {
      start: 92983,
      length: 5,
      convRule: rule2
  }, {
      start: 92988,
      length: 4,
      convRule: rule13
  }, {
      start: 92992,
      length: 4,
      convRule: rule91
  }, {
      start: 92996,
      length: 1,
      convRule: rule2
  }, {
      start: 92997,
      length: 1,
      convRule: rule13
  }, {
      start: 93008,
      length: 10,
      convRule: rule8
  }, {
      start: 93019,
      length: 7,
      convRule: rule17
  }, {
      start: 93027,
      length: 21,
      convRule: rule14
  }, {
      start: 93053,
      length: 19,
      convRule: rule14
  }, {
      start: 93760,
      length: 32,
      convRule: rule9
  }, {
      start: 93792,
      length: 32,
      convRule: rule12
  }, {
      start: 93824,
      length: 23,
      convRule: rule17
  }, {
      start: 93847,
      length: 4,
      convRule: rule2
  }, {
      start: 93952,
      length: 75,
      convRule: rule14
  }, {
      start: 94031,
      length: 1,
      convRule: rule92
  }, {
      start: 94032,
      length: 1,
      convRule: rule14
  }, {
      start: 94033,
      length: 55,
      convRule: rule124
  }, {
      start: 94095,
      length: 4,
      convRule: rule92
  }, {
      start: 94099,
      length: 13,
      convRule: rule91
  }, {
      start: 94176,
      length: 2,
      convRule: rule91
  }, {
      start: 94178,
      length: 1,
      convRule: rule2
  }, {
      start: 94179,
      length: 1,
      convRule: rule91
  }, {
      start: 94180,
      length: 1,
      convRule: rule92
  }, {
      start: 94192,
      length: 2,
      convRule: rule124
  }, {
      start: 94208,
      length: 6136,
      convRule: rule14
  }, {
      start: 100352,
      length: 1238,
      convRule: rule14
  }, {
      start: 101632,
      length: 9,
      convRule: rule14
  }, {
      start: 110592,
      length: 287,
      convRule: rule14
  }, {
      start: 110928,
      length: 3,
      convRule: rule14
  }, {
      start: 110948,
      length: 4,
      convRule: rule14
  }, {
      start: 110960,
      length: 396,
      convRule: rule14
  }, {
      start: 113664,
      length: 107,
      convRule: rule14
  }, {
      start: 113776,
      length: 13,
      convRule: rule14
  }, {
      start: 113792,
      length: 9,
      convRule: rule14
  }, {
      start: 113808,
      length: 10,
      convRule: rule14
  }, {
      start: 113820,
      length: 1,
      convRule: rule13
  }, {
      start: 113821,
      length: 2,
      convRule: rule92
  }, {
      start: 113823,
      length: 1,
      convRule: rule2
  }, {
      start: 113824,
      length: 4,
      convRule: rule16
  }, {
      start: 118784,
      length: 246,
      convRule: rule13
  }, {
      start: 119040,
      length: 39,
      convRule: rule13
  }, {
      start: 119081,
      length: 60,
      convRule: rule13
  }, {
      start: 119141,
      length: 2,
      convRule: rule124
  }, {
      start: 119143,
      length: 3,
      convRule: rule92
  }, {
      start: 119146,
      length: 3,
      convRule: rule13
  }, {
      start: 119149,
      length: 6,
      convRule: rule124
  }, {
      start: 119155,
      length: 8,
      convRule: rule16
  }, {
      start: 119163,
      length: 8,
      convRule: rule92
  }, {
      start: 119171,
      length: 2,
      convRule: rule13
  }, {
      start: 119173,
      length: 7,
      convRule: rule92
  }, {
      start: 119180,
      length: 30,
      convRule: rule13
  }, {
      start: 119210,
      length: 4,
      convRule: rule92
  }, {
      start: 119214,
      length: 59,
      convRule: rule13
  }, {
      start: 119296,
      length: 66,
      convRule: rule13
  }, {
      start: 119362,
      length: 3,
      convRule: rule92
  }, {
      start: 119365,
      length: 1,
      convRule: rule13
  }, {
      start: 119520,
      length: 20,
      convRule: rule17
  }, {
      start: 119552,
      length: 87,
      convRule: rule13
  }, {
      start: 119648,
      length: 25,
      convRule: rule17
  }, {
      start: 119808,
      length: 26,
      convRule: rule107
  }, {
      start: 119834,
      length: 26,
      convRule: rule20
  }, {
      start: 119860,
      length: 26,
      convRule: rule107
  }, {
      start: 119886,
      length: 7,
      convRule: rule20
  }, {
      start: 119894,
      length: 18,
      convRule: rule20
  }, {
      start: 119912,
      length: 26,
      convRule: rule107
  }, {
      start: 119938,
      length: 26,
      convRule: rule20
  }, {
      start: 119964,
      length: 1,
      convRule: rule107
  }, {
      start: 119966,
      length: 2,
      convRule: rule107
  }, {
      start: 119970,
      length: 1,
      convRule: rule107
  }, {
      start: 119973,
      length: 2,
      convRule: rule107
  }, {
      start: 119977,
      length: 4,
      convRule: rule107
  }, {
      start: 119982,
      length: 8,
      convRule: rule107
  }, {
      start: 119990,
      length: 4,
      convRule: rule20
  }, {
      start: 119995,
      length: 1,
      convRule: rule20
  }, {
      start: 119997,
      length: 7,
      convRule: rule20
  }, {
      start: 120005,
      length: 11,
      convRule: rule20
  }, {
      start: 120016,
      length: 26,
      convRule: rule107
  }, {
      start: 120042,
      length: 26,
      convRule: rule20
  }, {
      start: 120068,
      length: 2,
      convRule: rule107
  }, {
      start: 120071,
      length: 4,
      convRule: rule107
  }, {
      start: 120077,
      length: 8,
      convRule: rule107
  }, {
      start: 120086,
      length: 7,
      convRule: rule107
  }, {
      start: 120094,
      length: 26,
      convRule: rule20
  }, {
      start: 120120,
      length: 2,
      convRule: rule107
  }, {
      start: 120123,
      length: 4,
      convRule: rule107
  }, {
      start: 120128,
      length: 5,
      convRule: rule107
  }, {
      start: 120134,
      length: 1,
      convRule: rule107
  }, {
      start: 120138,
      length: 7,
      convRule: rule107
  }, {
      start: 120146,
      length: 26,
      convRule: rule20
  }, {
      start: 120172,
      length: 26,
      convRule: rule107
  }, {
      start: 120198,
      length: 26,
      convRule: rule20
  }, {
      start: 120224,
      length: 26,
      convRule: rule107
  }, {
      start: 120250,
      length: 26,
      convRule: rule20
  }, {
      start: 120276,
      length: 26,
      convRule: rule107
  }, {
      start: 120302,
      length: 26,
      convRule: rule20
  }, {
      start: 120328,
      length: 26,
      convRule: rule107
  }, {
      start: 120354,
      length: 26,
      convRule: rule20
  }, {
      start: 120380,
      length: 26,
      convRule: rule107
  }, {
      start: 120406,
      length: 26,
      convRule: rule20
  }, {
      start: 120432,
      length: 26,
      convRule: rule107
  }, {
      start: 120458,
      length: 28,
      convRule: rule20
  }, {
      start: 120488,
      length: 25,
      convRule: rule107
  }, {
      start: 120513,
      length: 1,
      convRule: rule6
  }, {
      start: 120514,
      length: 25,
      convRule: rule20
  }, {
      start: 120539,
      length: 1,
      convRule: rule6
  }, {
      start: 120540,
      length: 6,
      convRule: rule20
  }, {
      start: 120546,
      length: 25,
      convRule: rule107
  }, {
      start: 120571,
      length: 1,
      convRule: rule6
  }, {
      start: 120572,
      length: 25,
      convRule: rule20
  }, {
      start: 120597,
      length: 1,
      convRule: rule6
  }, {
      start: 120598,
      length: 6,
      convRule: rule20
  }, {
      start: 120604,
      length: 25,
      convRule: rule107
  }, {
      start: 120629,
      length: 1,
      convRule: rule6
  }, {
      start: 120630,
      length: 25,
      convRule: rule20
  }, {
      start: 120655,
      length: 1,
      convRule: rule6
  }, {
      start: 120656,
      length: 6,
      convRule: rule20
  }, {
      start: 120662,
      length: 25,
      convRule: rule107
  }, {
      start: 120687,
      length: 1,
      convRule: rule6
  }, {
      start: 120688,
      length: 25,
      convRule: rule20
  }, {
      start: 120713,
      length: 1,
      convRule: rule6
  }, {
      start: 120714,
      length: 6,
      convRule: rule20
  }, {
      start: 120720,
      length: 25,
      convRule: rule107
  }, {
      start: 120745,
      length: 1,
      convRule: rule6
  }, {
      start: 120746,
      length: 25,
      convRule: rule20
  }, {
      start: 120771,
      length: 1,
      convRule: rule6
  }, {
      start: 120772,
      length: 6,
      convRule: rule20
  }, {
      start: 120778,
      length: 1,
      convRule: rule107
  }, {
      start: 120779,
      length: 1,
      convRule: rule20
  }, {
      start: 120782,
      length: 50,
      convRule: rule8
  }, {
      start: 120832,
      length: 512,
      convRule: rule13
  }, {
      start: 121344,
      length: 55,
      convRule: rule92
  }, {
      start: 121399,
      length: 4,
      convRule: rule13
  }, {
      start: 121403,
      length: 50,
      convRule: rule92
  }, {
      start: 121453,
      length: 8,
      convRule: rule13
  }, {
      start: 121461,
      length: 1,
      convRule: rule92
  }, {
      start: 121462,
      length: 14,
      convRule: rule13
  }, {
      start: 121476,
      length: 1,
      convRule: rule92
  }, {
      start: 121477,
      length: 2,
      convRule: rule13
  }, {
      start: 121479,
      length: 5,
      convRule: rule2
  }, {
      start: 121499,
      length: 5,
      convRule: rule92
  }, {
      start: 121505,
      length: 15,
      convRule: rule92
  }, {
      start: 122880,
      length: 7,
      convRule: rule92
  }, {
      start: 122888,
      length: 17,
      convRule: rule92
  }, {
      start: 122907,
      length: 7,
      convRule: rule92
  }, {
      start: 122915,
      length: 2,
      convRule: rule92
  }, {
      start: 122918,
      length: 5,
      convRule: rule92
  }, {
      start: 123136,
      length: 45,
      convRule: rule14
  }, {
      start: 123184,
      length: 7,
      convRule: rule92
  }, {
      start: 123191,
      length: 7,
      convRule: rule91
  }, {
      start: 123200,
      length: 10,
      convRule: rule8
  }, {
      start: 123214,
      length: 1,
      convRule: rule14
  }, {
      start: 123215,
      length: 1,
      convRule: rule13
  }, {
      start: 123584,
      length: 44,
      convRule: rule14
  }, {
      start: 123628,
      length: 4,
      convRule: rule92
  }, {
      start: 123632,
      length: 10,
      convRule: rule8
  }, {
      start: 123647,
      length: 1,
      convRule: rule3
  }, {
      start: 124928,
      length: 197,
      convRule: rule14
  }, {
      start: 125127,
      length: 9,
      convRule: rule17
  }, {
      start: 125136,
      length: 7,
      convRule: rule92
  }, {
      start: 125184,
      length: 34,
      convRule: rule203
  }, {
      start: 125218,
      length: 34,
      convRule: rule204
  }, {
      start: 125252,
      length: 7,
      convRule: rule92
  }, {
      start: 125259,
      length: 1,
      convRule: rule91
  }, {
      start: 125264,
      length: 10,
      convRule: rule8
  }, {
      start: 125278,
      length: 2,
      convRule: rule2
  }, {
      start: 126065,
      length: 59,
      convRule: rule17
  }, {
      start: 126124,
      length: 1,
      convRule: rule13
  }, {
      start: 126125,
      length: 3,
      convRule: rule17
  }, {
      start: 126128,
      length: 1,
      convRule: rule3
  }, {
      start: 126129,
      length: 4,
      convRule: rule17
  }, {
      start: 126209,
      length: 45,
      convRule: rule17
  }, {
      start: 126254,
      length: 1,
      convRule: rule13
  }, {
      start: 126255,
      length: 15,
      convRule: rule17
  }, {
      start: 126464,
      length: 4,
      convRule: rule14
  }, {
      start: 126469,
      length: 27,
      convRule: rule14
  }, {
      start: 126497,
      length: 2,
      convRule: rule14
  }, {
      start: 126500,
      length: 1,
      convRule: rule14
  }, {
      start: 126503,
      length: 1,
      convRule: rule14
  }, {
      start: 126505,
      length: 10,
      convRule: rule14
  }, {
      start: 126516,
      length: 4,
      convRule: rule14
  }, {
      start: 126521,
      length: 1,
      convRule: rule14
  }, {
      start: 126523,
      length: 1,
      convRule: rule14
  }, {
      start: 126530,
      length: 1,
      convRule: rule14
  }, {
      start: 126535,
      length: 1,
      convRule: rule14
  }, {
      start: 126537,
      length: 1,
      convRule: rule14
  }, {
      start: 126539,
      length: 1,
      convRule: rule14
  }, {
      start: 126541,
      length: 3,
      convRule: rule14
  }, {
      start: 126545,
      length: 2,
      convRule: rule14
  }, {
      start: 126548,
      length: 1,
      convRule: rule14
  }, {
      start: 126551,
      length: 1,
      convRule: rule14
  }, {
      start: 126553,
      length: 1,
      convRule: rule14
  }, {
      start: 126555,
      length: 1,
      convRule: rule14
  }, {
      start: 126557,
      length: 1,
      convRule: rule14
  }, {
      start: 126559,
      length: 1,
      convRule: rule14
  }, {
      start: 126561,
      length: 2,
      convRule: rule14
  }, {
      start: 126564,
      length: 1,
      convRule: rule14
  }, {
      start: 126567,
      length: 4,
      convRule: rule14
  }, {
      start: 126572,
      length: 7,
      convRule: rule14
  }, {
      start: 126580,
      length: 4,
      convRule: rule14
  }, {
      start: 126585,
      length: 4,
      convRule: rule14
  }, {
      start: 126590,
      length: 1,
      convRule: rule14
  }, {
      start: 126592,
      length: 10,
      convRule: rule14
  }, {
      start: 126603,
      length: 17,
      convRule: rule14
  }, {
      start: 126625,
      length: 3,
      convRule: rule14
  }, {
      start: 126629,
      length: 5,
      convRule: rule14
  }, {
      start: 126635,
      length: 17,
      convRule: rule14
  }, {
      start: 126704,
      length: 2,
      convRule: rule6
  }, {
      start: 126976,
      length: 44,
      convRule: rule13
  }, {
      start: 127024,
      length: 100,
      convRule: rule13
  }, {
      start: 127136,
      length: 15,
      convRule: rule13
  }, {
      start: 127153,
      length: 15,
      convRule: rule13
  }, {
      start: 127169,
      length: 15,
      convRule: rule13
  }, {
      start: 127185,
      length: 37,
      convRule: rule13
  }, {
      start: 127232,
      length: 13,
      convRule: rule17
  }, {
      start: 127245,
      length: 161,
      convRule: rule13
  }, {
      start: 127462,
      length: 29,
      convRule: rule13
  }, {
      start: 127504,
      length: 44,
      convRule: rule13
  }, {
      start: 127552,
      length: 9,
      convRule: rule13
  }, {
      start: 127568,
      length: 2,
      convRule: rule13
  }, {
      start: 127584,
      length: 6,
      convRule: rule13
  }, {
      start: 127744,
      length: 251,
      convRule: rule13
  }, {
      start: 127995,
      length: 5,
      convRule: rule10
  }, {
      start: 128000,
      length: 728,
      convRule: rule13
  }, {
      start: 128736,
      length: 13,
      convRule: rule13
  }, {
      start: 128752,
      length: 13,
      convRule: rule13
  }, {
      start: 128768,
      length: 116,
      convRule: rule13
  }, {
      start: 128896,
      length: 89,
      convRule: rule13
  }, {
      start: 128992,
      length: 12,
      convRule: rule13
  }, {
      start: 129024,
      length: 12,
      convRule: rule13
  }, {
      start: 129040,
      length: 56,
      convRule: rule13
  }, {
      start: 129104,
      length: 10,
      convRule: rule13
  }, {
      start: 129120,
      length: 40,
      convRule: rule13
  }, {
      start: 129168,
      length: 30,
      convRule: rule13
  }, {
      start: 129200,
      length: 2,
      convRule: rule13
  }, {
      start: 129280,
      length: 121,
      convRule: rule13
  }, {
      start: 129402,
      length: 82,
      convRule: rule13
  }, {
      start: 129485,
      length: 135,
      convRule: rule13
  }, {
      start: 129632,
      length: 14,
      convRule: rule13
  }, {
      start: 129648,
      length: 5,
      convRule: rule13
  }, {
      start: 129656,
      length: 3,
      convRule: rule13
  }, {
      start: 129664,
      length: 7,
      convRule: rule13
  }, {
      start: 129680,
      length: 25,
      convRule: rule13
  }, {
      start: 129712,
      length: 7,
      convRule: rule13
  }, {
      start: 129728,
      length: 3,
      convRule: rule13
  }, {
      start: 129744,
      length: 7,
      convRule: rule13
  }, {
      start: 129792,
      length: 147,
      convRule: rule13
  }, {
      start: 129940,
      length: 55,
      convRule: rule13
  }, {
      start: 130032,
      length: 10,
      convRule: rule8
  }, {
      start: 131072,
      length: 42718,
      convRule: rule14
  }, {
      start: 173824,
      length: 4149,
      convRule: rule14
  }, {
      start: 177984,
      length: 222,
      convRule: rule14
  }, {
      start: 178208,
      length: 5762,
      convRule: rule14
  }, {
      start: 183984,
      length: 7473,
      convRule: rule14
  }, {
      start: 194560,
      length: 542,
      convRule: rule14
  }, {
      start: 196608,
      length: 4939,
      convRule: rule14
  }, {
      start: 917505,
      length: 1,
      convRule: rule16
  }, {
      start: 917536,
      length: 96,
      convRule: rule16
  }, {
      start: 917760,
      length: 240,
      convRule: rule92
  }, {
      start: 983040,
      length: 65534,
      convRule: rule200
  }, {
      start: 1048576,
      length: 65534,
      convRule: rule200
  } ];
  var checkAttr = function (categories) {
      return function ($$char) {
          var numOfBlocks = (function () {
              var $28 = $$char < 256;
              if ($28) {
                  return numLat1Blocks;
              };
              return numBlocks;
          })();
          var maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5628, column 8 - line 5630, column 92): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uIswalnum = checkAttr([ gencatLT, gencatLU, gencatLL, gencatLM, gencatLO, gencatMC, gencatME, gencatMN, gencatNO, gencatND, gencatNL ]);
  var uIswalpha = checkAttr([ gencatLL, gencatLU, gencatLT, gencatLM, gencatLO ]);                                                                                                                                                                                    
  var uIswupper = checkAttr([ gencatLU, gencatLT ]);
  exports["bsearch"] = bsearch;
  exports["uIswupper"] = uIswupper;
  exports["uIswalpha"] = uIswalpha;
  exports["uIswalnum"] = uIswalnum;
  exports["uIswspace"] = uIswspace;
  exports["uTowupper"] = uTowupper;
  exports["uTowlower"] = uTowlower;
  exports["uTowtitle"] = uTowtitle;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CodePoint.Unicode.Internal.Casing"] = $PS["Data.CodePoint.Unicode.Internal.Casing"] || {};
  var exports = $PS["Data.CodePoint.Unicode.Internal.Casing"];
  var Data_Array = $PS["Data.Array"];
  var Data_CodePoint_Unicode_Internal = $PS["Data.CodePoint.Unicode.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                
  var zeroRec = function (code) {
      return {
          code: code,
          lower: [  ],
          title: [  ],
          upper: [  ],
          fold: 0,
          foldFull: [  ]
      };
  };
  var rules = [ {
      code: 65,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 97,
      foldFull: [ 97 ]
  }, {
      code: 66,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 98,
      foldFull: [ 98 ]
  }, {
      code: 67,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 99,
      foldFull: [ 99 ]
  }, {
      code: 68,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 100,
      foldFull: [ 100 ]
  }, {
      code: 69,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 101,
      foldFull: [ 101 ]
  }, {
      code: 70,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 102,
      foldFull: [ 102 ]
  }, {
      code: 71,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 103,
      foldFull: [ 103 ]
  }, {
      code: 72,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 104,
      foldFull: [ 104 ]
  }, {
      code: 73,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 105,
      foldFull: [ 105 ]
  }, {
      code: 74,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 106,
      foldFull: [ 106 ]
  }, {
      code: 75,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 107,
      foldFull: [ 107 ]
  }, {
      code: 76,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 108,
      foldFull: [ 108 ]
  }, {
      code: 77,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 109,
      foldFull: [ 109 ]
  }, {
      code: 78,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 110,
      foldFull: [ 110 ]
  }, {
      code: 79,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 111,
      foldFull: [ 111 ]
  }, {
      code: 80,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 112,
      foldFull: [ 112 ]
  }, {
      code: 81,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 113,
      foldFull: [ 113 ]
  }, {
      code: 82,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 114,
      foldFull: [ 114 ]
  }, {
      code: 83,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 115,
      foldFull: [ 115 ]
  }, {
      code: 84,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 116,
      foldFull: [ 116 ]
  }, {
      code: 85,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 117,
      foldFull: [ 117 ]
  }, {
      code: 86,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 118,
      foldFull: [ 118 ]
  }, {
      code: 87,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 119,
      foldFull: [ 119 ]
  }, {
      code: 88,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 120,
      foldFull: [ 120 ]
  }, {
      code: 89,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 121,
      foldFull: [ 121 ]
  }, {
      code: 90,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 122,
      foldFull: [ 122 ]
  }, {
      code: 181,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 956,
      foldFull: [ 956 ]
  }, {
      code: 192,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 224,
      foldFull: [ 224 ]
  }, {
      code: 193,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 225,
      foldFull: [ 225 ]
  }, {
      code: 194,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 226,
      foldFull: [ 226 ]
  }, {
      code: 195,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 227,
      foldFull: [ 227 ]
  }, {
      code: 196,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 228,
      foldFull: [ 228 ]
  }, {
      code: 197,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 229,
      foldFull: [ 229 ]
  }, {
      code: 198,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 230,
      foldFull: [ 230 ]
  }, {
      code: 199,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 231,
      foldFull: [ 231 ]
  }, {
      code: 200,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 232,
      foldFull: [ 232 ]
  }, {
      code: 201,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 233,
      foldFull: [ 233 ]
  }, {
      code: 202,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 234,
      foldFull: [ 234 ]
  }, {
      code: 203,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 235,
      foldFull: [ 235 ]
  }, {
      code: 204,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 236,
      foldFull: [ 236 ]
  }, {
      code: 205,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 237,
      foldFull: [ 237 ]
  }, {
      code: 206,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 238,
      foldFull: [ 238 ]
  }, {
      code: 207,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 239,
      foldFull: [ 239 ]
  }, {
      code: 208,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 240,
      foldFull: [ 240 ]
  }, {
      code: 209,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 241,
      foldFull: [ 241 ]
  }, {
      code: 210,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 242,
      foldFull: [ 242 ]
  }, {
      code: 211,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 243,
      foldFull: [ 243 ]
  }, {
      code: 212,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 244,
      foldFull: [ 244 ]
  }, {
      code: 213,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 245,
      foldFull: [ 245 ]
  }, {
      code: 214,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 246,
      foldFull: [ 246 ]
  }, {
      code: 216,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 248,
      foldFull: [ 248 ]
  }, {
      code: 217,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 249,
      foldFull: [ 249 ]
  }, {
      code: 218,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 250,
      foldFull: [ 250 ]
  }, {
      code: 219,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 251,
      foldFull: [ 251 ]
  }, {
      code: 220,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 252,
      foldFull: [ 252 ]
  }, {
      code: 221,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 253,
      foldFull: [ 253 ]
  }, {
      code: 222,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 254,
      foldFull: [ 254 ]
  }, {
      code: 223,
      lower: [ 223 ],
      title: [ 83, 115 ],
      upper: [ 83, 83 ],
      fold: 0,
      foldFull: [ 115, 115 ]
  }, {
      code: 223,
      lower: [ 223 ],
      title: [ 83, 115 ],
      upper: [ 83, 83 ],
      fold: 0,
      foldFull: [ 115, 115 ]
  }, {
      code: 256,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 257,
      foldFull: [ 257 ]
  }, {
      code: 258,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 259,
      foldFull: [ 259 ]
  }, {
      code: 260,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 261,
      foldFull: [ 261 ]
  }, {
      code: 262,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 263,
      foldFull: [ 263 ]
  }, {
      code: 264,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 265,
      foldFull: [ 265 ]
  }, {
      code: 266,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 267,
      foldFull: [ 267 ]
  }, {
      code: 268,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 269,
      foldFull: [ 269 ]
  }, {
      code: 270,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 271,
      foldFull: [ 271 ]
  }, {
      code: 272,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 273,
      foldFull: [ 273 ]
  }, {
      code: 274,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 275,
      foldFull: [ 275 ]
  }, {
      code: 276,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 277,
      foldFull: [ 277 ]
  }, {
      code: 278,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 279,
      foldFull: [ 279 ]
  }, {
      code: 280,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 281,
      foldFull: [ 281 ]
  }, {
      code: 282,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 283,
      foldFull: [ 283 ]
  }, {
      code: 284,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 285,
      foldFull: [ 285 ]
  }, {
      code: 286,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 287,
      foldFull: [ 287 ]
  }, {
      code: 288,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 289,
      foldFull: [ 289 ]
  }, {
      code: 290,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 291,
      foldFull: [ 291 ]
  }, {
      code: 292,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 293,
      foldFull: [ 293 ]
  }, {
      code: 294,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 295,
      foldFull: [ 295 ]
  }, {
      code: 296,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 297,
      foldFull: [ 297 ]
  }, {
      code: 298,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 299,
      foldFull: [ 299 ]
  }, {
      code: 300,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 301,
      foldFull: [ 301 ]
  }, {
      code: 302,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 303,
      foldFull: [ 303 ]
  }, {
      code: 304,
      lower: [ 105, 775 ],
      title: [ 304 ],
      upper: [ 304 ],
      fold: 0,
      foldFull: [ 105, 775 ]
  }, {
      code: 304,
      lower: [ 105, 775 ],
      title: [ 304 ],
      upper: [ 304 ],
      fold: 0,
      foldFull: [ 105, 775 ]
  }, {
      code: 306,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 307,
      foldFull: [ 307 ]
  }, {
      code: 308,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 309,
      foldFull: [ 309 ]
  }, {
      code: 310,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 311,
      foldFull: [ 311 ]
  }, {
      code: 313,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 314,
      foldFull: [ 314 ]
  }, {
      code: 315,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 316,
      foldFull: [ 316 ]
  }, {
      code: 317,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 318,
      foldFull: [ 318 ]
  }, {
      code: 319,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 320,
      foldFull: [ 320 ]
  }, {
      code: 321,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 322,
      foldFull: [ 322 ]
  }, {
      code: 323,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 324,
      foldFull: [ 324 ]
  }, {
      code: 325,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 326,
      foldFull: [ 326 ]
  }, {
      code: 327,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 328,
      foldFull: [ 328 ]
  }, {
      code: 329,
      lower: [ 329 ],
      title: [ 700, 78 ],
      upper: [ 700, 78 ],
      fold: 0,
      foldFull: [ 700, 110 ]
  }, {
      code: 329,
      lower: [ 329 ],
      title: [ 700, 78 ],
      upper: [ 700, 78 ],
      fold: 0,
      foldFull: [ 700, 110 ]
  }, {
      code: 330,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 331,
      foldFull: [ 331 ]
  }, {
      code: 332,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 333,
      foldFull: [ 333 ]
  }, {
      code: 334,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 335,
      foldFull: [ 335 ]
  }, {
      code: 336,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 337,
      foldFull: [ 337 ]
  }, {
      code: 338,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 339,
      foldFull: [ 339 ]
  }, {
      code: 340,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 341,
      foldFull: [ 341 ]
  }, {
      code: 342,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 343,
      foldFull: [ 343 ]
  }, {
      code: 344,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 345,
      foldFull: [ 345 ]
  }, {
      code: 346,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 347,
      foldFull: [ 347 ]
  }, {
      code: 348,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 349,
      foldFull: [ 349 ]
  }, {
      code: 350,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 351,
      foldFull: [ 351 ]
  }, {
      code: 352,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 353,
      foldFull: [ 353 ]
  }, {
      code: 354,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 355,
      foldFull: [ 355 ]
  }, {
      code: 356,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 357,
      foldFull: [ 357 ]
  }, {
      code: 358,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 359,
      foldFull: [ 359 ]
  }, {
      code: 360,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 361,
      foldFull: [ 361 ]
  }, {
      code: 362,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 363,
      foldFull: [ 363 ]
  }, {
      code: 364,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 365,
      foldFull: [ 365 ]
  }, {
      code: 366,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 367,
      foldFull: [ 367 ]
  }, {
      code: 368,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 369,
      foldFull: [ 369 ]
  }, {
      code: 370,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 371,
      foldFull: [ 371 ]
  }, {
      code: 372,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 373,
      foldFull: [ 373 ]
  }, {
      code: 374,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 375,
      foldFull: [ 375 ]
  }, {
      code: 376,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 255,
      foldFull: [ 255 ]
  }, {
      code: 377,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 378,
      foldFull: [ 378 ]
  }, {
      code: 379,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 380,
      foldFull: [ 380 ]
  }, {
      code: 381,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 382,
      foldFull: [ 382 ]
  }, {
      code: 383,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 115,
      foldFull: [ 115 ]
  }, {
      code: 385,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 595,
      foldFull: [ 595 ]
  }, {
      code: 386,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 387,
      foldFull: [ 387 ]
  }, {
      code: 388,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 389,
      foldFull: [ 389 ]
  }, {
      code: 390,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 596,
      foldFull: [ 596 ]
  }, {
      code: 391,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 392,
      foldFull: [ 392 ]
  }, {
      code: 393,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 598,
      foldFull: [ 598 ]
  }, {
      code: 394,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 599,
      foldFull: [ 599 ]
  }, {
      code: 395,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 396,
      foldFull: [ 396 ]
  }, {
      code: 398,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 477,
      foldFull: [ 477 ]
  }, {
      code: 399,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 601,
      foldFull: [ 601 ]
  }, {
      code: 400,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 603,
      foldFull: [ 603 ]
  }, {
      code: 401,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 402,
      foldFull: [ 402 ]
  }, {
      code: 403,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 608,
      foldFull: [ 608 ]
  }, {
      code: 404,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 611,
      foldFull: [ 611 ]
  }, {
      code: 406,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 617,
      foldFull: [ 617 ]
  }, {
      code: 407,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 616,
      foldFull: [ 616 ]
  }, {
      code: 408,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 409,
      foldFull: [ 409 ]
  }, {
      code: 412,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 623,
      foldFull: [ 623 ]
  }, {
      code: 413,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 626,
      foldFull: [ 626 ]
  }, {
      code: 415,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 629,
      foldFull: [ 629 ]
  }, {
      code: 416,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 417,
      foldFull: [ 417 ]
  }, {
      code: 418,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 419,
      foldFull: [ 419 ]
  }, {
      code: 420,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 421,
      foldFull: [ 421 ]
  }, {
      code: 422,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 640,
      foldFull: [ 640 ]
  }, {
      code: 423,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 424,
      foldFull: [ 424 ]
  }, {
      code: 425,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 643,
      foldFull: [ 643 ]
  }, {
      code: 428,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 429,
      foldFull: [ 429 ]
  }, {
      code: 430,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 648,
      foldFull: [ 648 ]
  }, {
      code: 431,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 432,
      foldFull: [ 432 ]
  }, {
      code: 433,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 650,
      foldFull: [ 650 ]
  }, {
      code: 434,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 651,
      foldFull: [ 651 ]
  }, {
      code: 435,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 436,
      foldFull: [ 436 ]
  }, {
      code: 437,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 438,
      foldFull: [ 438 ]
  }, {
      code: 439,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 658,
      foldFull: [ 658 ]
  }, {
      code: 440,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 441,
      foldFull: [ 441 ]
  }, {
      code: 444,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 445,
      foldFull: [ 445 ]
  }, {
      code: 452,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 454,
      foldFull: [ 454 ]
  }, {
      code: 453,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 454,
      foldFull: [ 454 ]
  }, {
      code: 455,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 457,
      foldFull: [ 457 ]
  }, {
      code: 456,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 457,
      foldFull: [ 457 ]
  }, {
      code: 458,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 460,
      foldFull: [ 460 ]
  }, {
      code: 459,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 460,
      foldFull: [ 460 ]
  }, {
      code: 461,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 462,
      foldFull: [ 462 ]
  }, {
      code: 463,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 464,
      foldFull: [ 464 ]
  }, {
      code: 465,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 466,
      foldFull: [ 466 ]
  }, {
      code: 467,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 468,
      foldFull: [ 468 ]
  }, {
      code: 469,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 470,
      foldFull: [ 470 ]
  }, {
      code: 471,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 472,
      foldFull: [ 472 ]
  }, {
      code: 473,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 474,
      foldFull: [ 474 ]
  }, {
      code: 475,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 476,
      foldFull: [ 476 ]
  }, {
      code: 478,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 479,
      foldFull: [ 479 ]
  }, {
      code: 480,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 481,
      foldFull: [ 481 ]
  }, {
      code: 482,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 483,
      foldFull: [ 483 ]
  }, {
      code: 484,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 485,
      foldFull: [ 485 ]
  }, {
      code: 486,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 487,
      foldFull: [ 487 ]
  }, {
      code: 488,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 489,
      foldFull: [ 489 ]
  }, {
      code: 490,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 491,
      foldFull: [ 491 ]
  }, {
      code: 492,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 493,
      foldFull: [ 493 ]
  }, {
      code: 494,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 495,
      foldFull: [ 495 ]
  }, {
      code: 496,
      lower: [ 496 ],
      title: [ 74, 780 ],
      upper: [ 74, 780 ],
      fold: 0,
      foldFull: [ 106, 780 ]
  }, {
      code: 496,
      lower: [ 496 ],
      title: [ 74, 780 ],
      upper: [ 74, 780 ],
      fold: 0,
      foldFull: [ 106, 780 ]
  }, {
      code: 497,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 499,
      foldFull: [ 499 ]
  }, {
      code: 498,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 499,
      foldFull: [ 499 ]
  }, {
      code: 500,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 501,
      foldFull: [ 501 ]
  }, {
      code: 502,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 405,
      foldFull: [ 405 ]
  }, {
      code: 503,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 447,
      foldFull: [ 447 ]
  }, {
      code: 504,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 505,
      foldFull: [ 505 ]
  }, {
      code: 506,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 507,
      foldFull: [ 507 ]
  }, {
      code: 508,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 509,
      foldFull: [ 509 ]
  }, {
      code: 510,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 511,
      foldFull: [ 511 ]
  }, {
      code: 512,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 513,
      foldFull: [ 513 ]
  }, {
      code: 514,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 515,
      foldFull: [ 515 ]
  }, {
      code: 516,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 517,
      foldFull: [ 517 ]
  }, {
      code: 518,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 519,
      foldFull: [ 519 ]
  }, {
      code: 520,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 521,
      foldFull: [ 521 ]
  }, {
      code: 522,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 523,
      foldFull: [ 523 ]
  }, {
      code: 524,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 525,
      foldFull: [ 525 ]
  }, {
      code: 526,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 527,
      foldFull: [ 527 ]
  }, {
      code: 528,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 529,
      foldFull: [ 529 ]
  }, {
      code: 530,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 531,
      foldFull: [ 531 ]
  }, {
      code: 532,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 533,
      foldFull: [ 533 ]
  }, {
      code: 534,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 535,
      foldFull: [ 535 ]
  }, {
      code: 536,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 537,
      foldFull: [ 537 ]
  }, {
      code: 538,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 539,
      foldFull: [ 539 ]
  }, {
      code: 540,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 541,
      foldFull: [ 541 ]
  }, {
      code: 542,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 543,
      foldFull: [ 543 ]
  }, {
      code: 544,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 414,
      foldFull: [ 414 ]
  }, {
      code: 546,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 547,
      foldFull: [ 547 ]
  }, {
      code: 548,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 549,
      foldFull: [ 549 ]
  }, {
      code: 550,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 551,
      foldFull: [ 551 ]
  }, {
      code: 552,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 553,
      foldFull: [ 553 ]
  }, {
      code: 554,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 555,
      foldFull: [ 555 ]
  }, {
      code: 556,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 557,
      foldFull: [ 557 ]
  }, {
      code: 558,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 559,
      foldFull: [ 559 ]
  }, {
      code: 560,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 561,
      foldFull: [ 561 ]
  }, {
      code: 562,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 563,
      foldFull: [ 563 ]
  }, {
      code: 570,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11365,
      foldFull: [ 11365 ]
  }, {
      code: 571,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 572,
      foldFull: [ 572 ]
  }, {
      code: 573,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 410,
      foldFull: [ 410 ]
  }, {
      code: 574,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11366,
      foldFull: [ 11366 ]
  }, {
      code: 577,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 578,
      foldFull: [ 578 ]
  }, {
      code: 579,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 384,
      foldFull: [ 384 ]
  }, {
      code: 580,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 649,
      foldFull: [ 649 ]
  }, {
      code: 581,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 652,
      foldFull: [ 652 ]
  }, {
      code: 582,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 583,
      foldFull: [ 583 ]
  }, {
      code: 584,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 585,
      foldFull: [ 585 ]
  }, {
      code: 586,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 587,
      foldFull: [ 587 ]
  }, {
      code: 588,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 589,
      foldFull: [ 589 ]
  }, {
      code: 590,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 591,
      foldFull: [ 591 ]
  }, {
      code: 837,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 953,
      foldFull: [ 953 ]
  }, {
      code: 880,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 881,
      foldFull: [ 881 ]
  }, {
      code: 882,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 883,
      foldFull: [ 883 ]
  }, {
      code: 886,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 887,
      foldFull: [ 887 ]
  }, {
      code: 895,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1011,
      foldFull: [ 1011 ]
  }, {
      code: 902,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 940,
      foldFull: [ 940 ]
  }, {
      code: 904,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 941,
      foldFull: [ 941 ]
  }, {
      code: 905,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 942,
      foldFull: [ 942 ]
  }, {
      code: 906,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 943,
      foldFull: [ 943 ]
  }, {
      code: 908,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 972,
      foldFull: [ 972 ]
  }, {
      code: 910,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 973,
      foldFull: [ 973 ]
  }, {
      code: 911,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 974,
      foldFull: [ 974 ]
  }, {
      code: 912,
      lower: [ 912 ],
      title: [ 921, 776, 769 ],
      upper: [ 921, 776, 769 ],
      fold: 0,
      foldFull: [ 953, 776, 769 ]
  }, {
      code: 912,
      lower: [ 912 ],
      title: [ 921, 776, 769 ],
      upper: [ 921, 776, 769 ],
      fold: 0,
      foldFull: [ 953, 776, 769 ]
  }, {
      code: 913,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 945,
      foldFull: [ 945 ]
  }, {
      code: 914,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 946,
      foldFull: [ 946 ]
  }, {
      code: 915,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 947,
      foldFull: [ 947 ]
  }, {
      code: 916,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 948,
      foldFull: [ 948 ]
  }, {
      code: 917,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 949,
      foldFull: [ 949 ]
  }, {
      code: 918,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 950,
      foldFull: [ 950 ]
  }, {
      code: 919,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 951,
      foldFull: [ 951 ]
  }, {
      code: 920,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 952,
      foldFull: [ 952 ]
  }, {
      code: 921,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 953,
      foldFull: [ 953 ]
  }, {
      code: 922,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 954,
      foldFull: [ 954 ]
  }, {
      code: 923,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 955,
      foldFull: [ 955 ]
  }, {
      code: 924,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 956,
      foldFull: [ 956 ]
  }, {
      code: 925,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 957,
      foldFull: [ 957 ]
  }, {
      code: 926,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 958,
      foldFull: [ 958 ]
  }, {
      code: 927,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 959,
      foldFull: [ 959 ]
  }, {
      code: 928,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 960,
      foldFull: [ 960 ]
  }, {
      code: 929,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 961,
      foldFull: [ 961 ]
  }, {
      code: 931,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 963,
      foldFull: [ 963 ]
  }, {
      code: 932,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 964,
      foldFull: [ 964 ]
  }, {
      code: 933,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 965,
      foldFull: [ 965 ]
  }, {
      code: 934,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 966,
      foldFull: [ 966 ]
  }, {
      code: 935,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 967,
      foldFull: [ 967 ]
  }, {
      code: 936,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 968,
      foldFull: [ 968 ]
  }, {
      code: 937,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 969,
      foldFull: [ 969 ]
  }, {
      code: 938,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 970,
      foldFull: [ 970 ]
  }, {
      code: 939,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 971,
      foldFull: [ 971 ]
  }, {
      code: 944,
      lower: [ 944 ],
      title: [ 933, 776, 769 ],
      upper: [ 933, 776, 769 ],
      fold: 0,
      foldFull: [ 965, 776, 769 ]
  }, {
      code: 944,
      lower: [ 944 ],
      title: [ 933, 776, 769 ],
      upper: [ 933, 776, 769 ],
      fold: 0,
      foldFull: [ 965, 776, 769 ]
  }, {
      code: 962,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 963,
      foldFull: [ 963 ]
  }, {
      code: 975,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 983,
      foldFull: [ 983 ]
  }, {
      code: 976,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 946,
      foldFull: [ 946 ]
  }, {
      code: 977,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 952,
      foldFull: [ 952 ]
  }, {
      code: 981,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 966,
      foldFull: [ 966 ]
  }, {
      code: 982,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 960,
      foldFull: [ 960 ]
  }, {
      code: 984,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 985,
      foldFull: [ 985 ]
  }, {
      code: 986,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 987,
      foldFull: [ 987 ]
  }, {
      code: 988,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 989,
      foldFull: [ 989 ]
  }, {
      code: 990,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 991,
      foldFull: [ 991 ]
  }, {
      code: 992,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 993,
      foldFull: [ 993 ]
  }, {
      code: 994,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 995,
      foldFull: [ 995 ]
  }, {
      code: 996,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 997,
      foldFull: [ 997 ]
  }, {
      code: 998,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 999,
      foldFull: [ 999 ]
  }, {
      code: 1000,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1001,
      foldFull: [ 1001 ]
  }, {
      code: 1002,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1003,
      foldFull: [ 1003 ]
  }, {
      code: 1004,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1005,
      foldFull: [ 1005 ]
  }, {
      code: 1006,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1007,
      foldFull: [ 1007 ]
  }, {
      code: 1008,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 954,
      foldFull: [ 954 ]
  }, {
      code: 1009,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 961,
      foldFull: [ 961 ]
  }, {
      code: 1012,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 952,
      foldFull: [ 952 ]
  }, {
      code: 1013,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 949,
      foldFull: [ 949 ]
  }, {
      code: 1015,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1016,
      foldFull: [ 1016 ]
  }, {
      code: 1017,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1010,
      foldFull: [ 1010 ]
  }, {
      code: 1018,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1019,
      foldFull: [ 1019 ]
  }, {
      code: 1021,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 891,
      foldFull: [ 891 ]
  }, {
      code: 1022,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 892,
      foldFull: [ 892 ]
  }, {
      code: 1023,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 893,
      foldFull: [ 893 ]
  }, {
      code: 1024,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1104,
      foldFull: [ 1104 ]
  }, {
      code: 1025,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1105,
      foldFull: [ 1105 ]
  }, {
      code: 1026,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1106,
      foldFull: [ 1106 ]
  }, {
      code: 1027,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1107,
      foldFull: [ 1107 ]
  }, {
      code: 1028,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1108,
      foldFull: [ 1108 ]
  }, {
      code: 1029,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1109,
      foldFull: [ 1109 ]
  }, {
      code: 1030,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1110,
      foldFull: [ 1110 ]
  }, {
      code: 1031,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1111,
      foldFull: [ 1111 ]
  }, {
      code: 1032,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1112,
      foldFull: [ 1112 ]
  }, {
      code: 1033,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1113,
      foldFull: [ 1113 ]
  }, {
      code: 1034,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1114,
      foldFull: [ 1114 ]
  }, {
      code: 1035,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1115,
      foldFull: [ 1115 ]
  }, {
      code: 1036,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1116,
      foldFull: [ 1116 ]
  }, {
      code: 1037,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1117,
      foldFull: [ 1117 ]
  }, {
      code: 1038,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1118,
      foldFull: [ 1118 ]
  }, {
      code: 1039,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1119,
      foldFull: [ 1119 ]
  }, {
      code: 1040,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1072,
      foldFull: [ 1072 ]
  }, {
      code: 1041,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1073,
      foldFull: [ 1073 ]
  }, {
      code: 1042,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1074,
      foldFull: [ 1074 ]
  }, {
      code: 1043,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1075,
      foldFull: [ 1075 ]
  }, {
      code: 1044,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1076,
      foldFull: [ 1076 ]
  }, {
      code: 1045,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1077,
      foldFull: [ 1077 ]
  }, {
      code: 1046,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1078,
      foldFull: [ 1078 ]
  }, {
      code: 1047,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1079,
      foldFull: [ 1079 ]
  }, {
      code: 1048,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1080,
      foldFull: [ 1080 ]
  }, {
      code: 1049,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1081,
      foldFull: [ 1081 ]
  }, {
      code: 1050,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1082,
      foldFull: [ 1082 ]
  }, {
      code: 1051,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1083,
      foldFull: [ 1083 ]
  }, {
      code: 1052,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1084,
      foldFull: [ 1084 ]
  }, {
      code: 1053,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1085,
      foldFull: [ 1085 ]
  }, {
      code: 1054,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1086,
      foldFull: [ 1086 ]
  }, {
      code: 1055,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1087,
      foldFull: [ 1087 ]
  }, {
      code: 1056,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1088,
      foldFull: [ 1088 ]
  }, {
      code: 1057,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1089,
      foldFull: [ 1089 ]
  }, {
      code: 1058,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1090,
      foldFull: [ 1090 ]
  }, {
      code: 1059,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1091,
      foldFull: [ 1091 ]
  }, {
      code: 1060,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1092,
      foldFull: [ 1092 ]
  }, {
      code: 1061,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1093,
      foldFull: [ 1093 ]
  }, {
      code: 1062,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1094,
      foldFull: [ 1094 ]
  }, {
      code: 1063,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1095,
      foldFull: [ 1095 ]
  }, {
      code: 1064,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1096,
      foldFull: [ 1096 ]
  }, {
      code: 1065,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1097,
      foldFull: [ 1097 ]
  }, {
      code: 1066,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1098,
      foldFull: [ 1098 ]
  }, {
      code: 1067,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1099,
      foldFull: [ 1099 ]
  }, {
      code: 1068,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1100,
      foldFull: [ 1100 ]
  }, {
      code: 1069,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1101,
      foldFull: [ 1101 ]
  }, {
      code: 1070,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1102,
      foldFull: [ 1102 ]
  }, {
      code: 1071,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1103,
      foldFull: [ 1103 ]
  }, {
      code: 1120,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1121,
      foldFull: [ 1121 ]
  }, {
      code: 1122,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1123,
      foldFull: [ 1123 ]
  }, {
      code: 1124,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1125,
      foldFull: [ 1125 ]
  }, {
      code: 1126,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1127,
      foldFull: [ 1127 ]
  }, {
      code: 1128,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1129,
      foldFull: [ 1129 ]
  }, {
      code: 1130,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1131,
      foldFull: [ 1131 ]
  }, {
      code: 1132,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1133,
      foldFull: [ 1133 ]
  }, {
      code: 1134,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1135,
      foldFull: [ 1135 ]
  }, {
      code: 1136,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1137,
      foldFull: [ 1137 ]
  }, {
      code: 1138,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1139,
      foldFull: [ 1139 ]
  }, {
      code: 1140,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1141,
      foldFull: [ 1141 ]
  }, {
      code: 1142,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1143,
      foldFull: [ 1143 ]
  }, {
      code: 1144,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1145,
      foldFull: [ 1145 ]
  }, {
      code: 1146,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1147,
      foldFull: [ 1147 ]
  }, {
      code: 1148,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1149,
      foldFull: [ 1149 ]
  }, {
      code: 1150,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1151,
      foldFull: [ 1151 ]
  }, {
      code: 1152,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1153,
      foldFull: [ 1153 ]
  }, {
      code: 1162,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1163,
      foldFull: [ 1163 ]
  }, {
      code: 1164,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1165,
      foldFull: [ 1165 ]
  }, {
      code: 1166,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1167,
      foldFull: [ 1167 ]
  }, {
      code: 1168,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1169,
      foldFull: [ 1169 ]
  }, {
      code: 1170,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1171,
      foldFull: [ 1171 ]
  }, {
      code: 1172,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1173,
      foldFull: [ 1173 ]
  }, {
      code: 1174,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1175,
      foldFull: [ 1175 ]
  }, {
      code: 1176,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1177,
      foldFull: [ 1177 ]
  }, {
      code: 1178,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1179,
      foldFull: [ 1179 ]
  }, {
      code: 1180,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1181,
      foldFull: [ 1181 ]
  }, {
      code: 1182,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1183,
      foldFull: [ 1183 ]
  }, {
      code: 1184,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1185,
      foldFull: [ 1185 ]
  }, {
      code: 1186,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1187,
      foldFull: [ 1187 ]
  }, {
      code: 1188,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1189,
      foldFull: [ 1189 ]
  }, {
      code: 1190,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1191,
      foldFull: [ 1191 ]
  }, {
      code: 1192,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1193,
      foldFull: [ 1193 ]
  }, {
      code: 1194,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1195,
      foldFull: [ 1195 ]
  }, {
      code: 1196,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1197,
      foldFull: [ 1197 ]
  }, {
      code: 1198,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1199,
      foldFull: [ 1199 ]
  }, {
      code: 1200,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1201,
      foldFull: [ 1201 ]
  }, {
      code: 1202,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1203,
      foldFull: [ 1203 ]
  }, {
      code: 1204,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1205,
      foldFull: [ 1205 ]
  }, {
      code: 1206,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1207,
      foldFull: [ 1207 ]
  }, {
      code: 1208,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1209,
      foldFull: [ 1209 ]
  }, {
      code: 1210,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1211,
      foldFull: [ 1211 ]
  }, {
      code: 1212,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1213,
      foldFull: [ 1213 ]
  }, {
      code: 1214,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1215,
      foldFull: [ 1215 ]
  }, {
      code: 1216,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1231,
      foldFull: [ 1231 ]
  }, {
      code: 1217,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1218,
      foldFull: [ 1218 ]
  }, {
      code: 1219,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1220,
      foldFull: [ 1220 ]
  }, {
      code: 1221,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1222,
      foldFull: [ 1222 ]
  }, {
      code: 1223,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1224,
      foldFull: [ 1224 ]
  }, {
      code: 1225,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1226,
      foldFull: [ 1226 ]
  }, {
      code: 1227,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1228,
      foldFull: [ 1228 ]
  }, {
      code: 1229,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1230,
      foldFull: [ 1230 ]
  }, {
      code: 1232,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1233,
      foldFull: [ 1233 ]
  }, {
      code: 1234,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1235,
      foldFull: [ 1235 ]
  }, {
      code: 1236,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1237,
      foldFull: [ 1237 ]
  }, {
      code: 1238,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1239,
      foldFull: [ 1239 ]
  }, {
      code: 1240,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1241,
      foldFull: [ 1241 ]
  }, {
      code: 1242,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1243,
      foldFull: [ 1243 ]
  }, {
      code: 1244,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1245,
      foldFull: [ 1245 ]
  }, {
      code: 1246,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1247,
      foldFull: [ 1247 ]
  }, {
      code: 1248,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1249,
      foldFull: [ 1249 ]
  }, {
      code: 1250,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1251,
      foldFull: [ 1251 ]
  }, {
      code: 1252,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1253,
      foldFull: [ 1253 ]
  }, {
      code: 1254,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1255,
      foldFull: [ 1255 ]
  }, {
      code: 1256,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1257,
      foldFull: [ 1257 ]
  }, {
      code: 1258,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1259,
      foldFull: [ 1259 ]
  }, {
      code: 1260,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1261,
      foldFull: [ 1261 ]
  }, {
      code: 1262,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1263,
      foldFull: [ 1263 ]
  }, {
      code: 1264,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1265,
      foldFull: [ 1265 ]
  }, {
      code: 1266,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1267,
      foldFull: [ 1267 ]
  }, {
      code: 1268,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1269,
      foldFull: [ 1269 ]
  }, {
      code: 1270,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1271,
      foldFull: [ 1271 ]
  }, {
      code: 1272,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1273,
      foldFull: [ 1273 ]
  }, {
      code: 1274,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1275,
      foldFull: [ 1275 ]
  }, {
      code: 1276,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1277,
      foldFull: [ 1277 ]
  }, {
      code: 1278,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1279,
      foldFull: [ 1279 ]
  }, {
      code: 1280,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1281,
      foldFull: [ 1281 ]
  }, {
      code: 1282,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1283,
      foldFull: [ 1283 ]
  }, {
      code: 1284,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1285,
      foldFull: [ 1285 ]
  }, {
      code: 1286,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1287,
      foldFull: [ 1287 ]
  }, {
      code: 1288,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1289,
      foldFull: [ 1289 ]
  }, {
      code: 1290,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1291,
      foldFull: [ 1291 ]
  }, {
      code: 1292,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1293,
      foldFull: [ 1293 ]
  }, {
      code: 1294,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1295,
      foldFull: [ 1295 ]
  }, {
      code: 1296,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1297,
      foldFull: [ 1297 ]
  }, {
      code: 1298,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1299,
      foldFull: [ 1299 ]
  }, {
      code: 1300,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1301,
      foldFull: [ 1301 ]
  }, {
      code: 1302,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1303,
      foldFull: [ 1303 ]
  }, {
      code: 1304,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1305,
      foldFull: [ 1305 ]
  }, {
      code: 1306,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1307,
      foldFull: [ 1307 ]
  }, {
      code: 1308,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1309,
      foldFull: [ 1309 ]
  }, {
      code: 1310,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1311,
      foldFull: [ 1311 ]
  }, {
      code: 1312,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1313,
      foldFull: [ 1313 ]
  }, {
      code: 1314,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1315,
      foldFull: [ 1315 ]
  }, {
      code: 1316,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1317,
      foldFull: [ 1317 ]
  }, {
      code: 1318,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1319,
      foldFull: [ 1319 ]
  }, {
      code: 1320,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1321,
      foldFull: [ 1321 ]
  }, {
      code: 1322,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1323,
      foldFull: [ 1323 ]
  }, {
      code: 1324,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1325,
      foldFull: [ 1325 ]
  }, {
      code: 1326,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1327,
      foldFull: [ 1327 ]
  }, {
      code: 1329,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1377,
      foldFull: [ 1377 ]
  }, {
      code: 1330,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1378,
      foldFull: [ 1378 ]
  }, {
      code: 1331,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1379,
      foldFull: [ 1379 ]
  }, {
      code: 1332,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1380,
      foldFull: [ 1380 ]
  }, {
      code: 1333,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1381,
      foldFull: [ 1381 ]
  }, {
      code: 1334,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1382,
      foldFull: [ 1382 ]
  }, {
      code: 1335,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1383,
      foldFull: [ 1383 ]
  }, {
      code: 1336,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1384,
      foldFull: [ 1384 ]
  }, {
      code: 1337,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1385,
      foldFull: [ 1385 ]
  }, {
      code: 1338,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1386,
      foldFull: [ 1386 ]
  }, {
      code: 1339,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1387,
      foldFull: [ 1387 ]
  }, {
      code: 1340,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1388,
      foldFull: [ 1388 ]
  }, {
      code: 1341,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1389,
      foldFull: [ 1389 ]
  }, {
      code: 1342,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1390,
      foldFull: [ 1390 ]
  }, {
      code: 1343,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1391,
      foldFull: [ 1391 ]
  }, {
      code: 1344,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1392,
      foldFull: [ 1392 ]
  }, {
      code: 1345,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1393,
      foldFull: [ 1393 ]
  }, {
      code: 1346,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1394,
      foldFull: [ 1394 ]
  }, {
      code: 1347,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1395,
      foldFull: [ 1395 ]
  }, {
      code: 1348,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1396,
      foldFull: [ 1396 ]
  }, {
      code: 1349,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1397,
      foldFull: [ 1397 ]
  }, {
      code: 1350,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1398,
      foldFull: [ 1398 ]
  }, {
      code: 1351,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1399,
      foldFull: [ 1399 ]
  }, {
      code: 1352,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1400,
      foldFull: [ 1400 ]
  }, {
      code: 1353,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1401,
      foldFull: [ 1401 ]
  }, {
      code: 1354,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1402,
      foldFull: [ 1402 ]
  }, {
      code: 1355,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1403,
      foldFull: [ 1403 ]
  }, {
      code: 1356,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1404,
      foldFull: [ 1404 ]
  }, {
      code: 1357,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1405,
      foldFull: [ 1405 ]
  }, {
      code: 1358,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1406,
      foldFull: [ 1406 ]
  }, {
      code: 1359,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1407,
      foldFull: [ 1407 ]
  }, {
      code: 1360,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1408,
      foldFull: [ 1408 ]
  }, {
      code: 1361,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1409,
      foldFull: [ 1409 ]
  }, {
      code: 1362,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1410,
      foldFull: [ 1410 ]
  }, {
      code: 1363,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1411,
      foldFull: [ 1411 ]
  }, {
      code: 1364,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1412,
      foldFull: [ 1412 ]
  }, {
      code: 1365,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1413,
      foldFull: [ 1413 ]
  }, {
      code: 1366,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1414,
      foldFull: [ 1414 ]
  }, {
      code: 1415,
      lower: [ 1415 ],
      title: [ 1333, 1410 ],
      upper: [ 1333, 1362 ],
      fold: 0,
      foldFull: [ 1381, 1410 ]
  }, {
      code: 1415,
      lower: [ 1415 ],
      title: [ 1333, 1410 ],
      upper: [ 1333, 1362 ],
      fold: 0,
      foldFull: [ 1381, 1410 ]
  }, {
      code: 4256,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11520,
      foldFull: [ 11520 ]
  }, {
      code: 4257,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11521,
      foldFull: [ 11521 ]
  }, {
      code: 4258,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11522,
      foldFull: [ 11522 ]
  }, {
      code: 4259,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11523,
      foldFull: [ 11523 ]
  }, {
      code: 4260,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11524,
      foldFull: [ 11524 ]
  }, {
      code: 4261,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11525,
      foldFull: [ 11525 ]
  }, {
      code: 4262,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11526,
      foldFull: [ 11526 ]
  }, {
      code: 4263,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11527,
      foldFull: [ 11527 ]
  }, {
      code: 4264,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11528,
      foldFull: [ 11528 ]
  }, {
      code: 4265,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11529,
      foldFull: [ 11529 ]
  }, {
      code: 4266,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11530,
      foldFull: [ 11530 ]
  }, {
      code: 4267,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11531,
      foldFull: [ 11531 ]
  }, {
      code: 4268,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11532,
      foldFull: [ 11532 ]
  }, {
      code: 4269,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11533,
      foldFull: [ 11533 ]
  }, {
      code: 4270,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11534,
      foldFull: [ 11534 ]
  }, {
      code: 4271,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11535,
      foldFull: [ 11535 ]
  }, {
      code: 4272,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11536,
      foldFull: [ 11536 ]
  }, {
      code: 4273,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11537,
      foldFull: [ 11537 ]
  }, {
      code: 4274,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11538,
      foldFull: [ 11538 ]
  }, {
      code: 4275,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11539,
      foldFull: [ 11539 ]
  }, {
      code: 4276,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11540,
      foldFull: [ 11540 ]
  }, {
      code: 4277,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11541,
      foldFull: [ 11541 ]
  }, {
      code: 4278,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11542,
      foldFull: [ 11542 ]
  }, {
      code: 4279,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11543,
      foldFull: [ 11543 ]
  }, {
      code: 4280,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11544,
      foldFull: [ 11544 ]
  }, {
      code: 4281,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11545,
      foldFull: [ 11545 ]
  }, {
      code: 4282,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11546,
      foldFull: [ 11546 ]
  }, {
      code: 4283,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11547,
      foldFull: [ 11547 ]
  }, {
      code: 4284,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11548,
      foldFull: [ 11548 ]
  }, {
      code: 4285,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11549,
      foldFull: [ 11549 ]
  }, {
      code: 4286,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11550,
      foldFull: [ 11550 ]
  }, {
      code: 4287,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11551,
      foldFull: [ 11551 ]
  }, {
      code: 4288,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11552,
      foldFull: [ 11552 ]
  }, {
      code: 4289,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11553,
      foldFull: [ 11553 ]
  }, {
      code: 4290,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11554,
      foldFull: [ 11554 ]
  }, {
      code: 4291,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11555,
      foldFull: [ 11555 ]
  }, {
      code: 4292,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11556,
      foldFull: [ 11556 ]
  }, {
      code: 4293,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11557,
      foldFull: [ 11557 ]
  }, {
      code: 4295,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11559,
      foldFull: [ 11559 ]
  }, {
      code: 4301,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11565,
      foldFull: [ 11565 ]
  }, {
      code: 5112,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5104,
      foldFull: [ 5104 ]
  }, {
      code: 5113,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5105,
      foldFull: [ 5105 ]
  }, {
      code: 5114,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5106,
      foldFull: [ 5106 ]
  }, {
      code: 5115,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5107,
      foldFull: [ 5107 ]
  }, {
      code: 5116,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5108,
      foldFull: [ 5108 ]
  }, {
      code: 5117,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5109,
      foldFull: [ 5109 ]
  }, {
      code: 7296,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1074,
      foldFull: [ 1074 ]
  }, {
      code: 7297,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1076,
      foldFull: [ 1076 ]
  }, {
      code: 7298,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1086,
      foldFull: [ 1086 ]
  }, {
      code: 7299,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1089,
      foldFull: [ 1089 ]
  }, {
      code: 7300,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1090,
      foldFull: [ 1090 ]
  }, {
      code: 7301,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1090,
      foldFull: [ 1090 ]
  }, {
      code: 7302,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1098,
      foldFull: [ 1098 ]
  }, {
      code: 7303,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 1123,
      foldFull: [ 1123 ]
  }, {
      code: 7304,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42571,
      foldFull: [ 42571 ]
  }, {
      code: 7312,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4304,
      foldFull: [ 4304 ]
  }, {
      code: 7313,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4305,
      foldFull: [ 4305 ]
  }, {
      code: 7314,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4306,
      foldFull: [ 4306 ]
  }, {
      code: 7315,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4307,
      foldFull: [ 4307 ]
  }, {
      code: 7316,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4308,
      foldFull: [ 4308 ]
  }, {
      code: 7317,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4309,
      foldFull: [ 4309 ]
  }, {
      code: 7318,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4310,
      foldFull: [ 4310 ]
  }, {
      code: 7319,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4311,
      foldFull: [ 4311 ]
  }, {
      code: 7320,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4312,
      foldFull: [ 4312 ]
  }, {
      code: 7321,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4313,
      foldFull: [ 4313 ]
  }, {
      code: 7322,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4314,
      foldFull: [ 4314 ]
  }, {
      code: 7323,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4315,
      foldFull: [ 4315 ]
  }, {
      code: 7324,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4316,
      foldFull: [ 4316 ]
  }, {
      code: 7325,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4317,
      foldFull: [ 4317 ]
  }, {
      code: 7326,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4318,
      foldFull: [ 4318 ]
  }, {
      code: 7327,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4319,
      foldFull: [ 4319 ]
  }, {
      code: 7328,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4320,
      foldFull: [ 4320 ]
  }, {
      code: 7329,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4321,
      foldFull: [ 4321 ]
  }, {
      code: 7330,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4322,
      foldFull: [ 4322 ]
  }, {
      code: 7331,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4323,
      foldFull: [ 4323 ]
  }, {
      code: 7332,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4324,
      foldFull: [ 4324 ]
  }, {
      code: 7333,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4325,
      foldFull: [ 4325 ]
  }, {
      code: 7334,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4326,
      foldFull: [ 4326 ]
  }, {
      code: 7335,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4327,
      foldFull: [ 4327 ]
  }, {
      code: 7336,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4328,
      foldFull: [ 4328 ]
  }, {
      code: 7337,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4329,
      foldFull: [ 4329 ]
  }, {
      code: 7338,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4330,
      foldFull: [ 4330 ]
  }, {
      code: 7339,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4331,
      foldFull: [ 4331 ]
  }, {
      code: 7340,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4332,
      foldFull: [ 4332 ]
  }, {
      code: 7341,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4333,
      foldFull: [ 4333 ]
  }, {
      code: 7342,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4334,
      foldFull: [ 4334 ]
  }, {
      code: 7343,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4335,
      foldFull: [ 4335 ]
  }, {
      code: 7344,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4336,
      foldFull: [ 4336 ]
  }, {
      code: 7345,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4337,
      foldFull: [ 4337 ]
  }, {
      code: 7346,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4338,
      foldFull: [ 4338 ]
  }, {
      code: 7347,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4339,
      foldFull: [ 4339 ]
  }, {
      code: 7348,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4340,
      foldFull: [ 4340 ]
  }, {
      code: 7349,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4341,
      foldFull: [ 4341 ]
  }, {
      code: 7350,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4342,
      foldFull: [ 4342 ]
  }, {
      code: 7351,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4343,
      foldFull: [ 4343 ]
  }, {
      code: 7352,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4344,
      foldFull: [ 4344 ]
  }, {
      code: 7353,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4345,
      foldFull: [ 4345 ]
  }, {
      code: 7354,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4346,
      foldFull: [ 4346 ]
  }, {
      code: 7357,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4349,
      foldFull: [ 4349 ]
  }, {
      code: 7358,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4350,
      foldFull: [ 4350 ]
  }, {
      code: 7359,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 4351,
      foldFull: [ 4351 ]
  }, {
      code: 7680,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7681,
      foldFull: [ 7681 ]
  }, {
      code: 7682,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7683,
      foldFull: [ 7683 ]
  }, {
      code: 7684,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7685,
      foldFull: [ 7685 ]
  }, {
      code: 7686,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7687,
      foldFull: [ 7687 ]
  }, {
      code: 7688,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7689,
      foldFull: [ 7689 ]
  }, {
      code: 7690,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7691,
      foldFull: [ 7691 ]
  }, {
      code: 7692,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7693,
      foldFull: [ 7693 ]
  }, {
      code: 7694,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7695,
      foldFull: [ 7695 ]
  }, {
      code: 7696,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7697,
      foldFull: [ 7697 ]
  }, {
      code: 7698,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7699,
      foldFull: [ 7699 ]
  }, {
      code: 7700,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7701,
      foldFull: [ 7701 ]
  }, {
      code: 7702,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7703,
      foldFull: [ 7703 ]
  }, {
      code: 7704,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7705,
      foldFull: [ 7705 ]
  }, {
      code: 7706,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7707,
      foldFull: [ 7707 ]
  }, {
      code: 7708,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7709,
      foldFull: [ 7709 ]
  }, {
      code: 7710,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7711,
      foldFull: [ 7711 ]
  }, {
      code: 7712,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7713,
      foldFull: [ 7713 ]
  }, {
      code: 7714,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7715,
      foldFull: [ 7715 ]
  }, {
      code: 7716,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7717,
      foldFull: [ 7717 ]
  }, {
      code: 7718,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7719,
      foldFull: [ 7719 ]
  }, {
      code: 7720,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7721,
      foldFull: [ 7721 ]
  }, {
      code: 7722,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7723,
      foldFull: [ 7723 ]
  }, {
      code: 7724,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7725,
      foldFull: [ 7725 ]
  }, {
      code: 7726,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7727,
      foldFull: [ 7727 ]
  }, {
      code: 7728,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7729,
      foldFull: [ 7729 ]
  }, {
      code: 7730,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7731,
      foldFull: [ 7731 ]
  }, {
      code: 7732,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7733,
      foldFull: [ 7733 ]
  }, {
      code: 7734,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7735,
      foldFull: [ 7735 ]
  }, {
      code: 7736,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7737,
      foldFull: [ 7737 ]
  }, {
      code: 7738,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7739,
      foldFull: [ 7739 ]
  }, {
      code: 7740,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7741,
      foldFull: [ 7741 ]
  }, {
      code: 7742,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7743,
      foldFull: [ 7743 ]
  }, {
      code: 7744,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7745,
      foldFull: [ 7745 ]
  }, {
      code: 7746,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7747,
      foldFull: [ 7747 ]
  }, {
      code: 7748,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7749,
      foldFull: [ 7749 ]
  }, {
      code: 7750,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7751,
      foldFull: [ 7751 ]
  }, {
      code: 7752,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7753,
      foldFull: [ 7753 ]
  }, {
      code: 7754,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7755,
      foldFull: [ 7755 ]
  }, {
      code: 7756,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7757,
      foldFull: [ 7757 ]
  }, {
      code: 7758,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7759,
      foldFull: [ 7759 ]
  }, {
      code: 7760,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7761,
      foldFull: [ 7761 ]
  }, {
      code: 7762,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7763,
      foldFull: [ 7763 ]
  }, {
      code: 7764,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7765,
      foldFull: [ 7765 ]
  }, {
      code: 7766,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7767,
      foldFull: [ 7767 ]
  }, {
      code: 7768,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7769,
      foldFull: [ 7769 ]
  }, {
      code: 7770,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7771,
      foldFull: [ 7771 ]
  }, {
      code: 7772,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7773,
      foldFull: [ 7773 ]
  }, {
      code: 7774,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7775,
      foldFull: [ 7775 ]
  }, {
      code: 7776,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7777,
      foldFull: [ 7777 ]
  }, {
      code: 7778,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7779,
      foldFull: [ 7779 ]
  }, {
      code: 7780,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7781,
      foldFull: [ 7781 ]
  }, {
      code: 7782,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7783,
      foldFull: [ 7783 ]
  }, {
      code: 7784,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7785,
      foldFull: [ 7785 ]
  }, {
      code: 7786,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7787,
      foldFull: [ 7787 ]
  }, {
      code: 7788,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7789,
      foldFull: [ 7789 ]
  }, {
      code: 7790,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7791,
      foldFull: [ 7791 ]
  }, {
      code: 7792,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7793,
      foldFull: [ 7793 ]
  }, {
      code: 7794,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7795,
      foldFull: [ 7795 ]
  }, {
      code: 7796,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7797,
      foldFull: [ 7797 ]
  }, {
      code: 7798,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7799,
      foldFull: [ 7799 ]
  }, {
      code: 7800,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7801,
      foldFull: [ 7801 ]
  }, {
      code: 7802,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7803,
      foldFull: [ 7803 ]
  }, {
      code: 7804,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7805,
      foldFull: [ 7805 ]
  }, {
      code: 7806,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7807,
      foldFull: [ 7807 ]
  }, {
      code: 7808,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7809,
      foldFull: [ 7809 ]
  }, {
      code: 7810,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7811,
      foldFull: [ 7811 ]
  }, {
      code: 7812,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7813,
      foldFull: [ 7813 ]
  }, {
      code: 7814,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7815,
      foldFull: [ 7815 ]
  }, {
      code: 7816,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7817,
      foldFull: [ 7817 ]
  }, {
      code: 7818,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7819,
      foldFull: [ 7819 ]
  }, {
      code: 7820,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7821,
      foldFull: [ 7821 ]
  }, {
      code: 7822,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7823,
      foldFull: [ 7823 ]
  }, {
      code: 7824,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7825,
      foldFull: [ 7825 ]
  }, {
      code: 7826,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7827,
      foldFull: [ 7827 ]
  }, {
      code: 7828,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7829,
      foldFull: [ 7829 ]
  }, {
      code: 7830,
      lower: [ 7830 ],
      title: [ 72, 817 ],
      upper: [ 72, 817 ],
      fold: 0,
      foldFull: [ 104, 817 ]
  }, {
      code: 7830,
      lower: [ 7830 ],
      title: [ 72, 817 ],
      upper: [ 72, 817 ],
      fold: 0,
      foldFull: [ 104, 817 ]
  }, {
      code: 7831,
      lower: [ 7831 ],
      title: [ 84, 776 ],
      upper: [ 84, 776 ],
      fold: 0,
      foldFull: [ 116, 776 ]
  }, {
      code: 7831,
      lower: [ 7831 ],
      title: [ 84, 776 ],
      upper: [ 84, 776 ],
      fold: 0,
      foldFull: [ 116, 776 ]
  }, {
      code: 7832,
      lower: [ 7832 ],
      title: [ 87, 778 ],
      upper: [ 87, 778 ],
      fold: 0,
      foldFull: [ 119, 778 ]
  }, {
      code: 7832,
      lower: [ 7832 ],
      title: [ 87, 778 ],
      upper: [ 87, 778 ],
      fold: 0,
      foldFull: [ 119, 778 ]
  }, {
      code: 7833,
      lower: [ 7833 ],
      title: [ 89, 778 ],
      upper: [ 89, 778 ],
      fold: 0,
      foldFull: [ 121, 778 ]
  }, {
      code: 7833,
      lower: [ 7833 ],
      title: [ 89, 778 ],
      upper: [ 89, 778 ],
      fold: 0,
      foldFull: [ 121, 778 ]
  }, {
      code: 7834,
      lower: [ 7834 ],
      title: [ 65, 702 ],
      upper: [ 65, 702 ],
      fold: 0,
      foldFull: [ 97, 702 ]
  }, {
      code: 7834,
      lower: [ 7834 ],
      title: [ 65, 702 ],
      upper: [ 65, 702 ],
      fold: 0,
      foldFull: [ 97, 702 ]
  }, {
      code: 7835,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7777,
      foldFull: [ 7777 ]
  }, {
      code: 7838,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 223,
      foldFull: [ 115, 115 ]
  }, {
      code: 7840,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7841,
      foldFull: [ 7841 ]
  }, {
      code: 7842,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7843,
      foldFull: [ 7843 ]
  }, {
      code: 7844,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7845,
      foldFull: [ 7845 ]
  }, {
      code: 7846,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7847,
      foldFull: [ 7847 ]
  }, {
      code: 7848,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7849,
      foldFull: [ 7849 ]
  }, {
      code: 7850,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7851,
      foldFull: [ 7851 ]
  }, {
      code: 7852,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7853,
      foldFull: [ 7853 ]
  }, {
      code: 7854,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7855,
      foldFull: [ 7855 ]
  }, {
      code: 7856,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7857,
      foldFull: [ 7857 ]
  }, {
      code: 7858,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7859,
      foldFull: [ 7859 ]
  }, {
      code: 7860,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7861,
      foldFull: [ 7861 ]
  }, {
      code: 7862,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7863,
      foldFull: [ 7863 ]
  }, {
      code: 7864,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7865,
      foldFull: [ 7865 ]
  }, {
      code: 7866,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7867,
      foldFull: [ 7867 ]
  }, {
      code: 7868,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7869,
      foldFull: [ 7869 ]
  }, {
      code: 7870,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7871,
      foldFull: [ 7871 ]
  }, {
      code: 7872,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7873,
      foldFull: [ 7873 ]
  }, {
      code: 7874,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7875,
      foldFull: [ 7875 ]
  }, {
      code: 7876,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7877,
      foldFull: [ 7877 ]
  }, {
      code: 7878,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7879,
      foldFull: [ 7879 ]
  }, {
      code: 7880,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7881,
      foldFull: [ 7881 ]
  }, {
      code: 7882,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7883,
      foldFull: [ 7883 ]
  }, {
      code: 7884,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7885,
      foldFull: [ 7885 ]
  }, {
      code: 7886,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7887,
      foldFull: [ 7887 ]
  }, {
      code: 7888,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7889,
      foldFull: [ 7889 ]
  }, {
      code: 7890,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7891,
      foldFull: [ 7891 ]
  }, {
      code: 7892,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7893,
      foldFull: [ 7893 ]
  }, {
      code: 7894,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7895,
      foldFull: [ 7895 ]
  }, {
      code: 7896,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7897,
      foldFull: [ 7897 ]
  }, {
      code: 7898,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7899,
      foldFull: [ 7899 ]
  }, {
      code: 7900,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7901,
      foldFull: [ 7901 ]
  }, {
      code: 7902,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7903,
      foldFull: [ 7903 ]
  }, {
      code: 7904,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7905,
      foldFull: [ 7905 ]
  }, {
      code: 7906,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7907,
      foldFull: [ 7907 ]
  }, {
      code: 7908,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7909,
      foldFull: [ 7909 ]
  }, {
      code: 7910,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7911,
      foldFull: [ 7911 ]
  }, {
      code: 7912,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7913,
      foldFull: [ 7913 ]
  }, {
      code: 7914,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7915,
      foldFull: [ 7915 ]
  }, {
      code: 7916,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7917,
      foldFull: [ 7917 ]
  }, {
      code: 7918,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7919,
      foldFull: [ 7919 ]
  }, {
      code: 7920,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7921,
      foldFull: [ 7921 ]
  }, {
      code: 7922,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7923,
      foldFull: [ 7923 ]
  }, {
      code: 7924,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7925,
      foldFull: [ 7925 ]
  }, {
      code: 7926,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7927,
      foldFull: [ 7927 ]
  }, {
      code: 7928,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7929,
      foldFull: [ 7929 ]
  }, {
      code: 7930,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7931,
      foldFull: [ 7931 ]
  }, {
      code: 7932,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7933,
      foldFull: [ 7933 ]
  }, {
      code: 7934,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7935,
      foldFull: [ 7935 ]
  }, {
      code: 7944,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7936,
      foldFull: [ 7936 ]
  }, {
      code: 7945,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7937,
      foldFull: [ 7937 ]
  }, {
      code: 7946,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7938,
      foldFull: [ 7938 ]
  }, {
      code: 7947,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7939,
      foldFull: [ 7939 ]
  }, {
      code: 7948,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7940,
      foldFull: [ 7940 ]
  }, {
      code: 7949,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7941,
      foldFull: [ 7941 ]
  }, {
      code: 7950,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7942,
      foldFull: [ 7942 ]
  }, {
      code: 7951,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7943,
      foldFull: [ 7943 ]
  }, {
      code: 7960,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7952,
      foldFull: [ 7952 ]
  }, {
      code: 7961,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7953,
      foldFull: [ 7953 ]
  }, {
      code: 7962,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7954,
      foldFull: [ 7954 ]
  }, {
      code: 7963,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7955,
      foldFull: [ 7955 ]
  }, {
      code: 7964,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7956,
      foldFull: [ 7956 ]
  }, {
      code: 7965,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7957,
      foldFull: [ 7957 ]
  }, {
      code: 7976,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7968,
      foldFull: [ 7968 ]
  }, {
      code: 7977,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7969,
      foldFull: [ 7969 ]
  }, {
      code: 7978,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7970,
      foldFull: [ 7970 ]
  }, {
      code: 7979,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7971,
      foldFull: [ 7971 ]
  }, {
      code: 7980,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7972,
      foldFull: [ 7972 ]
  }, {
      code: 7981,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7973,
      foldFull: [ 7973 ]
  }, {
      code: 7982,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7974,
      foldFull: [ 7974 ]
  }, {
      code: 7983,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7975,
      foldFull: [ 7975 ]
  }, {
      code: 7992,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7984,
      foldFull: [ 7984 ]
  }, {
      code: 7993,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7985,
      foldFull: [ 7985 ]
  }, {
      code: 7994,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7986,
      foldFull: [ 7986 ]
  }, {
      code: 7995,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7987,
      foldFull: [ 7987 ]
  }, {
      code: 7996,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7988,
      foldFull: [ 7988 ]
  }, {
      code: 7997,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7989,
      foldFull: [ 7989 ]
  }, {
      code: 7998,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7990,
      foldFull: [ 7990 ]
  }, {
      code: 7999,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7991,
      foldFull: [ 7991 ]
  }, {
      code: 8008,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8000,
      foldFull: [ 8000 ]
  }, {
      code: 8009,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8001,
      foldFull: [ 8001 ]
  }, {
      code: 8010,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8002,
      foldFull: [ 8002 ]
  }, {
      code: 8011,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8003,
      foldFull: [ 8003 ]
  }, {
      code: 8012,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8004,
      foldFull: [ 8004 ]
  }, {
      code: 8013,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8005,
      foldFull: [ 8005 ]
  }, {
      code: 8016,
      lower: [ 8016 ],
      title: [ 933, 787 ],
      upper: [ 933, 787 ],
      fold: 0,
      foldFull: [ 965, 787 ]
  }, {
      code: 8016,
      lower: [ 8016 ],
      title: [ 933, 787 ],
      upper: [ 933, 787 ],
      fold: 0,
      foldFull: [ 965, 787 ]
  }, {
      code: 8018,
      lower: [ 8018 ],
      title: [ 933, 787, 768 ],
      upper: [ 933, 787, 768 ],
      fold: 0,
      foldFull: [ 965, 787, 768 ]
  }, {
      code: 8018,
      lower: [ 8018 ],
      title: [ 933, 787, 768 ],
      upper: [ 933, 787, 768 ],
      fold: 0,
      foldFull: [ 965, 787, 768 ]
  }, {
      code: 8020,
      lower: [ 8020 ],
      title: [ 933, 787, 769 ],
      upper: [ 933, 787, 769 ],
      fold: 0,
      foldFull: [ 965, 787, 769 ]
  }, {
      code: 8020,
      lower: [ 8020 ],
      title: [ 933, 787, 769 ],
      upper: [ 933, 787, 769 ],
      fold: 0,
      foldFull: [ 965, 787, 769 ]
  }, {
      code: 8022,
      lower: [ 8022 ],
      title: [ 933, 787, 834 ],
      upper: [ 933, 787, 834 ],
      fold: 0,
      foldFull: [ 965, 787, 834 ]
  }, {
      code: 8022,
      lower: [ 8022 ],
      title: [ 933, 787, 834 ],
      upper: [ 933, 787, 834 ],
      fold: 0,
      foldFull: [ 965, 787, 834 ]
  }, {
      code: 8025,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8017,
      foldFull: [ 8017 ]
  }, {
      code: 8027,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8019,
      foldFull: [ 8019 ]
  }, {
      code: 8029,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8021,
      foldFull: [ 8021 ]
  }, {
      code: 8031,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8023,
      foldFull: [ 8023 ]
  }, {
      code: 8040,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8032,
      foldFull: [ 8032 ]
  }, {
      code: 8041,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8033,
      foldFull: [ 8033 ]
  }, {
      code: 8042,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8034,
      foldFull: [ 8034 ]
  }, {
      code: 8043,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8035,
      foldFull: [ 8035 ]
  }, {
      code: 8044,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8036,
      foldFull: [ 8036 ]
  }, {
      code: 8045,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8037,
      foldFull: [ 8037 ]
  }, {
      code: 8046,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8038,
      foldFull: [ 8038 ]
  }, {
      code: 8047,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8039,
      foldFull: [ 8039 ]
  }, {
      code: 8064,
      lower: [ 8064 ],
      title: [ 8072 ],
      upper: [ 7944, 921 ],
      fold: 0,
      foldFull: [ 7936, 953 ]
  }, {
      code: 8064,
      lower: [ 8064 ],
      title: [ 8072 ],
      upper: [ 7944, 921 ],
      fold: 0,
      foldFull: [ 7936, 953 ]
  }, {
      code: 8065,
      lower: [ 8065 ],
      title: [ 8073 ],
      upper: [ 7945, 921 ],
      fold: 0,
      foldFull: [ 7937, 953 ]
  }, {
      code: 8065,
      lower: [ 8065 ],
      title: [ 8073 ],
      upper: [ 7945, 921 ],
      fold: 0,
      foldFull: [ 7937, 953 ]
  }, {
      code: 8066,
      lower: [ 8066 ],
      title: [ 8074 ],
      upper: [ 7946, 921 ],
      fold: 0,
      foldFull: [ 7938, 953 ]
  }, {
      code: 8066,
      lower: [ 8066 ],
      title: [ 8074 ],
      upper: [ 7946, 921 ],
      fold: 0,
      foldFull: [ 7938, 953 ]
  }, {
      code: 8067,
      lower: [ 8067 ],
      title: [ 8075 ],
      upper: [ 7947, 921 ],
      fold: 0,
      foldFull: [ 7939, 953 ]
  }, {
      code: 8067,
      lower: [ 8067 ],
      title: [ 8075 ],
      upper: [ 7947, 921 ],
      fold: 0,
      foldFull: [ 7939, 953 ]
  }, {
      code: 8068,
      lower: [ 8068 ],
      title: [ 8076 ],
      upper: [ 7948, 921 ],
      fold: 0,
      foldFull: [ 7940, 953 ]
  }, {
      code: 8068,
      lower: [ 8068 ],
      title: [ 8076 ],
      upper: [ 7948, 921 ],
      fold: 0,
      foldFull: [ 7940, 953 ]
  }, {
      code: 8069,
      lower: [ 8069 ],
      title: [ 8077 ],
      upper: [ 7949, 921 ],
      fold: 0,
      foldFull: [ 7941, 953 ]
  }, {
      code: 8069,
      lower: [ 8069 ],
      title: [ 8077 ],
      upper: [ 7949, 921 ],
      fold: 0,
      foldFull: [ 7941, 953 ]
  }, {
      code: 8070,
      lower: [ 8070 ],
      title: [ 8078 ],
      upper: [ 7950, 921 ],
      fold: 0,
      foldFull: [ 7942, 953 ]
  }, {
      code: 8070,
      lower: [ 8070 ],
      title: [ 8078 ],
      upper: [ 7950, 921 ],
      fold: 0,
      foldFull: [ 7942, 953 ]
  }, {
      code: 8071,
      lower: [ 8071 ],
      title: [ 8079 ],
      upper: [ 7951, 921 ],
      fold: 0,
      foldFull: [ 7943, 953 ]
  }, {
      code: 8071,
      lower: [ 8071 ],
      title: [ 8079 ],
      upper: [ 7951, 921 ],
      fold: 0,
      foldFull: [ 7943, 953 ]
  }, {
      code: 8072,
      lower: [ 8064 ],
      title: [ 8072 ],
      upper: [ 7944, 921 ],
      fold: 8064,
      foldFull: [ 7936, 953 ]
  }, {
      code: 8072,
      lower: [ 8064 ],
      title: [ 8072 ],
      upper: [ 7944, 921 ],
      fold: 8064,
      foldFull: [ 7936, 953 ]
  }, {
      code: 8073,
      lower: [ 8065 ],
      title: [ 8073 ],
      upper: [ 7945, 921 ],
      fold: 8065,
      foldFull: [ 7937, 953 ]
  }, {
      code: 8073,
      lower: [ 8065 ],
      title: [ 8073 ],
      upper: [ 7945, 921 ],
      fold: 8065,
      foldFull: [ 7937, 953 ]
  }, {
      code: 8074,
      lower: [ 8066 ],
      title: [ 8074 ],
      upper: [ 7946, 921 ],
      fold: 8066,
      foldFull: [ 7938, 953 ]
  }, {
      code: 8074,
      lower: [ 8066 ],
      title: [ 8074 ],
      upper: [ 7946, 921 ],
      fold: 8066,
      foldFull: [ 7938, 953 ]
  }, {
      code: 8075,
      lower: [ 8067 ],
      title: [ 8075 ],
      upper: [ 7947, 921 ],
      fold: 8067,
      foldFull: [ 7939, 953 ]
  }, {
      code: 8075,
      lower: [ 8067 ],
      title: [ 8075 ],
      upper: [ 7947, 921 ],
      fold: 8067,
      foldFull: [ 7939, 953 ]
  }, {
      code: 8076,
      lower: [ 8068 ],
      title: [ 8076 ],
      upper: [ 7948, 921 ],
      fold: 8068,
      foldFull: [ 7940, 953 ]
  }, {
      code: 8076,
      lower: [ 8068 ],
      title: [ 8076 ],
      upper: [ 7948, 921 ],
      fold: 8068,
      foldFull: [ 7940, 953 ]
  }, {
      code: 8077,
      lower: [ 8069 ],
      title: [ 8077 ],
      upper: [ 7949, 921 ],
      fold: 8069,
      foldFull: [ 7941, 953 ]
  }, {
      code: 8077,
      lower: [ 8069 ],
      title: [ 8077 ],
      upper: [ 7949, 921 ],
      fold: 8069,
      foldFull: [ 7941, 953 ]
  }, {
      code: 8078,
      lower: [ 8070 ],
      title: [ 8078 ],
      upper: [ 7950, 921 ],
      fold: 8070,
      foldFull: [ 7942, 953 ]
  }, {
      code: 8078,
      lower: [ 8070 ],
      title: [ 8078 ],
      upper: [ 7950, 921 ],
      fold: 8070,
      foldFull: [ 7942, 953 ]
  }, {
      code: 8079,
      lower: [ 8071 ],
      title: [ 8079 ],
      upper: [ 7951, 921 ],
      fold: 8071,
      foldFull: [ 7943, 953 ]
  }, {
      code: 8079,
      lower: [ 8071 ],
      title: [ 8079 ],
      upper: [ 7951, 921 ],
      fold: 8071,
      foldFull: [ 7943, 953 ]
  }, {
      code: 8080,
      lower: [ 8080 ],
      title: [ 8088 ],
      upper: [ 7976, 921 ],
      fold: 0,
      foldFull: [ 7968, 953 ]
  }, {
      code: 8080,
      lower: [ 8080 ],
      title: [ 8088 ],
      upper: [ 7976, 921 ],
      fold: 0,
      foldFull: [ 7968, 953 ]
  }, {
      code: 8081,
      lower: [ 8081 ],
      title: [ 8089 ],
      upper: [ 7977, 921 ],
      fold: 0,
      foldFull: [ 7969, 953 ]
  }, {
      code: 8081,
      lower: [ 8081 ],
      title: [ 8089 ],
      upper: [ 7977, 921 ],
      fold: 0,
      foldFull: [ 7969, 953 ]
  }, {
      code: 8082,
      lower: [ 8082 ],
      title: [ 8090 ],
      upper: [ 7978, 921 ],
      fold: 0,
      foldFull: [ 7970, 953 ]
  }, {
      code: 8082,
      lower: [ 8082 ],
      title: [ 8090 ],
      upper: [ 7978, 921 ],
      fold: 0,
      foldFull: [ 7970, 953 ]
  }, {
      code: 8083,
      lower: [ 8083 ],
      title: [ 8091 ],
      upper: [ 7979, 921 ],
      fold: 0,
      foldFull: [ 7971, 953 ]
  }, {
      code: 8083,
      lower: [ 8083 ],
      title: [ 8091 ],
      upper: [ 7979, 921 ],
      fold: 0,
      foldFull: [ 7971, 953 ]
  }, {
      code: 8084,
      lower: [ 8084 ],
      title: [ 8092 ],
      upper: [ 7980, 921 ],
      fold: 0,
      foldFull: [ 7972, 953 ]
  }, {
      code: 8084,
      lower: [ 8084 ],
      title: [ 8092 ],
      upper: [ 7980, 921 ],
      fold: 0,
      foldFull: [ 7972, 953 ]
  }, {
      code: 8085,
      lower: [ 8085 ],
      title: [ 8093 ],
      upper: [ 7981, 921 ],
      fold: 0,
      foldFull: [ 7973, 953 ]
  }, {
      code: 8085,
      lower: [ 8085 ],
      title: [ 8093 ],
      upper: [ 7981, 921 ],
      fold: 0,
      foldFull: [ 7973, 953 ]
  }, {
      code: 8086,
      lower: [ 8086 ],
      title: [ 8094 ],
      upper: [ 7982, 921 ],
      fold: 0,
      foldFull: [ 7974, 953 ]
  }, {
      code: 8086,
      lower: [ 8086 ],
      title: [ 8094 ],
      upper: [ 7982, 921 ],
      fold: 0,
      foldFull: [ 7974, 953 ]
  }, {
      code: 8087,
      lower: [ 8087 ],
      title: [ 8095 ],
      upper: [ 7983, 921 ],
      fold: 0,
      foldFull: [ 7975, 953 ]
  }, {
      code: 8087,
      lower: [ 8087 ],
      title: [ 8095 ],
      upper: [ 7983, 921 ],
      fold: 0,
      foldFull: [ 7975, 953 ]
  }, {
      code: 8088,
      lower: [ 8080 ],
      title: [ 8088 ],
      upper: [ 7976, 921 ],
      fold: 8080,
      foldFull: [ 7968, 953 ]
  }, {
      code: 8088,
      lower: [ 8080 ],
      title: [ 8088 ],
      upper: [ 7976, 921 ],
      fold: 8080,
      foldFull: [ 7968, 953 ]
  }, {
      code: 8089,
      lower: [ 8081 ],
      title: [ 8089 ],
      upper: [ 7977, 921 ],
      fold: 8081,
      foldFull: [ 7969, 953 ]
  }, {
      code: 8089,
      lower: [ 8081 ],
      title: [ 8089 ],
      upper: [ 7977, 921 ],
      fold: 8081,
      foldFull: [ 7969, 953 ]
  }, {
      code: 8090,
      lower: [ 8082 ],
      title: [ 8090 ],
      upper: [ 7978, 921 ],
      fold: 8082,
      foldFull: [ 7970, 953 ]
  }, {
      code: 8090,
      lower: [ 8082 ],
      title: [ 8090 ],
      upper: [ 7978, 921 ],
      fold: 8082,
      foldFull: [ 7970, 953 ]
  }, {
      code: 8091,
      lower: [ 8083 ],
      title: [ 8091 ],
      upper: [ 7979, 921 ],
      fold: 8083,
      foldFull: [ 7971, 953 ]
  }, {
      code: 8091,
      lower: [ 8083 ],
      title: [ 8091 ],
      upper: [ 7979, 921 ],
      fold: 8083,
      foldFull: [ 7971, 953 ]
  }, {
      code: 8092,
      lower: [ 8084 ],
      title: [ 8092 ],
      upper: [ 7980, 921 ],
      fold: 8084,
      foldFull: [ 7972, 953 ]
  }, {
      code: 8092,
      lower: [ 8084 ],
      title: [ 8092 ],
      upper: [ 7980, 921 ],
      fold: 8084,
      foldFull: [ 7972, 953 ]
  }, {
      code: 8093,
      lower: [ 8085 ],
      title: [ 8093 ],
      upper: [ 7981, 921 ],
      fold: 8085,
      foldFull: [ 7973, 953 ]
  }, {
      code: 8093,
      lower: [ 8085 ],
      title: [ 8093 ],
      upper: [ 7981, 921 ],
      fold: 8085,
      foldFull: [ 7973, 953 ]
  }, {
      code: 8094,
      lower: [ 8086 ],
      title: [ 8094 ],
      upper: [ 7982, 921 ],
      fold: 8086,
      foldFull: [ 7974, 953 ]
  }, {
      code: 8094,
      lower: [ 8086 ],
      title: [ 8094 ],
      upper: [ 7982, 921 ],
      fold: 8086,
      foldFull: [ 7974, 953 ]
  }, {
      code: 8095,
      lower: [ 8087 ],
      title: [ 8095 ],
      upper: [ 7983, 921 ],
      fold: 8087,
      foldFull: [ 7975, 953 ]
  }, {
      code: 8095,
      lower: [ 8087 ],
      title: [ 8095 ],
      upper: [ 7983, 921 ],
      fold: 8087,
      foldFull: [ 7975, 953 ]
  }, {
      code: 8096,
      lower: [ 8096 ],
      title: [ 8104 ],
      upper: [ 8040, 921 ],
      fold: 0,
      foldFull: [ 8032, 953 ]
  }, {
      code: 8096,
      lower: [ 8096 ],
      title: [ 8104 ],
      upper: [ 8040, 921 ],
      fold: 0,
      foldFull: [ 8032, 953 ]
  }, {
      code: 8097,
      lower: [ 8097 ],
      title: [ 8105 ],
      upper: [ 8041, 921 ],
      fold: 0,
      foldFull: [ 8033, 953 ]
  }, {
      code: 8097,
      lower: [ 8097 ],
      title: [ 8105 ],
      upper: [ 8041, 921 ],
      fold: 0,
      foldFull: [ 8033, 953 ]
  }, {
      code: 8098,
      lower: [ 8098 ],
      title: [ 8106 ],
      upper: [ 8042, 921 ],
      fold: 0,
      foldFull: [ 8034, 953 ]
  }, {
      code: 8098,
      lower: [ 8098 ],
      title: [ 8106 ],
      upper: [ 8042, 921 ],
      fold: 0,
      foldFull: [ 8034, 953 ]
  }, {
      code: 8099,
      lower: [ 8099 ],
      title: [ 8107 ],
      upper: [ 8043, 921 ],
      fold: 0,
      foldFull: [ 8035, 953 ]
  }, {
      code: 8099,
      lower: [ 8099 ],
      title: [ 8107 ],
      upper: [ 8043, 921 ],
      fold: 0,
      foldFull: [ 8035, 953 ]
  }, {
      code: 8100,
      lower: [ 8100 ],
      title: [ 8108 ],
      upper: [ 8044, 921 ],
      fold: 0,
      foldFull: [ 8036, 953 ]
  }, {
      code: 8100,
      lower: [ 8100 ],
      title: [ 8108 ],
      upper: [ 8044, 921 ],
      fold: 0,
      foldFull: [ 8036, 953 ]
  }, {
      code: 8101,
      lower: [ 8101 ],
      title: [ 8109 ],
      upper: [ 8045, 921 ],
      fold: 0,
      foldFull: [ 8037, 953 ]
  }, {
      code: 8101,
      lower: [ 8101 ],
      title: [ 8109 ],
      upper: [ 8045, 921 ],
      fold: 0,
      foldFull: [ 8037, 953 ]
  }, {
      code: 8102,
      lower: [ 8102 ],
      title: [ 8110 ],
      upper: [ 8046, 921 ],
      fold: 0,
      foldFull: [ 8038, 953 ]
  }, {
      code: 8102,
      lower: [ 8102 ],
      title: [ 8110 ],
      upper: [ 8046, 921 ],
      fold: 0,
      foldFull: [ 8038, 953 ]
  }, {
      code: 8103,
      lower: [ 8103 ],
      title: [ 8111 ],
      upper: [ 8047, 921 ],
      fold: 0,
      foldFull: [ 8039, 953 ]
  }, {
      code: 8103,
      lower: [ 8103 ],
      title: [ 8111 ],
      upper: [ 8047, 921 ],
      fold: 0,
      foldFull: [ 8039, 953 ]
  }, {
      code: 8104,
      lower: [ 8096 ],
      title: [ 8104 ],
      upper: [ 8040, 921 ],
      fold: 8096,
      foldFull: [ 8032, 953 ]
  }, {
      code: 8104,
      lower: [ 8096 ],
      title: [ 8104 ],
      upper: [ 8040, 921 ],
      fold: 8096,
      foldFull: [ 8032, 953 ]
  }, {
      code: 8105,
      lower: [ 8097 ],
      title: [ 8105 ],
      upper: [ 8041, 921 ],
      fold: 8097,
      foldFull: [ 8033, 953 ]
  }, {
      code: 8105,
      lower: [ 8097 ],
      title: [ 8105 ],
      upper: [ 8041, 921 ],
      fold: 8097,
      foldFull: [ 8033, 953 ]
  }, {
      code: 8106,
      lower: [ 8098 ],
      title: [ 8106 ],
      upper: [ 8042, 921 ],
      fold: 8098,
      foldFull: [ 8034, 953 ]
  }, {
      code: 8106,
      lower: [ 8098 ],
      title: [ 8106 ],
      upper: [ 8042, 921 ],
      fold: 8098,
      foldFull: [ 8034, 953 ]
  }, {
      code: 8107,
      lower: [ 8099 ],
      title: [ 8107 ],
      upper: [ 8043, 921 ],
      fold: 8099,
      foldFull: [ 8035, 953 ]
  }, {
      code: 8107,
      lower: [ 8099 ],
      title: [ 8107 ],
      upper: [ 8043, 921 ],
      fold: 8099,
      foldFull: [ 8035, 953 ]
  }, {
      code: 8108,
      lower: [ 8100 ],
      title: [ 8108 ],
      upper: [ 8044, 921 ],
      fold: 8100,
      foldFull: [ 8036, 953 ]
  }, {
      code: 8108,
      lower: [ 8100 ],
      title: [ 8108 ],
      upper: [ 8044, 921 ],
      fold: 8100,
      foldFull: [ 8036, 953 ]
  }, {
      code: 8109,
      lower: [ 8101 ],
      title: [ 8109 ],
      upper: [ 8045, 921 ],
      fold: 8101,
      foldFull: [ 8037, 953 ]
  }, {
      code: 8109,
      lower: [ 8101 ],
      title: [ 8109 ],
      upper: [ 8045, 921 ],
      fold: 8101,
      foldFull: [ 8037, 953 ]
  }, {
      code: 8110,
      lower: [ 8102 ],
      title: [ 8110 ],
      upper: [ 8046, 921 ],
      fold: 8102,
      foldFull: [ 8038, 953 ]
  }, {
      code: 8110,
      lower: [ 8102 ],
      title: [ 8110 ],
      upper: [ 8046, 921 ],
      fold: 8102,
      foldFull: [ 8038, 953 ]
  }, {
      code: 8111,
      lower: [ 8103 ],
      title: [ 8111 ],
      upper: [ 8047, 921 ],
      fold: 8103,
      foldFull: [ 8039, 953 ]
  }, {
      code: 8111,
      lower: [ 8103 ],
      title: [ 8111 ],
      upper: [ 8047, 921 ],
      fold: 8103,
      foldFull: [ 8039, 953 ]
  }, {
      code: 8114,
      lower: [ 8114 ],
      title: [ 8122, 837 ],
      upper: [ 8122, 921 ],
      fold: 0,
      foldFull: [ 8048, 953 ]
  }, {
      code: 8114,
      lower: [ 8114 ],
      title: [ 8122, 837 ],
      upper: [ 8122, 921 ],
      fold: 0,
      foldFull: [ 8048, 953 ]
  }, {
      code: 8115,
      lower: [ 8115 ],
      title: [ 8124 ],
      upper: [ 913, 921 ],
      fold: 0,
      foldFull: [ 945, 953 ]
  }, {
      code: 8115,
      lower: [ 8115 ],
      title: [ 8124 ],
      upper: [ 913, 921 ],
      fold: 0,
      foldFull: [ 945, 953 ]
  }, {
      code: 8116,
      lower: [ 8116 ],
      title: [ 902, 837 ],
      upper: [ 902, 921 ],
      fold: 0,
      foldFull: [ 940, 953 ]
  }, {
      code: 8116,
      lower: [ 8116 ],
      title: [ 902, 837 ],
      upper: [ 902, 921 ],
      fold: 0,
      foldFull: [ 940, 953 ]
  }, {
      code: 8118,
      lower: [ 8118 ],
      title: [ 913, 834 ],
      upper: [ 913, 834 ],
      fold: 0,
      foldFull: [ 945, 834 ]
  }, {
      code: 8118,
      lower: [ 8118 ],
      title: [ 913, 834 ],
      upper: [ 913, 834 ],
      fold: 0,
      foldFull: [ 945, 834 ]
  }, {
      code: 8119,
      lower: [ 8119 ],
      title: [ 913, 834, 837 ],
      upper: [ 913, 834, 921 ],
      fold: 0,
      foldFull: [ 945, 834, 953 ]
  }, {
      code: 8119,
      lower: [ 8119 ],
      title: [ 913, 834, 837 ],
      upper: [ 913, 834, 921 ],
      fold: 0,
      foldFull: [ 945, 834, 953 ]
  }, {
      code: 8120,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8112,
      foldFull: [ 8112 ]
  }, {
      code: 8121,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8113,
      foldFull: [ 8113 ]
  }, {
      code: 8122,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8048,
      foldFull: [ 8048 ]
  }, {
      code: 8123,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8049,
      foldFull: [ 8049 ]
  }, {
      code: 8124,
      lower: [ 8115 ],
      title: [ 8124 ],
      upper: [ 913, 921 ],
      fold: 8115,
      foldFull: [ 945, 953 ]
  }, {
      code: 8124,
      lower: [ 8115 ],
      title: [ 8124 ],
      upper: [ 913, 921 ],
      fold: 8115,
      foldFull: [ 945, 953 ]
  }, {
      code: 8126,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 953,
      foldFull: [ 953 ]
  }, {
      code: 8130,
      lower: [ 8130 ],
      title: [ 8138, 837 ],
      upper: [ 8138, 921 ],
      fold: 0,
      foldFull: [ 8052, 953 ]
  }, {
      code: 8130,
      lower: [ 8130 ],
      title: [ 8138, 837 ],
      upper: [ 8138, 921 ],
      fold: 0,
      foldFull: [ 8052, 953 ]
  }, {
      code: 8131,
      lower: [ 8131 ],
      title: [ 8140 ],
      upper: [ 919, 921 ],
      fold: 0,
      foldFull: [ 951, 953 ]
  }, {
      code: 8131,
      lower: [ 8131 ],
      title: [ 8140 ],
      upper: [ 919, 921 ],
      fold: 0,
      foldFull: [ 951, 953 ]
  }, {
      code: 8132,
      lower: [ 8132 ],
      title: [ 905, 837 ],
      upper: [ 905, 921 ],
      fold: 0,
      foldFull: [ 942, 953 ]
  }, {
      code: 8132,
      lower: [ 8132 ],
      title: [ 905, 837 ],
      upper: [ 905, 921 ],
      fold: 0,
      foldFull: [ 942, 953 ]
  }, {
      code: 8134,
      lower: [ 8134 ],
      title: [ 919, 834 ],
      upper: [ 919, 834 ],
      fold: 0,
      foldFull: [ 951, 834 ]
  }, {
      code: 8134,
      lower: [ 8134 ],
      title: [ 919, 834 ],
      upper: [ 919, 834 ],
      fold: 0,
      foldFull: [ 951, 834 ]
  }, {
      code: 8135,
      lower: [ 8135 ],
      title: [ 919, 834, 837 ],
      upper: [ 919, 834, 921 ],
      fold: 0,
      foldFull: [ 951, 834, 953 ]
  }, {
      code: 8135,
      lower: [ 8135 ],
      title: [ 919, 834, 837 ],
      upper: [ 919, 834, 921 ],
      fold: 0,
      foldFull: [ 951, 834, 953 ]
  }, {
      code: 8136,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8050,
      foldFull: [ 8050 ]
  }, {
      code: 8137,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8051,
      foldFull: [ 8051 ]
  }, {
      code: 8138,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8052,
      foldFull: [ 8052 ]
  }, {
      code: 8139,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8053,
      foldFull: [ 8053 ]
  }, {
      code: 8140,
      lower: [ 8131 ],
      title: [ 8140 ],
      upper: [ 919, 921 ],
      fold: 8131,
      foldFull: [ 951, 953 ]
  }, {
      code: 8140,
      lower: [ 8131 ],
      title: [ 8140 ],
      upper: [ 919, 921 ],
      fold: 8131,
      foldFull: [ 951, 953 ]
  }, {
      code: 8146,
      lower: [ 8146 ],
      title: [ 921, 776, 768 ],
      upper: [ 921, 776, 768 ],
      fold: 0,
      foldFull: [ 953, 776, 768 ]
  }, {
      code: 8146,
      lower: [ 8146 ],
      title: [ 921, 776, 768 ],
      upper: [ 921, 776, 768 ],
      fold: 0,
      foldFull: [ 953, 776, 768 ]
  }, {
      code: 8147,
      lower: [ 8147 ],
      title: [ 921, 776, 769 ],
      upper: [ 921, 776, 769 ],
      fold: 0,
      foldFull: [ 953, 776, 769 ]
  }, {
      code: 8147,
      lower: [ 8147 ],
      title: [ 921, 776, 769 ],
      upper: [ 921, 776, 769 ],
      fold: 0,
      foldFull: [ 953, 776, 769 ]
  }, {
      code: 8150,
      lower: [ 8150 ],
      title: [ 921, 834 ],
      upper: [ 921, 834 ],
      fold: 0,
      foldFull: [ 953, 834 ]
  }, {
      code: 8150,
      lower: [ 8150 ],
      title: [ 921, 834 ],
      upper: [ 921, 834 ],
      fold: 0,
      foldFull: [ 953, 834 ]
  }, {
      code: 8151,
      lower: [ 8151 ],
      title: [ 921, 776, 834 ],
      upper: [ 921, 776, 834 ],
      fold: 0,
      foldFull: [ 953, 776, 834 ]
  }, {
      code: 8151,
      lower: [ 8151 ],
      title: [ 921, 776, 834 ],
      upper: [ 921, 776, 834 ],
      fold: 0,
      foldFull: [ 953, 776, 834 ]
  }, {
      code: 8152,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8144,
      foldFull: [ 8144 ]
  }, {
      code: 8153,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8145,
      foldFull: [ 8145 ]
  }, {
      code: 8154,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8054,
      foldFull: [ 8054 ]
  }, {
      code: 8155,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8055,
      foldFull: [ 8055 ]
  }, {
      code: 8162,
      lower: [ 8162 ],
      title: [ 933, 776, 768 ],
      upper: [ 933, 776, 768 ],
      fold: 0,
      foldFull: [ 965, 776, 768 ]
  }, {
      code: 8162,
      lower: [ 8162 ],
      title: [ 933, 776, 768 ],
      upper: [ 933, 776, 768 ],
      fold: 0,
      foldFull: [ 965, 776, 768 ]
  }, {
      code: 8163,
      lower: [ 8163 ],
      title: [ 933, 776, 769 ],
      upper: [ 933, 776, 769 ],
      fold: 0,
      foldFull: [ 965, 776, 769 ]
  }, {
      code: 8163,
      lower: [ 8163 ],
      title: [ 933, 776, 769 ],
      upper: [ 933, 776, 769 ],
      fold: 0,
      foldFull: [ 965, 776, 769 ]
  }, {
      code: 8164,
      lower: [ 8164 ],
      title: [ 929, 787 ],
      upper: [ 929, 787 ],
      fold: 0,
      foldFull: [ 961, 787 ]
  }, {
      code: 8164,
      lower: [ 8164 ],
      title: [ 929, 787 ],
      upper: [ 929, 787 ],
      fold: 0,
      foldFull: [ 961, 787 ]
  }, {
      code: 8166,
      lower: [ 8166 ],
      title: [ 933, 834 ],
      upper: [ 933, 834 ],
      fold: 0,
      foldFull: [ 965, 834 ]
  }, {
      code: 8166,
      lower: [ 8166 ],
      title: [ 933, 834 ],
      upper: [ 933, 834 ],
      fold: 0,
      foldFull: [ 965, 834 ]
  }, {
      code: 8167,
      lower: [ 8167 ],
      title: [ 933, 776, 834 ],
      upper: [ 933, 776, 834 ],
      fold: 0,
      foldFull: [ 965, 776, 834 ]
  }, {
      code: 8167,
      lower: [ 8167 ],
      title: [ 933, 776, 834 ],
      upper: [ 933, 776, 834 ],
      fold: 0,
      foldFull: [ 965, 776, 834 ]
  }, {
      code: 8168,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8160,
      foldFull: [ 8160 ]
  }, {
      code: 8169,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8161,
      foldFull: [ 8161 ]
  }, {
      code: 8170,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8058,
      foldFull: [ 8058 ]
  }, {
      code: 8171,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8059,
      foldFull: [ 8059 ]
  }, {
      code: 8172,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8165,
      foldFull: [ 8165 ]
  }, {
      code: 8178,
      lower: [ 8178 ],
      title: [ 8186, 837 ],
      upper: [ 8186, 921 ],
      fold: 0,
      foldFull: [ 8060, 953 ]
  }, {
      code: 8178,
      lower: [ 8178 ],
      title: [ 8186, 837 ],
      upper: [ 8186, 921 ],
      fold: 0,
      foldFull: [ 8060, 953 ]
  }, {
      code: 8179,
      lower: [ 8179 ],
      title: [ 8188 ],
      upper: [ 937, 921 ],
      fold: 0,
      foldFull: [ 969, 953 ]
  }, {
      code: 8179,
      lower: [ 8179 ],
      title: [ 8188 ],
      upper: [ 937, 921 ],
      fold: 0,
      foldFull: [ 969, 953 ]
  }, {
      code: 8180,
      lower: [ 8180 ],
      title: [ 911, 837 ],
      upper: [ 911, 921 ],
      fold: 0,
      foldFull: [ 974, 953 ]
  }, {
      code: 8180,
      lower: [ 8180 ],
      title: [ 911, 837 ],
      upper: [ 911, 921 ],
      fold: 0,
      foldFull: [ 974, 953 ]
  }, {
      code: 8182,
      lower: [ 8182 ],
      title: [ 937, 834 ],
      upper: [ 937, 834 ],
      fold: 0,
      foldFull: [ 969, 834 ]
  }, {
      code: 8182,
      lower: [ 8182 ],
      title: [ 937, 834 ],
      upper: [ 937, 834 ],
      fold: 0,
      foldFull: [ 969, 834 ]
  }, {
      code: 8183,
      lower: [ 8183 ],
      title: [ 937, 834, 837 ],
      upper: [ 937, 834, 921 ],
      fold: 0,
      foldFull: [ 969, 834, 953 ]
  }, {
      code: 8183,
      lower: [ 8183 ],
      title: [ 937, 834, 837 ],
      upper: [ 937, 834, 921 ],
      fold: 0,
      foldFull: [ 969, 834, 953 ]
  }, {
      code: 8184,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8056,
      foldFull: [ 8056 ]
  }, {
      code: 8185,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8057,
      foldFull: [ 8057 ]
  }, {
      code: 8186,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8060,
      foldFull: [ 8060 ]
  }, {
      code: 8187,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8061,
      foldFull: [ 8061 ]
  }, {
      code: 8188,
      lower: [ 8179 ],
      title: [ 8188 ],
      upper: [ 937, 921 ],
      fold: 8179,
      foldFull: [ 969, 953 ]
  }, {
      code: 8188,
      lower: [ 8179 ],
      title: [ 8188 ],
      upper: [ 937, 921 ],
      fold: 8179,
      foldFull: [ 969, 953 ]
  }, {
      code: 8486,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 969,
      foldFull: [ 969 ]
  }, {
      code: 8490,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 107,
      foldFull: [ 107 ]
  }, {
      code: 8491,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 229,
      foldFull: [ 229 ]
  }, {
      code: 8498,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8526,
      foldFull: [ 8526 ]
  }, {
      code: 8544,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8560,
      foldFull: [ 8560 ]
  }, {
      code: 8545,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8561,
      foldFull: [ 8561 ]
  }, {
      code: 8546,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8562,
      foldFull: [ 8562 ]
  }, {
      code: 8547,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8563,
      foldFull: [ 8563 ]
  }, {
      code: 8548,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8564,
      foldFull: [ 8564 ]
  }, {
      code: 8549,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8565,
      foldFull: [ 8565 ]
  }, {
      code: 8550,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8566,
      foldFull: [ 8566 ]
  }, {
      code: 8551,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8567,
      foldFull: [ 8567 ]
  }, {
      code: 8552,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8568,
      foldFull: [ 8568 ]
  }, {
      code: 8553,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8569,
      foldFull: [ 8569 ]
  }, {
      code: 8554,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8570,
      foldFull: [ 8570 ]
  }, {
      code: 8555,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8571,
      foldFull: [ 8571 ]
  }, {
      code: 8556,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8572,
      foldFull: [ 8572 ]
  }, {
      code: 8557,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8573,
      foldFull: [ 8573 ]
  }, {
      code: 8558,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8574,
      foldFull: [ 8574 ]
  }, {
      code: 8559,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8575,
      foldFull: [ 8575 ]
  }, {
      code: 8579,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 8580,
      foldFull: [ 8580 ]
  }, {
      code: 9398,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9424,
      foldFull: [ 9424 ]
  }, {
      code: 9399,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9425,
      foldFull: [ 9425 ]
  }, {
      code: 9400,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9426,
      foldFull: [ 9426 ]
  }, {
      code: 9401,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9427,
      foldFull: [ 9427 ]
  }, {
      code: 9402,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9428,
      foldFull: [ 9428 ]
  }, {
      code: 9403,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9429,
      foldFull: [ 9429 ]
  }, {
      code: 9404,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9430,
      foldFull: [ 9430 ]
  }, {
      code: 9405,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9431,
      foldFull: [ 9431 ]
  }, {
      code: 9406,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9432,
      foldFull: [ 9432 ]
  }, {
      code: 9407,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9433,
      foldFull: [ 9433 ]
  }, {
      code: 9408,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9434,
      foldFull: [ 9434 ]
  }, {
      code: 9409,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9435,
      foldFull: [ 9435 ]
  }, {
      code: 9410,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9436,
      foldFull: [ 9436 ]
  }, {
      code: 9411,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9437,
      foldFull: [ 9437 ]
  }, {
      code: 9412,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9438,
      foldFull: [ 9438 ]
  }, {
      code: 9413,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9439,
      foldFull: [ 9439 ]
  }, {
      code: 9414,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9440,
      foldFull: [ 9440 ]
  }, {
      code: 9415,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9441,
      foldFull: [ 9441 ]
  }, {
      code: 9416,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9442,
      foldFull: [ 9442 ]
  }, {
      code: 9417,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9443,
      foldFull: [ 9443 ]
  }, {
      code: 9418,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9444,
      foldFull: [ 9444 ]
  }, {
      code: 9419,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9445,
      foldFull: [ 9445 ]
  }, {
      code: 9420,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9446,
      foldFull: [ 9446 ]
  }, {
      code: 9421,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9447,
      foldFull: [ 9447 ]
  }, {
      code: 9422,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9448,
      foldFull: [ 9448 ]
  }, {
      code: 9423,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 9449,
      foldFull: [ 9449 ]
  }, {
      code: 11264,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11312,
      foldFull: [ 11312 ]
  }, {
      code: 11265,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11313,
      foldFull: [ 11313 ]
  }, {
      code: 11266,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11314,
      foldFull: [ 11314 ]
  }, {
      code: 11267,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11315,
      foldFull: [ 11315 ]
  }, {
      code: 11268,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11316,
      foldFull: [ 11316 ]
  }, {
      code: 11269,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11317,
      foldFull: [ 11317 ]
  }, {
      code: 11270,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11318,
      foldFull: [ 11318 ]
  }, {
      code: 11271,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11319,
      foldFull: [ 11319 ]
  }, {
      code: 11272,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11320,
      foldFull: [ 11320 ]
  }, {
      code: 11273,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11321,
      foldFull: [ 11321 ]
  }, {
      code: 11274,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11322,
      foldFull: [ 11322 ]
  }, {
      code: 11275,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11323,
      foldFull: [ 11323 ]
  }, {
      code: 11276,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11324,
      foldFull: [ 11324 ]
  }, {
      code: 11277,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11325,
      foldFull: [ 11325 ]
  }, {
      code: 11278,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11326,
      foldFull: [ 11326 ]
  }, {
      code: 11279,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11327,
      foldFull: [ 11327 ]
  }, {
      code: 11280,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11328,
      foldFull: [ 11328 ]
  }, {
      code: 11281,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11329,
      foldFull: [ 11329 ]
  }, {
      code: 11282,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11330,
      foldFull: [ 11330 ]
  }, {
      code: 11283,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11331,
      foldFull: [ 11331 ]
  }, {
      code: 11284,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11332,
      foldFull: [ 11332 ]
  }, {
      code: 11285,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11333,
      foldFull: [ 11333 ]
  }, {
      code: 11286,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11334,
      foldFull: [ 11334 ]
  }, {
      code: 11287,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11335,
      foldFull: [ 11335 ]
  }, {
      code: 11288,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11336,
      foldFull: [ 11336 ]
  }, {
      code: 11289,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11337,
      foldFull: [ 11337 ]
  }, {
      code: 11290,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11338,
      foldFull: [ 11338 ]
  }, {
      code: 11291,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11339,
      foldFull: [ 11339 ]
  }, {
      code: 11292,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11340,
      foldFull: [ 11340 ]
  }, {
      code: 11293,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11341,
      foldFull: [ 11341 ]
  }, {
      code: 11294,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11342,
      foldFull: [ 11342 ]
  }, {
      code: 11295,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11343,
      foldFull: [ 11343 ]
  }, {
      code: 11296,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11344,
      foldFull: [ 11344 ]
  }, {
      code: 11297,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11345,
      foldFull: [ 11345 ]
  }, {
      code: 11298,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11346,
      foldFull: [ 11346 ]
  }, {
      code: 11299,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11347,
      foldFull: [ 11347 ]
  }, {
      code: 11300,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11348,
      foldFull: [ 11348 ]
  }, {
      code: 11301,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11349,
      foldFull: [ 11349 ]
  }, {
      code: 11302,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11350,
      foldFull: [ 11350 ]
  }, {
      code: 11303,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11351,
      foldFull: [ 11351 ]
  }, {
      code: 11304,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11352,
      foldFull: [ 11352 ]
  }, {
      code: 11305,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11353,
      foldFull: [ 11353 ]
  }, {
      code: 11306,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11354,
      foldFull: [ 11354 ]
  }, {
      code: 11307,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11355,
      foldFull: [ 11355 ]
  }, {
      code: 11308,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11356,
      foldFull: [ 11356 ]
  }, {
      code: 11309,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11357,
      foldFull: [ 11357 ]
  }, {
      code: 11310,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11358,
      foldFull: [ 11358 ]
  }, {
      code: 11360,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11361,
      foldFull: [ 11361 ]
  }, {
      code: 11362,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 619,
      foldFull: [ 619 ]
  }, {
      code: 11363,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7549,
      foldFull: [ 7549 ]
  }, {
      code: 11364,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 637,
      foldFull: [ 637 ]
  }, {
      code: 11367,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11368,
      foldFull: [ 11368 ]
  }, {
      code: 11369,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11370,
      foldFull: [ 11370 ]
  }, {
      code: 11371,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11372,
      foldFull: [ 11372 ]
  }, {
      code: 11373,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 593,
      foldFull: [ 593 ]
  }, {
      code: 11374,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 625,
      foldFull: [ 625 ]
  }, {
      code: 11375,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 592,
      foldFull: [ 592 ]
  }, {
      code: 11376,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 594,
      foldFull: [ 594 ]
  }, {
      code: 11378,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11379,
      foldFull: [ 11379 ]
  }, {
      code: 11381,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11382,
      foldFull: [ 11382 ]
  }, {
      code: 11390,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 575,
      foldFull: [ 575 ]
  }, {
      code: 11391,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 576,
      foldFull: [ 576 ]
  }, {
      code: 11392,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11393,
      foldFull: [ 11393 ]
  }, {
      code: 11394,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11395,
      foldFull: [ 11395 ]
  }, {
      code: 11396,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11397,
      foldFull: [ 11397 ]
  }, {
      code: 11398,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11399,
      foldFull: [ 11399 ]
  }, {
      code: 11400,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11401,
      foldFull: [ 11401 ]
  }, {
      code: 11402,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11403,
      foldFull: [ 11403 ]
  }, {
      code: 11404,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11405,
      foldFull: [ 11405 ]
  }, {
      code: 11406,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11407,
      foldFull: [ 11407 ]
  }, {
      code: 11408,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11409,
      foldFull: [ 11409 ]
  }, {
      code: 11410,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11411,
      foldFull: [ 11411 ]
  }, {
      code: 11412,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11413,
      foldFull: [ 11413 ]
  }, {
      code: 11414,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11415,
      foldFull: [ 11415 ]
  }, {
      code: 11416,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11417,
      foldFull: [ 11417 ]
  }, {
      code: 11418,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11419,
      foldFull: [ 11419 ]
  }, {
      code: 11420,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11421,
      foldFull: [ 11421 ]
  }, {
      code: 11422,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11423,
      foldFull: [ 11423 ]
  }, {
      code: 11424,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11425,
      foldFull: [ 11425 ]
  }, {
      code: 11426,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11427,
      foldFull: [ 11427 ]
  }, {
      code: 11428,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11429,
      foldFull: [ 11429 ]
  }, {
      code: 11430,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11431,
      foldFull: [ 11431 ]
  }, {
      code: 11432,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11433,
      foldFull: [ 11433 ]
  }, {
      code: 11434,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11435,
      foldFull: [ 11435 ]
  }, {
      code: 11436,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11437,
      foldFull: [ 11437 ]
  }, {
      code: 11438,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11439,
      foldFull: [ 11439 ]
  }, {
      code: 11440,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11441,
      foldFull: [ 11441 ]
  }, {
      code: 11442,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11443,
      foldFull: [ 11443 ]
  }, {
      code: 11444,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11445,
      foldFull: [ 11445 ]
  }, {
      code: 11446,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11447,
      foldFull: [ 11447 ]
  }, {
      code: 11448,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11449,
      foldFull: [ 11449 ]
  }, {
      code: 11450,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11451,
      foldFull: [ 11451 ]
  }, {
      code: 11452,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11453,
      foldFull: [ 11453 ]
  }, {
      code: 11454,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11455,
      foldFull: [ 11455 ]
  }, {
      code: 11456,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11457,
      foldFull: [ 11457 ]
  }, {
      code: 11458,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11459,
      foldFull: [ 11459 ]
  }, {
      code: 11460,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11461,
      foldFull: [ 11461 ]
  }, {
      code: 11462,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11463,
      foldFull: [ 11463 ]
  }, {
      code: 11464,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11465,
      foldFull: [ 11465 ]
  }, {
      code: 11466,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11467,
      foldFull: [ 11467 ]
  }, {
      code: 11468,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11469,
      foldFull: [ 11469 ]
  }, {
      code: 11470,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11471,
      foldFull: [ 11471 ]
  }, {
      code: 11472,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11473,
      foldFull: [ 11473 ]
  }, {
      code: 11474,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11475,
      foldFull: [ 11475 ]
  }, {
      code: 11476,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11477,
      foldFull: [ 11477 ]
  }, {
      code: 11478,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11479,
      foldFull: [ 11479 ]
  }, {
      code: 11480,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11481,
      foldFull: [ 11481 ]
  }, {
      code: 11482,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11483,
      foldFull: [ 11483 ]
  }, {
      code: 11484,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11485,
      foldFull: [ 11485 ]
  }, {
      code: 11486,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11487,
      foldFull: [ 11487 ]
  }, {
      code: 11488,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11489,
      foldFull: [ 11489 ]
  }, {
      code: 11490,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11491,
      foldFull: [ 11491 ]
  }, {
      code: 11499,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11500,
      foldFull: [ 11500 ]
  }, {
      code: 11501,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11502,
      foldFull: [ 11502 ]
  }, {
      code: 11506,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 11507,
      foldFull: [ 11507 ]
  }, {
      code: 42560,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42561,
      foldFull: [ 42561 ]
  }, {
      code: 42562,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42563,
      foldFull: [ 42563 ]
  }, {
      code: 42564,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42565,
      foldFull: [ 42565 ]
  }, {
      code: 42566,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42567,
      foldFull: [ 42567 ]
  }, {
      code: 42568,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42569,
      foldFull: [ 42569 ]
  }, {
      code: 42570,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42571,
      foldFull: [ 42571 ]
  }, {
      code: 42572,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42573,
      foldFull: [ 42573 ]
  }, {
      code: 42574,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42575,
      foldFull: [ 42575 ]
  }, {
      code: 42576,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42577,
      foldFull: [ 42577 ]
  }, {
      code: 42578,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42579,
      foldFull: [ 42579 ]
  }, {
      code: 42580,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42581,
      foldFull: [ 42581 ]
  }, {
      code: 42582,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42583,
      foldFull: [ 42583 ]
  }, {
      code: 42584,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42585,
      foldFull: [ 42585 ]
  }, {
      code: 42586,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42587,
      foldFull: [ 42587 ]
  }, {
      code: 42588,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42589,
      foldFull: [ 42589 ]
  }, {
      code: 42590,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42591,
      foldFull: [ 42591 ]
  }, {
      code: 42592,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42593,
      foldFull: [ 42593 ]
  }, {
      code: 42594,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42595,
      foldFull: [ 42595 ]
  }, {
      code: 42596,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42597,
      foldFull: [ 42597 ]
  }, {
      code: 42598,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42599,
      foldFull: [ 42599 ]
  }, {
      code: 42600,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42601,
      foldFull: [ 42601 ]
  }, {
      code: 42602,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42603,
      foldFull: [ 42603 ]
  }, {
      code: 42604,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42605,
      foldFull: [ 42605 ]
  }, {
      code: 42624,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42625,
      foldFull: [ 42625 ]
  }, {
      code: 42626,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42627,
      foldFull: [ 42627 ]
  }, {
      code: 42628,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42629,
      foldFull: [ 42629 ]
  }, {
      code: 42630,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42631,
      foldFull: [ 42631 ]
  }, {
      code: 42632,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42633,
      foldFull: [ 42633 ]
  }, {
      code: 42634,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42635,
      foldFull: [ 42635 ]
  }, {
      code: 42636,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42637,
      foldFull: [ 42637 ]
  }, {
      code: 42638,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42639,
      foldFull: [ 42639 ]
  }, {
      code: 42640,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42641,
      foldFull: [ 42641 ]
  }, {
      code: 42642,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42643,
      foldFull: [ 42643 ]
  }, {
      code: 42644,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42645,
      foldFull: [ 42645 ]
  }, {
      code: 42646,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42647,
      foldFull: [ 42647 ]
  }, {
      code: 42648,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42649,
      foldFull: [ 42649 ]
  }, {
      code: 42650,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42651,
      foldFull: [ 42651 ]
  }, {
      code: 42786,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42787,
      foldFull: [ 42787 ]
  }, {
      code: 42788,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42789,
      foldFull: [ 42789 ]
  }, {
      code: 42790,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42791,
      foldFull: [ 42791 ]
  }, {
      code: 42792,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42793,
      foldFull: [ 42793 ]
  }, {
      code: 42794,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42795,
      foldFull: [ 42795 ]
  }, {
      code: 42796,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42797,
      foldFull: [ 42797 ]
  }, {
      code: 42798,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42799,
      foldFull: [ 42799 ]
  }, {
      code: 42802,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42803,
      foldFull: [ 42803 ]
  }, {
      code: 42804,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42805,
      foldFull: [ 42805 ]
  }, {
      code: 42806,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42807,
      foldFull: [ 42807 ]
  }, {
      code: 42808,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42809,
      foldFull: [ 42809 ]
  }, {
      code: 42810,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42811,
      foldFull: [ 42811 ]
  }, {
      code: 42812,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42813,
      foldFull: [ 42813 ]
  }, {
      code: 42814,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42815,
      foldFull: [ 42815 ]
  }, {
      code: 42816,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42817,
      foldFull: [ 42817 ]
  }, {
      code: 42818,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42819,
      foldFull: [ 42819 ]
  }, {
      code: 42820,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42821,
      foldFull: [ 42821 ]
  }, {
      code: 42822,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42823,
      foldFull: [ 42823 ]
  }, {
      code: 42824,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42825,
      foldFull: [ 42825 ]
  }, {
      code: 42826,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42827,
      foldFull: [ 42827 ]
  }, {
      code: 42828,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42829,
      foldFull: [ 42829 ]
  }, {
      code: 42830,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42831,
      foldFull: [ 42831 ]
  }, {
      code: 42832,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42833,
      foldFull: [ 42833 ]
  }, {
      code: 42834,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42835,
      foldFull: [ 42835 ]
  }, {
      code: 42836,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42837,
      foldFull: [ 42837 ]
  }, {
      code: 42838,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42839,
      foldFull: [ 42839 ]
  }, {
      code: 42840,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42841,
      foldFull: [ 42841 ]
  }, {
      code: 42842,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42843,
      foldFull: [ 42843 ]
  }, {
      code: 42844,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42845,
      foldFull: [ 42845 ]
  }, {
      code: 42846,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42847,
      foldFull: [ 42847 ]
  }, {
      code: 42848,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42849,
      foldFull: [ 42849 ]
  }, {
      code: 42850,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42851,
      foldFull: [ 42851 ]
  }, {
      code: 42852,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42853,
      foldFull: [ 42853 ]
  }, {
      code: 42854,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42855,
      foldFull: [ 42855 ]
  }, {
      code: 42856,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42857,
      foldFull: [ 42857 ]
  }, {
      code: 42858,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42859,
      foldFull: [ 42859 ]
  }, {
      code: 42860,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42861,
      foldFull: [ 42861 ]
  }, {
      code: 42862,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42863,
      foldFull: [ 42863 ]
  }, {
      code: 42873,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42874,
      foldFull: [ 42874 ]
  }, {
      code: 42875,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42876,
      foldFull: [ 42876 ]
  }, {
      code: 42877,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7545,
      foldFull: [ 7545 ]
  }, {
      code: 42878,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42879,
      foldFull: [ 42879 ]
  }, {
      code: 42880,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42881,
      foldFull: [ 42881 ]
  }, {
      code: 42882,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42883,
      foldFull: [ 42883 ]
  }, {
      code: 42884,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42885,
      foldFull: [ 42885 ]
  }, {
      code: 42886,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42887,
      foldFull: [ 42887 ]
  }, {
      code: 42891,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42892,
      foldFull: [ 42892 ]
  }, {
      code: 42893,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 613,
      foldFull: [ 613 ]
  }, {
      code: 42896,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42897,
      foldFull: [ 42897 ]
  }, {
      code: 42898,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42899,
      foldFull: [ 42899 ]
  }, {
      code: 42902,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42903,
      foldFull: [ 42903 ]
  }, {
      code: 42904,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42905,
      foldFull: [ 42905 ]
  }, {
      code: 42906,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42907,
      foldFull: [ 42907 ]
  }, {
      code: 42908,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42909,
      foldFull: [ 42909 ]
  }, {
      code: 42910,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42911,
      foldFull: [ 42911 ]
  }, {
      code: 42912,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42913,
      foldFull: [ 42913 ]
  }, {
      code: 42914,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42915,
      foldFull: [ 42915 ]
  }, {
      code: 42916,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42917,
      foldFull: [ 42917 ]
  }, {
      code: 42918,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42919,
      foldFull: [ 42919 ]
  }, {
      code: 42920,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42921,
      foldFull: [ 42921 ]
  }, {
      code: 42922,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 614,
      foldFull: [ 614 ]
  }, {
      code: 42923,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 604,
      foldFull: [ 604 ]
  }, {
      code: 42924,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 609,
      foldFull: [ 609 ]
  }, {
      code: 42925,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 620,
      foldFull: [ 620 ]
  }, {
      code: 42926,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 618,
      foldFull: [ 618 ]
  }, {
      code: 42928,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 670,
      foldFull: [ 670 ]
  }, {
      code: 42929,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 647,
      foldFull: [ 647 ]
  }, {
      code: 42930,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 669,
      foldFull: [ 669 ]
  }, {
      code: 42931,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 43859,
      foldFull: [ 43859 ]
  }, {
      code: 42932,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42933,
      foldFull: [ 42933 ]
  }, {
      code: 42934,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42935,
      foldFull: [ 42935 ]
  }, {
      code: 42936,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42937,
      foldFull: [ 42937 ]
  }, {
      code: 42938,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42939,
      foldFull: [ 42939 ]
  }, {
      code: 42940,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42941,
      foldFull: [ 42941 ]
  }, {
      code: 42942,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42943,
      foldFull: [ 42943 ]
  }, {
      code: 42946,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42947,
      foldFull: [ 42947 ]
  }, {
      code: 42948,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42900,
      foldFull: [ 42900 ]
  }, {
      code: 42949,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 642,
      foldFull: [ 642 ]
  }, {
      code: 42950,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 7566,
      foldFull: [ 7566 ]
  }, {
      code: 42951,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42952,
      foldFull: [ 42952 ]
  }, {
      code: 42953,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42954,
      foldFull: [ 42954 ]
  }, {
      code: 42997,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 42998,
      foldFull: [ 42998 ]
  }, {
      code: 43888,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5024,
      foldFull: [ 5024 ]
  }, {
      code: 43889,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5025,
      foldFull: [ 5025 ]
  }, {
      code: 43890,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5026,
      foldFull: [ 5026 ]
  }, {
      code: 43891,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5027,
      foldFull: [ 5027 ]
  }, {
      code: 43892,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5028,
      foldFull: [ 5028 ]
  }, {
      code: 43893,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5029,
      foldFull: [ 5029 ]
  }, {
      code: 43894,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5030,
      foldFull: [ 5030 ]
  }, {
      code: 43895,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5031,
      foldFull: [ 5031 ]
  }, {
      code: 43896,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5032,
      foldFull: [ 5032 ]
  }, {
      code: 43897,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5033,
      foldFull: [ 5033 ]
  }, {
      code: 43898,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5034,
      foldFull: [ 5034 ]
  }, {
      code: 43899,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5035,
      foldFull: [ 5035 ]
  }, {
      code: 43900,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5036,
      foldFull: [ 5036 ]
  }, {
      code: 43901,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5037,
      foldFull: [ 5037 ]
  }, {
      code: 43902,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5038,
      foldFull: [ 5038 ]
  }, {
      code: 43903,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5039,
      foldFull: [ 5039 ]
  }, {
      code: 43904,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5040,
      foldFull: [ 5040 ]
  }, {
      code: 43905,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5041,
      foldFull: [ 5041 ]
  }, {
      code: 43906,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5042,
      foldFull: [ 5042 ]
  }, {
      code: 43907,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5043,
      foldFull: [ 5043 ]
  }, {
      code: 43908,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5044,
      foldFull: [ 5044 ]
  }, {
      code: 43909,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5045,
      foldFull: [ 5045 ]
  }, {
      code: 43910,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5046,
      foldFull: [ 5046 ]
  }, {
      code: 43911,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5047,
      foldFull: [ 5047 ]
  }, {
      code: 43912,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5048,
      foldFull: [ 5048 ]
  }, {
      code: 43913,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5049,
      foldFull: [ 5049 ]
  }, {
      code: 43914,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5050,
      foldFull: [ 5050 ]
  }, {
      code: 43915,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5051,
      foldFull: [ 5051 ]
  }, {
      code: 43916,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5052,
      foldFull: [ 5052 ]
  }, {
      code: 43917,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5053,
      foldFull: [ 5053 ]
  }, {
      code: 43918,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5054,
      foldFull: [ 5054 ]
  }, {
      code: 43919,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5055,
      foldFull: [ 5055 ]
  }, {
      code: 43920,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5056,
      foldFull: [ 5056 ]
  }, {
      code: 43921,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5057,
      foldFull: [ 5057 ]
  }, {
      code: 43922,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5058,
      foldFull: [ 5058 ]
  }, {
      code: 43923,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5059,
      foldFull: [ 5059 ]
  }, {
      code: 43924,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5060,
      foldFull: [ 5060 ]
  }, {
      code: 43925,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5061,
      foldFull: [ 5061 ]
  }, {
      code: 43926,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5062,
      foldFull: [ 5062 ]
  }, {
      code: 43927,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5063,
      foldFull: [ 5063 ]
  }, {
      code: 43928,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5064,
      foldFull: [ 5064 ]
  }, {
      code: 43929,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5065,
      foldFull: [ 5065 ]
  }, {
      code: 43930,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5066,
      foldFull: [ 5066 ]
  }, {
      code: 43931,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5067,
      foldFull: [ 5067 ]
  }, {
      code: 43932,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5068,
      foldFull: [ 5068 ]
  }, {
      code: 43933,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5069,
      foldFull: [ 5069 ]
  }, {
      code: 43934,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5070,
      foldFull: [ 5070 ]
  }, {
      code: 43935,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5071,
      foldFull: [ 5071 ]
  }, {
      code: 43936,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5072,
      foldFull: [ 5072 ]
  }, {
      code: 43937,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5073,
      foldFull: [ 5073 ]
  }, {
      code: 43938,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5074,
      foldFull: [ 5074 ]
  }, {
      code: 43939,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5075,
      foldFull: [ 5075 ]
  }, {
      code: 43940,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5076,
      foldFull: [ 5076 ]
  }, {
      code: 43941,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5077,
      foldFull: [ 5077 ]
  }, {
      code: 43942,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5078,
      foldFull: [ 5078 ]
  }, {
      code: 43943,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5079,
      foldFull: [ 5079 ]
  }, {
      code: 43944,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5080,
      foldFull: [ 5080 ]
  }, {
      code: 43945,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5081,
      foldFull: [ 5081 ]
  }, {
      code: 43946,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5082,
      foldFull: [ 5082 ]
  }, {
      code: 43947,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5083,
      foldFull: [ 5083 ]
  }, {
      code: 43948,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5084,
      foldFull: [ 5084 ]
  }, {
      code: 43949,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5085,
      foldFull: [ 5085 ]
  }, {
      code: 43950,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5086,
      foldFull: [ 5086 ]
  }, {
      code: 43951,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5087,
      foldFull: [ 5087 ]
  }, {
      code: 43952,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5088,
      foldFull: [ 5088 ]
  }, {
      code: 43953,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5089,
      foldFull: [ 5089 ]
  }, {
      code: 43954,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5090,
      foldFull: [ 5090 ]
  }, {
      code: 43955,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5091,
      foldFull: [ 5091 ]
  }, {
      code: 43956,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5092,
      foldFull: [ 5092 ]
  }, {
      code: 43957,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5093,
      foldFull: [ 5093 ]
  }, {
      code: 43958,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5094,
      foldFull: [ 5094 ]
  }, {
      code: 43959,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5095,
      foldFull: [ 5095 ]
  }, {
      code: 43960,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5096,
      foldFull: [ 5096 ]
  }, {
      code: 43961,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5097,
      foldFull: [ 5097 ]
  }, {
      code: 43962,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5098,
      foldFull: [ 5098 ]
  }, {
      code: 43963,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5099,
      foldFull: [ 5099 ]
  }, {
      code: 43964,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5100,
      foldFull: [ 5100 ]
  }, {
      code: 43965,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5101,
      foldFull: [ 5101 ]
  }, {
      code: 43966,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5102,
      foldFull: [ 5102 ]
  }, {
      code: 43967,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 5103,
      foldFull: [ 5103 ]
  }, {
      code: 64256,
      lower: [ 64256 ],
      title: [ 70, 102 ],
      upper: [ 70, 70 ],
      fold: 0,
      foldFull: [ 102, 102 ]
  }, {
      code: 64256,
      lower: [ 64256 ],
      title: [ 70, 102 ],
      upper: [ 70, 70 ],
      fold: 0,
      foldFull: [ 102, 102 ]
  }, {
      code: 64257,
      lower: [ 64257 ],
      title: [ 70, 105 ],
      upper: [ 70, 73 ],
      fold: 0,
      foldFull: [ 102, 105 ]
  }, {
      code: 64257,
      lower: [ 64257 ],
      title: [ 70, 105 ],
      upper: [ 70, 73 ],
      fold: 0,
      foldFull: [ 102, 105 ]
  }, {
      code: 64258,
      lower: [ 64258 ],
      title: [ 70, 108 ],
      upper: [ 70, 76 ],
      fold: 0,
      foldFull: [ 102, 108 ]
  }, {
      code: 64258,
      lower: [ 64258 ],
      title: [ 70, 108 ],
      upper: [ 70, 76 ],
      fold: 0,
      foldFull: [ 102, 108 ]
  }, {
      code: 64259,
      lower: [ 64259 ],
      title: [ 70, 102, 105 ],
      upper: [ 70, 70, 73 ],
      fold: 0,
      foldFull: [ 102, 102, 105 ]
  }, {
      code: 64259,
      lower: [ 64259 ],
      title: [ 70, 102, 105 ],
      upper: [ 70, 70, 73 ],
      fold: 0,
      foldFull: [ 102, 102, 105 ]
  }, {
      code: 64260,
      lower: [ 64260 ],
      title: [ 70, 102, 108 ],
      upper: [ 70, 70, 76 ],
      fold: 0,
      foldFull: [ 102, 102, 108 ]
  }, {
      code: 64260,
      lower: [ 64260 ],
      title: [ 70, 102, 108 ],
      upper: [ 70, 70, 76 ],
      fold: 0,
      foldFull: [ 102, 102, 108 ]
  }, {
      code: 64261,
      lower: [ 64261 ],
      title: [ 83, 116 ],
      upper: [ 83, 84 ],
      fold: 0,
      foldFull: [ 115, 116 ]
  }, {
      code: 64261,
      lower: [ 64261 ],
      title: [ 83, 116 ],
      upper: [ 83, 84 ],
      fold: 0,
      foldFull: [ 115, 116 ]
  }, {
      code: 64262,
      lower: [ 64262 ],
      title: [ 83, 116 ],
      upper: [ 83, 84 ],
      fold: 0,
      foldFull: [ 115, 116 ]
  }, {
      code: 64262,
      lower: [ 64262 ],
      title: [ 83, 116 ],
      upper: [ 83, 84 ],
      fold: 0,
      foldFull: [ 115, 116 ]
  }, {
      code: 64275,
      lower: [ 64275 ],
      title: [ 1348, 1398 ],
      upper: [ 1348, 1350 ],
      fold: 0,
      foldFull: [ 1396, 1398 ]
  }, {
      code: 64275,
      lower: [ 64275 ],
      title: [ 1348, 1398 ],
      upper: [ 1348, 1350 ],
      fold: 0,
      foldFull: [ 1396, 1398 ]
  }, {
      code: 64276,
      lower: [ 64276 ],
      title: [ 1348, 1381 ],
      upper: [ 1348, 1333 ],
      fold: 0,
      foldFull: [ 1396, 1381 ]
  }, {
      code: 64276,
      lower: [ 64276 ],
      title: [ 1348, 1381 ],
      upper: [ 1348, 1333 ],
      fold: 0,
      foldFull: [ 1396, 1381 ]
  }, {
      code: 64277,
      lower: [ 64277 ],
      title: [ 1348, 1387 ],
      upper: [ 1348, 1339 ],
      fold: 0,
      foldFull: [ 1396, 1387 ]
  }, {
      code: 64277,
      lower: [ 64277 ],
      title: [ 1348, 1387 ],
      upper: [ 1348, 1339 ],
      fold: 0,
      foldFull: [ 1396, 1387 ]
  }, {
      code: 64278,
      lower: [ 64278 ],
      title: [ 1358, 1398 ],
      upper: [ 1358, 1350 ],
      fold: 0,
      foldFull: [ 1406, 1398 ]
  }, {
      code: 64278,
      lower: [ 64278 ],
      title: [ 1358, 1398 ],
      upper: [ 1358, 1350 ],
      fold: 0,
      foldFull: [ 1406, 1398 ]
  }, {
      code: 64279,
      lower: [ 64279 ],
      title: [ 1348, 1389 ],
      upper: [ 1348, 1341 ],
      fold: 0,
      foldFull: [ 1396, 1389 ]
  }, {
      code: 64279,
      lower: [ 64279 ],
      title: [ 1348, 1389 ],
      upper: [ 1348, 1341 ],
      fold: 0,
      foldFull: [ 1396, 1389 ]
  }, {
      code: 65313,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65345,
      foldFull: [ 65345 ]
  }, {
      code: 65314,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65346,
      foldFull: [ 65346 ]
  }, {
      code: 65315,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65347,
      foldFull: [ 65347 ]
  }, {
      code: 65316,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65348,
      foldFull: [ 65348 ]
  }, {
      code: 65317,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65349,
      foldFull: [ 65349 ]
  }, {
      code: 65318,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65350,
      foldFull: [ 65350 ]
  }, {
      code: 65319,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65351,
      foldFull: [ 65351 ]
  }, {
      code: 65320,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65352,
      foldFull: [ 65352 ]
  }, {
      code: 65321,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65353,
      foldFull: [ 65353 ]
  }, {
      code: 65322,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65354,
      foldFull: [ 65354 ]
  }, {
      code: 65323,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65355,
      foldFull: [ 65355 ]
  }, {
      code: 65324,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65356,
      foldFull: [ 65356 ]
  }, {
      code: 65325,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65357,
      foldFull: [ 65357 ]
  }, {
      code: 65326,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65358,
      foldFull: [ 65358 ]
  }, {
      code: 65327,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65359,
      foldFull: [ 65359 ]
  }, {
      code: 65328,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65360,
      foldFull: [ 65360 ]
  }, {
      code: 65329,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65361,
      foldFull: [ 65361 ]
  }, {
      code: 65330,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65362,
      foldFull: [ 65362 ]
  }, {
      code: 65331,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65363,
      foldFull: [ 65363 ]
  }, {
      code: 65332,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65364,
      foldFull: [ 65364 ]
  }, {
      code: 65333,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65365,
      foldFull: [ 65365 ]
  }, {
      code: 65334,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65366,
      foldFull: [ 65366 ]
  }, {
      code: 65335,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65367,
      foldFull: [ 65367 ]
  }, {
      code: 65336,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65368,
      foldFull: [ 65368 ]
  }, {
      code: 65337,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65369,
      foldFull: [ 65369 ]
  }, {
      code: 65338,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 65370,
      foldFull: [ 65370 ]
  }, {
      code: 66560,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66600,
      foldFull: [ 66600 ]
  }, {
      code: 66561,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66601,
      foldFull: [ 66601 ]
  }, {
      code: 66562,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66602,
      foldFull: [ 66602 ]
  }, {
      code: 66563,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66603,
      foldFull: [ 66603 ]
  }, {
      code: 66564,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66604,
      foldFull: [ 66604 ]
  }, {
      code: 66565,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66605,
      foldFull: [ 66605 ]
  }, {
      code: 66566,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66606,
      foldFull: [ 66606 ]
  }, {
      code: 66567,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66607,
      foldFull: [ 66607 ]
  }, {
      code: 66568,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66608,
      foldFull: [ 66608 ]
  }, {
      code: 66569,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66609,
      foldFull: [ 66609 ]
  }, {
      code: 66570,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66610,
      foldFull: [ 66610 ]
  }, {
      code: 66571,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66611,
      foldFull: [ 66611 ]
  }, {
      code: 66572,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66612,
      foldFull: [ 66612 ]
  }, {
      code: 66573,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66613,
      foldFull: [ 66613 ]
  }, {
      code: 66574,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66614,
      foldFull: [ 66614 ]
  }, {
      code: 66575,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66615,
      foldFull: [ 66615 ]
  }, {
      code: 66576,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66616,
      foldFull: [ 66616 ]
  }, {
      code: 66577,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66617,
      foldFull: [ 66617 ]
  }, {
      code: 66578,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66618,
      foldFull: [ 66618 ]
  }, {
      code: 66579,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66619,
      foldFull: [ 66619 ]
  }, {
      code: 66580,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66620,
      foldFull: [ 66620 ]
  }, {
      code: 66581,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66621,
      foldFull: [ 66621 ]
  }, {
      code: 66582,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66622,
      foldFull: [ 66622 ]
  }, {
      code: 66583,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66623,
      foldFull: [ 66623 ]
  }, {
      code: 66584,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66624,
      foldFull: [ 66624 ]
  }, {
      code: 66585,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66625,
      foldFull: [ 66625 ]
  }, {
      code: 66586,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66626,
      foldFull: [ 66626 ]
  }, {
      code: 66587,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66627,
      foldFull: [ 66627 ]
  }, {
      code: 66588,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66628,
      foldFull: [ 66628 ]
  }, {
      code: 66589,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66629,
      foldFull: [ 66629 ]
  }, {
      code: 66590,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66630,
      foldFull: [ 66630 ]
  }, {
      code: 66591,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66631,
      foldFull: [ 66631 ]
  }, {
      code: 66592,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66632,
      foldFull: [ 66632 ]
  }, {
      code: 66593,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66633,
      foldFull: [ 66633 ]
  }, {
      code: 66594,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66634,
      foldFull: [ 66634 ]
  }, {
      code: 66595,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66635,
      foldFull: [ 66635 ]
  }, {
      code: 66596,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66636,
      foldFull: [ 66636 ]
  }, {
      code: 66597,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66637,
      foldFull: [ 66637 ]
  }, {
      code: 66598,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66638,
      foldFull: [ 66638 ]
  }, {
      code: 66599,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66639,
      foldFull: [ 66639 ]
  }, {
      code: 66736,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66776,
      foldFull: [ 66776 ]
  }, {
      code: 66737,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66777,
      foldFull: [ 66777 ]
  }, {
      code: 66738,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66778,
      foldFull: [ 66778 ]
  }, {
      code: 66739,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66779,
      foldFull: [ 66779 ]
  }, {
      code: 66740,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66780,
      foldFull: [ 66780 ]
  }, {
      code: 66741,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66781,
      foldFull: [ 66781 ]
  }, {
      code: 66742,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66782,
      foldFull: [ 66782 ]
  }, {
      code: 66743,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66783,
      foldFull: [ 66783 ]
  }, {
      code: 66744,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66784,
      foldFull: [ 66784 ]
  }, {
      code: 66745,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66785,
      foldFull: [ 66785 ]
  }, {
      code: 66746,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66786,
      foldFull: [ 66786 ]
  }, {
      code: 66747,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66787,
      foldFull: [ 66787 ]
  }, {
      code: 66748,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66788,
      foldFull: [ 66788 ]
  }, {
      code: 66749,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66789,
      foldFull: [ 66789 ]
  }, {
      code: 66750,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66790,
      foldFull: [ 66790 ]
  }, {
      code: 66751,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66791,
      foldFull: [ 66791 ]
  }, {
      code: 66752,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66792,
      foldFull: [ 66792 ]
  }, {
      code: 66753,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66793,
      foldFull: [ 66793 ]
  }, {
      code: 66754,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66794,
      foldFull: [ 66794 ]
  }, {
      code: 66755,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66795,
      foldFull: [ 66795 ]
  }, {
      code: 66756,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66796,
      foldFull: [ 66796 ]
  }, {
      code: 66757,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66797,
      foldFull: [ 66797 ]
  }, {
      code: 66758,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66798,
      foldFull: [ 66798 ]
  }, {
      code: 66759,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66799,
      foldFull: [ 66799 ]
  }, {
      code: 66760,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66800,
      foldFull: [ 66800 ]
  }, {
      code: 66761,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66801,
      foldFull: [ 66801 ]
  }, {
      code: 66762,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66802,
      foldFull: [ 66802 ]
  }, {
      code: 66763,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66803,
      foldFull: [ 66803 ]
  }, {
      code: 66764,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66804,
      foldFull: [ 66804 ]
  }, {
      code: 66765,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66805,
      foldFull: [ 66805 ]
  }, {
      code: 66766,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66806,
      foldFull: [ 66806 ]
  }, {
      code: 66767,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66807,
      foldFull: [ 66807 ]
  }, {
      code: 66768,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66808,
      foldFull: [ 66808 ]
  }, {
      code: 66769,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66809,
      foldFull: [ 66809 ]
  }, {
      code: 66770,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66810,
      foldFull: [ 66810 ]
  }, {
      code: 66771,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 66811,
      foldFull: [ 66811 ]
  }, {
      code: 68736,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68800,
      foldFull: [ 68800 ]
  }, {
      code: 68737,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68801,
      foldFull: [ 68801 ]
  }, {
      code: 68738,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68802,
      foldFull: [ 68802 ]
  }, {
      code: 68739,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68803,
      foldFull: [ 68803 ]
  }, {
      code: 68740,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68804,
      foldFull: [ 68804 ]
  }, {
      code: 68741,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68805,
      foldFull: [ 68805 ]
  }, {
      code: 68742,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68806,
      foldFull: [ 68806 ]
  }, {
      code: 68743,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68807,
      foldFull: [ 68807 ]
  }, {
      code: 68744,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68808,
      foldFull: [ 68808 ]
  }, {
      code: 68745,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68809,
      foldFull: [ 68809 ]
  }, {
      code: 68746,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68810,
      foldFull: [ 68810 ]
  }, {
      code: 68747,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68811,
      foldFull: [ 68811 ]
  }, {
      code: 68748,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68812,
      foldFull: [ 68812 ]
  }, {
      code: 68749,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68813,
      foldFull: [ 68813 ]
  }, {
      code: 68750,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68814,
      foldFull: [ 68814 ]
  }, {
      code: 68751,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68815,
      foldFull: [ 68815 ]
  }, {
      code: 68752,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68816,
      foldFull: [ 68816 ]
  }, {
      code: 68753,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68817,
      foldFull: [ 68817 ]
  }, {
      code: 68754,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68818,
      foldFull: [ 68818 ]
  }, {
      code: 68755,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68819,
      foldFull: [ 68819 ]
  }, {
      code: 68756,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68820,
      foldFull: [ 68820 ]
  }, {
      code: 68757,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68821,
      foldFull: [ 68821 ]
  }, {
      code: 68758,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68822,
      foldFull: [ 68822 ]
  }, {
      code: 68759,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68823,
      foldFull: [ 68823 ]
  }, {
      code: 68760,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68824,
      foldFull: [ 68824 ]
  }, {
      code: 68761,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68825,
      foldFull: [ 68825 ]
  }, {
      code: 68762,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68826,
      foldFull: [ 68826 ]
  }, {
      code: 68763,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68827,
      foldFull: [ 68827 ]
  }, {
      code: 68764,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68828,
      foldFull: [ 68828 ]
  }, {
      code: 68765,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68829,
      foldFull: [ 68829 ]
  }, {
      code: 68766,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68830,
      foldFull: [ 68830 ]
  }, {
      code: 68767,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68831,
      foldFull: [ 68831 ]
  }, {
      code: 68768,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68832,
      foldFull: [ 68832 ]
  }, {
      code: 68769,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68833,
      foldFull: [ 68833 ]
  }, {
      code: 68770,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68834,
      foldFull: [ 68834 ]
  }, {
      code: 68771,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68835,
      foldFull: [ 68835 ]
  }, {
      code: 68772,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68836,
      foldFull: [ 68836 ]
  }, {
      code: 68773,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68837,
      foldFull: [ 68837 ]
  }, {
      code: 68774,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68838,
      foldFull: [ 68838 ]
  }, {
      code: 68775,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68839,
      foldFull: [ 68839 ]
  }, {
      code: 68776,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68840,
      foldFull: [ 68840 ]
  }, {
      code: 68777,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68841,
      foldFull: [ 68841 ]
  }, {
      code: 68778,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68842,
      foldFull: [ 68842 ]
  }, {
      code: 68779,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68843,
      foldFull: [ 68843 ]
  }, {
      code: 68780,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68844,
      foldFull: [ 68844 ]
  }, {
      code: 68781,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68845,
      foldFull: [ 68845 ]
  }, {
      code: 68782,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68846,
      foldFull: [ 68846 ]
  }, {
      code: 68783,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68847,
      foldFull: [ 68847 ]
  }, {
      code: 68784,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68848,
      foldFull: [ 68848 ]
  }, {
      code: 68785,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68849,
      foldFull: [ 68849 ]
  }, {
      code: 68786,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 68850,
      foldFull: [ 68850 ]
  }, {
      code: 71840,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71872,
      foldFull: [ 71872 ]
  }, {
      code: 71841,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71873,
      foldFull: [ 71873 ]
  }, {
      code: 71842,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71874,
      foldFull: [ 71874 ]
  }, {
      code: 71843,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71875,
      foldFull: [ 71875 ]
  }, {
      code: 71844,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71876,
      foldFull: [ 71876 ]
  }, {
      code: 71845,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71877,
      foldFull: [ 71877 ]
  }, {
      code: 71846,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71878,
      foldFull: [ 71878 ]
  }, {
      code: 71847,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71879,
      foldFull: [ 71879 ]
  }, {
      code: 71848,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71880,
      foldFull: [ 71880 ]
  }, {
      code: 71849,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71881,
      foldFull: [ 71881 ]
  }, {
      code: 71850,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71882,
      foldFull: [ 71882 ]
  }, {
      code: 71851,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71883,
      foldFull: [ 71883 ]
  }, {
      code: 71852,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71884,
      foldFull: [ 71884 ]
  }, {
      code: 71853,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71885,
      foldFull: [ 71885 ]
  }, {
      code: 71854,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71886,
      foldFull: [ 71886 ]
  }, {
      code: 71855,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71887,
      foldFull: [ 71887 ]
  }, {
      code: 71856,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71888,
      foldFull: [ 71888 ]
  }, {
      code: 71857,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71889,
      foldFull: [ 71889 ]
  }, {
      code: 71858,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71890,
      foldFull: [ 71890 ]
  }, {
      code: 71859,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71891,
      foldFull: [ 71891 ]
  }, {
      code: 71860,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71892,
      foldFull: [ 71892 ]
  }, {
      code: 71861,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71893,
      foldFull: [ 71893 ]
  }, {
      code: 71862,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71894,
      foldFull: [ 71894 ]
  }, {
      code: 71863,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71895,
      foldFull: [ 71895 ]
  }, {
      code: 71864,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71896,
      foldFull: [ 71896 ]
  }, {
      code: 71865,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71897,
      foldFull: [ 71897 ]
  }, {
      code: 71866,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71898,
      foldFull: [ 71898 ]
  }, {
      code: 71867,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71899,
      foldFull: [ 71899 ]
  }, {
      code: 71868,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71900,
      foldFull: [ 71900 ]
  }, {
      code: 71869,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71901,
      foldFull: [ 71901 ]
  }, {
      code: 71870,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71902,
      foldFull: [ 71902 ]
  }, {
      code: 71871,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 71903,
      foldFull: [ 71903 ]
  }, {
      code: 93760,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93792,
      foldFull: [ 93792 ]
  }, {
      code: 93761,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93793,
      foldFull: [ 93793 ]
  }, {
      code: 93762,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93794,
      foldFull: [ 93794 ]
  }, {
      code: 93763,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93795,
      foldFull: [ 93795 ]
  }, {
      code: 93764,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93796,
      foldFull: [ 93796 ]
  }, {
      code: 93765,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93797,
      foldFull: [ 93797 ]
  }, {
      code: 93766,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93798,
      foldFull: [ 93798 ]
  }, {
      code: 93767,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93799,
      foldFull: [ 93799 ]
  }, {
      code: 93768,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93800,
      foldFull: [ 93800 ]
  }, {
      code: 93769,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93801,
      foldFull: [ 93801 ]
  }, {
      code: 93770,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93802,
      foldFull: [ 93802 ]
  }, {
      code: 93771,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93803,
      foldFull: [ 93803 ]
  }, {
      code: 93772,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93804,
      foldFull: [ 93804 ]
  }, {
      code: 93773,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93805,
      foldFull: [ 93805 ]
  }, {
      code: 93774,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93806,
      foldFull: [ 93806 ]
  }, {
      code: 93775,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93807,
      foldFull: [ 93807 ]
  }, {
      code: 93776,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93808,
      foldFull: [ 93808 ]
  }, {
      code: 93777,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93809,
      foldFull: [ 93809 ]
  }, {
      code: 93778,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93810,
      foldFull: [ 93810 ]
  }, {
      code: 93779,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93811,
      foldFull: [ 93811 ]
  }, {
      code: 93780,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93812,
      foldFull: [ 93812 ]
  }, {
      code: 93781,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93813,
      foldFull: [ 93813 ]
  }, {
      code: 93782,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93814,
      foldFull: [ 93814 ]
  }, {
      code: 93783,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93815,
      foldFull: [ 93815 ]
  }, {
      code: 93784,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93816,
      foldFull: [ 93816 ]
  }, {
      code: 93785,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93817,
      foldFull: [ 93817 ]
  }, {
      code: 93786,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93818,
      foldFull: [ 93818 ]
  }, {
      code: 93787,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93819,
      foldFull: [ 93819 ]
  }, {
      code: 93788,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93820,
      foldFull: [ 93820 ]
  }, {
      code: 93789,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93821,
      foldFull: [ 93821 ]
  }, {
      code: 93790,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93822,
      foldFull: [ 93822 ]
  }, {
      code: 93791,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 93823,
      foldFull: [ 93823 ]
  }, {
      code: 125184,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125218,
      foldFull: [ 125218 ]
  }, {
      code: 125185,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125219,
      foldFull: [ 125219 ]
  }, {
      code: 125186,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125220,
      foldFull: [ 125220 ]
  }, {
      code: 125187,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125221,
      foldFull: [ 125221 ]
  }, {
      code: 125188,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125222,
      foldFull: [ 125222 ]
  }, {
      code: 125189,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125223,
      foldFull: [ 125223 ]
  }, {
      code: 125190,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125224,
      foldFull: [ 125224 ]
  }, {
      code: 125191,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125225,
      foldFull: [ 125225 ]
  }, {
      code: 125192,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125226,
      foldFull: [ 125226 ]
  }, {
      code: 125193,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125227,
      foldFull: [ 125227 ]
  }, {
      code: 125194,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125228,
      foldFull: [ 125228 ]
  }, {
      code: 125195,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125229,
      foldFull: [ 125229 ]
  }, {
      code: 125196,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125230,
      foldFull: [ 125230 ]
  }, {
      code: 125197,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125231,
      foldFull: [ 125231 ]
  }, {
      code: 125198,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125232,
      foldFull: [ 125232 ]
  }, {
      code: 125199,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125233,
      foldFull: [ 125233 ]
  }, {
      code: 125200,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125234,
      foldFull: [ 125234 ]
  }, {
      code: 125201,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125235,
      foldFull: [ 125235 ]
  }, {
      code: 125202,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125236,
      foldFull: [ 125236 ]
  }, {
      code: 125203,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125237,
      foldFull: [ 125237 ]
  }, {
      code: 125204,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125238,
      foldFull: [ 125238 ]
  }, {
      code: 125205,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125239,
      foldFull: [ 125239 ]
  }, {
      code: 125206,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125240,
      foldFull: [ 125240 ]
  }, {
      code: 125207,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125241,
      foldFull: [ 125241 ]
  }, {
      code: 125208,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125242,
      foldFull: [ 125242 ]
  }, {
      code: 125209,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125243,
      foldFull: [ 125243 ]
  }, {
      code: 125210,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125244,
      foldFull: [ 125244 ]
  }, {
      code: 125211,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125245,
      foldFull: [ 125245 ]
  }, {
      code: 125212,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125246,
      foldFull: [ 125246 ]
  }, {
      code: 125213,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125247,
      foldFull: [ 125247 ]
  }, {
      code: 125214,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125248,
      foldFull: [ 125248 ]
  }, {
      code: 125215,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125249,
      foldFull: [ 125249 ]
  }, {
      code: 125216,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125250,
      foldFull: [ 125250 ]
  }, {
      code: 125217,
      lower: [  ],
      title: [  ],
      upper: [  ],
      fold: 125251,
      foldFull: [ 125251 ]
  } ];
  var recCmp = function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordInt)(v.code)(v1.code);
      };
  };
  var findRule = function (code) {
      var v = Data_CodePoint_Unicode_Internal.bsearch(zeroRec(code))(rules)(Data_Array.length(rules))(recCmp);
      if (v instanceof Data_Maybe.Nothing) {
          return zeroRec(code);
      };
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal.Casing (line 1628, column 17 - line 1630, column 14): " + [ v.constructor.name ]);
  };
  var lower = function (code) {
      var lowered = (findRule(code)).lower;
      var $11 = Data_Array["null"](lowered);
      if ($11) {
          return [ Data_CodePoint_Unicode_Internal.uTowlower(code) ];
      };
      return lowered;
  };
  var title = function (code) {
      var titled = (findRule(code)).title;
      var $12 = Data_Array["null"](titled);
      if ($12) {
          return [ Data_CodePoint_Unicode_Internal.uTowtitle(code) ];
      };
      return titled;
  };
  exports["lower"] = lower;
  exports["title"] = title;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._fromCodePointArray = function (singleton) {
    return hasFromCodePoint
      ? function (cps) {
        // Function.prototype.apply will fail for very large second parameters,
        // so we don't use it for arrays with 10,000 or more entries.
        if (cps.length < 10e3) {
          return String.fromCodePoint.apply(String, cps);
        }
        return cps.map(singleton).join("");
      }
      : function (cps) {
        return cps.map(singleton).join("");
      };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];                
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  };
  var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                                   
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["toChar"] = toChar;
  exports["uncons"] = uncons;
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };
  var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordCodePoint = new Data_Ord.Ord(function () {
      return eqCodePoint;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var codePointFromChar = (function () {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function ($56) {
          return CodePoint($55($56));
      };
  })();
  var boundedCodePoint = new Data_Bounded.Bounded(function () {
      return ordCodePoint;
  }, 0, 1114111);
  var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
      return boundedCodePoint;
  }, function () {
      return enumCodePoint;
  }, 1114111 + 1 | 0, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 1114111) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [ n.constructor.name ]);
  });
  var enumCodePoint = new Data_Enum.Enum(function () {
      return ordCodePoint;
  }, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
  exports["codePointFromChar"] = codePointFromChar;
  exports["fromCodePointArray"] = fromCodePointArray;
  exports["toCodePointArray"] = toCodePointArray;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["indexOf"] = indexOf;
  exports["drop"] = drop;
  exports["boundedEnumCodePoint"] = boundedEnumCodePoint;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.CodePoint.Unicode"] = $PS["Data.CodePoint.Unicode"] || {};
  var exports = $PS["Data.CodePoint.Unicode"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_CodePoint_Unicode_Internal = $PS["Data.CodePoint.Unicode.Internal"];
  var Data_CodePoint_Unicode_Internal_Casing = $PS["Data.CodePoint.Unicode.Internal.Casing"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var modifyFull = Unsafe_Coerce.unsafeCoerce;
  var toLower = modifyFull(Data_CodePoint_Unicode_Internal_Casing.lower);
  var toTitle = modifyFull(Data_CodePoint_Unicode_Internal_Casing.title);
  var modify = Unsafe_Coerce.unsafeCoerce;
  var toLowerSimple = modify(Data_CodePoint_Unicode_Internal.uTowlower);
  var toUpperSimple = modify(Data_CodePoint_Unicode_Internal.uTowupper);
  var isUpper = (function () {
      var $54 = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);
      return function ($55) {
          return Data_CodePoint_Unicode_Internal.uIswupper($54($55));
      };
  })();
  var isSpace = function (c) {
      var uc = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c);
      var $16 = uc <= 823;
      if ($16) {
          return uc === 32 || (uc >= 9 && uc <= 13 || uc === 160);
      };
      return Data_CodePoint_Unicode_Internal.uIswspace(uc);
  };   
  var isOctDigit = function (c) {
      var diff = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("0") | 0;
      return diff <= 7 && diff >= 0;
  };
  var isDecDigit = function (c) {
      var diff = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("0") | 0;
      return diff <= 9 && diff >= 0;
  };
  var isHexDigit = function (c) {
      return isDecDigit(c) || ((function () {
          var diff = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("A") | 0;
          return diff <= 5 && diff >= 0;
      })() || (function () {
          var diff = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("a") | 0;
          return diff <= 5 && diff >= 0;
      })());
  };
  var isAlphaNum = (function () {
      var $62 = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);
      return function ($63) {
          return Data_CodePoint_Unicode_Internal.uIswalnum($62($63));
      };
  })();
  var isAlpha = (function () {
      var $64 = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);
      return function ($65) {
          return Data_CodePoint_Unicode_Internal.uIswalpha($64($65));
      };
  })();
  var hexDigitToInt = function (c) {
      var hexUpper = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("A") | 0;
      var hexLower = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("a") | 0;
      var dec = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(c) - Data_Char.toCharCode("0") | 0;
      var result = (function () {
          if (dec <= 9 && dec >= 0) {
              return new Data_Maybe.Just(dec);
          };
          if (hexLower <= 5 && hexLower >= 0) {
              return Data_Maybe.Just.create(hexLower + 10 | 0);
          };
          if (hexUpper <= 5 && hexUpper >= 0) {
              return Data_Maybe.Just.create(hexUpper + 10 | 0);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode (line 585, column 5 - line 585, column 24): " + [  ]);
      })();
      return result;
  };
  exports["isUpper"] = isUpper;
  exports["isAlpha"] = isAlpha;
  exports["isAlphaNum"] = isAlphaNum;
  exports["isDecDigit"] = isDecDigit;
  exports["isOctDigit"] = isOctDigit;
  exports["isHexDigit"] = isHexDigit;
  exports["isSpace"] = isSpace;
  exports["hexDigitToInt"] = hexDigitToInt;
  exports["toLower"] = toLower;
  exports["toTitle"] = toTitle;
  exports["toLowerSimple"] = toLowerSimple;
  exports["toUpperSimple"] = toUpperSimple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var applyLazy = new Control_Apply.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Control_Bind.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  exports["bindLazy"] = bindLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Function.Memoize"] = $PS["Data.Function.Memoize"] || {};
  var exports = $PS["Data.Function.Memoize"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var Tabulate = function (tabulate) {
      this.tabulate = tabulate;
  };
  var NatTrie = (function () {
      function NatTrie(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      NatTrie.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new NatTrie(value0, value1, value2);
              };
          };
      };
      return NatTrie;
  })();
  var tabulateNat = new Tabulate((function () {
      var tabulateImpl = function (f) {
          var walk = function (v) {
              return function (v1) {
                  if (v instanceof Data_List_Types.Nil) {
                      return v1.value0;
                  };
                  if (v instanceof Data_List_Types.Cons && !v.value0) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value1)(walk(v.value1));
                  };
                  if (v instanceof Data_List_Types.Cons && v.value0) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value2)(walk(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.Function.Memoize (line 137, column 11 - line 137, column 64): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var build = function (n) {
              return new NatTrie(Data_Lazy.defer(function (v) {
                  return f(n);
              }), Data_Lazy.defer(function (v) {
                  return build(n * 2 | 0);
              }), Data_Lazy.defer(function (v) {
                  return build((n * 2 | 0) + 1 | 0);
              }));
          };
          var trie = build(0);
          var bits = (function () {
              var bits$prime = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v === 0) {
                              $tco_done = true;
                              return acc;
                          };
                          $tco_var_acc = new Data_List_Types.Cons((v & 1) !== 0, acc);
                          $copy_v = v >>> 1;
                          return;
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return bits$prime(Data_List_Types.Nil.value);
          })();
          var go = function (n) {
              return walk(bits(n))(trie);
          };
          return go;
      };
      return tabulateImpl;
  })());
  var tabulate = function (dict) {
      return dict.tabulate;
  };
  var tabulateTuple = function (dictTabulate) {
      return function (dictTabulate1) {
          return new Tabulate(function (f) {
              var f$prime = tabulate(dictTabulate)(function (a) {
                  return tabulate(dictTabulate1)(function (b) {
                      return f(new Data_Tuple.Tuple(a, b));
                  });
              });
              return function (v) {
                  return Control_Bind.bind(Data_Lazy.bindLazy)(f$prime(v.value0))(function (g) {
                      return g(v.value1);
                  });
              };
          });
      };
  }; 
  var memoize = function (dictTabulate) {
      return function (f) {
          var f1 = tabulate(dictTabulate)(f);
          return function ($105) {
              return Data_Lazy.force(f1($105));
          };
      };
  };
  var memoize2 = function (dictTabulate) {
      return function (dictTabulate1) {
          return function (f) {
              var f1 = memoize(tabulateTuple(dictTabulate)(dictTabulate1))(Data_Tuple.uncurry(f));
              return Data_Tuple.curry(f1);
          };
      };
  };
  exports["memoize2"] = memoize2;
  exports["tabulateNat"] = tabulateNat;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Ord.Min"] = $PS["Data.Ord.Min"] || {};
  var exports = $PS["Data.Ord.Min"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Min = function (x) {
      return x;
  };
  var semigroupMin = function (dictOrd) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Ord.min(dictOrd)(v)(v1);
          };
      });
  };
  exports["Min"] = Min;
  exports["semigroupMin"] = semigroupMin;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semigroup.Foldable"] = $PS["Data.Semigroup.Foldable"] || {};
  var exports = $PS["Data.Semigroup.Foldable"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord_Min = $PS["Data.Ord.Min"];
  var Foldable1 = function (Foldable0, foldMap1, foldl1, foldr1) {
      this.Foldable0 = Foldable0;
      this.foldMap1 = foldMap1;
      this.foldl1 = foldl1;
      this.foldr1 = foldr1;
  };
  var foldMap1 = function (dict) {
      return dict.foldMap1;
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable1) {
          return Data_Newtype.ala()()()(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
      };
  };
  exports["Foldable1"] = Foldable1;
  exports["minimum"] = minimum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];  
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  var foldable1NonEmpty = function (dictFoldable) {
      return new Data_Semigroup_Foldable.Foldable1(function () {
          return foldableNonEmpty(dictFoldable);
      }, function (dictSemigroup) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(function (s) {
                      return function (a1) {
                          return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                      };
                  })(f(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
      }, function (f) {
          return function (v) {
              return Data_Maybe.maybe(v.value0)(f(v.value0))(Data_Foldable.foldr(dictFoldable)(function (a1) {
                  var $156 = Data_Maybe.maybe(a1)(f(a1));
                  return function ($157) {
                      return Data_Maybe.Just.create($156($157));
                  };
              })(Data_Maybe.Nothing.value)(v.value1));
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["foldable1NonEmpty"] = foldable1NonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var cons$prime = function (x) {
      return function (xs) {
          return new Data_NonEmpty.NonEmpty(x, xs);
      };
  };
  exports["cons'"] = cons$prime;
})(PS);
(function(exports) {
  "use strict";

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["split"] = $foreign.split;
  exports["toLower"] = $foreign.toLower;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                                                          
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["match"] = match;
  exports["test"] = $foreign.test;
  exports["split"] = $foreign.split;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  exports["noFlags"] = noFlags;
  exports["global"] = global;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Regex.Unsafe"] = $PS["Data.String.Regex.Unsafe"] || {};
  var exports = $PS["Data.String.Regex.Unsafe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.either(Partial_Unsafe.unsafeCrashWith)(Control_Category.identity(Control_Category.categoryFn))(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Unicode"] = $PS["Data.String.Unicode"] || {};
  var exports = $PS["Data.String.Unicode"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_CodePoint_Unicode = $PS["Data.CodePoint.Unicode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];                
  var convertFull = function (f) {
      var $0 = Control_Bind.bindFlipped(Control_Bind.bindArray)(f);
      return function ($1) {
          return Data_String_CodePoints.fromCodePointArray($0(Data_String_CodePoints.toCodePointArray($1)));
      };
  };
  var toLower = convertFull(Data_CodePoint_Unicode.toLower);
  var convert = function (f) {
      var $2 = Data_Functor.map(Data_Functor.functorArray)(f);
      return function ($3) {
          return Data_String_CodePoints.fromCodePointArray($2(Data_String_CodePoints.toCodePointArray($3)));
      };
  };
  var toLowerSimple = convert(Data_CodePoint_Unicode.toLowerSimple);
  var toUpperSimple = convert(Data_CodePoint_Unicode.toUpperSimple);
  exports["toLower"] = toLower;
  exports["toUpperSimple"] = toUpperSimple;
  exports["toLowerSimple"] = toLowerSimple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.String.Extra"] = $PS["Data.String.Extra"] || {};
  var exports = $PS["Data.String.Extra"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_CodePoint_Unicode = $PS["Data.CodePoint.Unicode"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_String_Unicode = $PS["Data.String.Unicode"];                
  var upperCaseFirst = (function () {
      var $9 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v) {
          return Data_String_CodePoints.fromCodePointArray(Data_CodePoint_Unicode.toTitle(v.head)) + Data_String_Unicode.toLower(v.tail);
      });
      return function ($10) {
          return $9(Data_String_CodePoints.uncons($10));
      };
  })();
  var regexGlobal = function (regexStr) {
      return Data_String_Regex_Unsafe.unsafeRegex(regexStr)(Data_String_Regex_Flags.global);
  };
  var regexHasASCIIWords = regexGlobal("[^\x00-/:-@[-`{-\x7f]+");
  var regexHasUnicodeWords = regexGlobal("[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9]");
  var regexUnicodeWords = (function () {
      var rsUpper = "[" + ("A-Z\\xc0-\\xd6\\xd8-\\xde" + "]");
      var rsOptVar = "[" + ("\\ufe0e\\ufe0f" + "]?");
      var rsLower = "[" + ("a-z\\xdf-\\xf6\\xf8-\\xff" + "]");
      var rsDingbat = "[" + ("\\u2700-\\u27bf" + "]");
      var rsBreakRange = "\\xac\\xb1\\xd7\\xf7" + ("\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf" + ("\\u2000-\\u206f" + " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000"));
      var rsBreak = "[" + (rsBreakRange + "]");
      var rsMisc = "[^" + ("\\ud800-\\udfff" + (rsBreakRange + ("\\d" + ("\\u2700-\\u27bf" + ("a-z\\xdf-\\xf6\\xf8-\\xff" + ("A-Z\\xc0-\\xd6\\xd8-\\xde" + "]"))))));
      var rsMiscLower = "(?:" + (rsLower + ("|" + (rsMisc + ")")));
      var rsMiscUpper = "(?:" + (rsUpper + ("|" + (rsMisc + ")")));
      var rsNonAstral = "[^" + ("\\ud800-\\udfff" + "]");
      var rsOptContrLower = "(?:" + ("['\\u2019]" + "(?:d|ll|m|re|s|t|ve))?");
      var rsOptContrUpper = "(?:" + ("['\\u2019]" + "(?:D|LL|M|RE|S|T|VE))?");
      var rsComboRange = "\\u0300-\\u036f" + ("\\ufe20-\\ufe2f" + ("\\u20d0-\\u20ff" + ("\\u1ab0-\\u1aff" + "\\u1dc0-\\u1dff")));
      var rsCombo = "[" + (rsComboRange + "]");
      var rsModifier = "(?:" + (rsCombo + ("|" + ("\\ud83c[\\udffb-\\udfff]" + ")")));
      var reOptMod = rsModifier + "?";
      var rsOptJoin = "(?:" + ("\\u200d" + ("(?:" + (rsNonAstral + ("|" + ("(?:\\ud83c[\\udde6-\\uddff]){2}" + ("|" + ("[\\ud800-\\udbff][\\udc00-\\udfff]" + (")" + (rsOptVar + (reOptMod + ")*"))))))))));
      var rsSeq = rsOptVar + (reOptMod + rsOptJoin);
      var rsEmoji = "(?:" + (rsDingbat + ("|" + ("(?:\\ud83c[\\udde6-\\uddff]){2}" + ("|" + ("[\\ud800-\\udbff][\\udc00-\\udfff]" + (")" + rsSeq))))));
      return regexGlobal(Data_String_Common.joinWith("|")([ rsUpper + ("?" + (rsLower + ("+" + (rsOptContrLower + ("(?=" + (rsBreak + ("|" + (rsUpper + "|$)")))))))), rsMiscUpper + ("+" + (rsOptContrUpper + ("(?=" + (rsBreak + ("|" + (rsUpper + (rsMiscLower + "|$)"))))))), rsUpper + ("?" + (rsMiscLower + ("+" + rsOptContrLower))), rsUpper + ("+" + rsOptContrUpper), "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", "\\d" + "+", rsEmoji ]));
  })();
  var unicodeWords = (function () {
      var $11 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Data_Array_NonEmpty.catMaybes);
      var $12 = Data_String_Regex.match(regexUnicodeWords);
      return function ($13) {
          return $11($12($13));
      };
  })();
  var hasUnicodeWords = Data_String_Regex.test(regexHasUnicodeWords);
  var asciiWords = (function () {
      var $14 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Data_Array_NonEmpty.catMaybes);
      var $15 = Data_String_Regex.match(regexHasASCIIWords);
      return function ($16) {
          return $14($15($16));
      };
  })();
  var words = function (string) {
      var $5 = hasUnicodeWords(string);
      if ($5) {
          return unicodeWords(string);
      };
      return asciiWords(string);
  };   
  var pascalCase = (function () {
      var $20 = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(upperCaseFirst);
      return function ($21) {
          return $20(words($21));
      };
  })();
  var camelCase = (function () {
      var $22 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v) {
          return Data_String_Unicode.toLower(v.head) + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(pascalCase)(v.tail);
      });
      return function ($23) {
          return $22(Data_Array.uncons(words($23)));
      };
  })();
  exports["camelCase"] = camelCase;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  var semigroupEffect = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
  };
  var monoidEffect = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffect(dictMonoid.Semigroup0());
      }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monoidEffect"] = monoidEffect;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                          
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  exports["error"] = $foreign.error;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["ExitCodes"] = $PS["ExitCodes"] || {};
  var exports = $PS["ExitCodes"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Success = (function () {
      function Success() {

      };
      Success.value = new Success();
      return Success;
  })();
  var $$Error = (function () {
      function $$Error() {

      };
      $$Error.value = new $$Error();
      return $$Error;
  })();
  var MisuseOfShellBuiltins = (function () {
      function MisuseOfShellBuiltins() {

      };
      MisuseOfShellBuiltins.value = new MisuseOfShellBuiltins();
      return MisuseOfShellBuiltins;
  })();
  var CLIUsageError = (function () {
      function CLIUsageError() {

      };
      CLIUsageError.value = new CLIUsageError();
      return CLIUsageError;
  })();
  var DataFormatError = (function () {
      function DataFormatError() {

      };
      DataFormatError.value = new DataFormatError();
      return DataFormatError;
  })();
  var CannotOpenInput = (function () {
      function CannotOpenInput() {

      };
      CannotOpenInput.value = new CannotOpenInput();
      return CannotOpenInput;
  })();
  var AddresseeUnknown = (function () {
      function AddresseeUnknown() {

      };
      AddresseeUnknown.value = new AddresseeUnknown();
      return AddresseeUnknown;
  })();
  var HostNameUnknown = (function () {
      function HostNameUnknown() {

      };
      HostNameUnknown.value = new HostNameUnknown();
      return HostNameUnknown;
  })();
  var ServiceUnavailable = (function () {
      function ServiceUnavailable() {

      };
      ServiceUnavailable.value = new ServiceUnavailable();
      return ServiceUnavailable;
  })();
  var InternalSoftwareError = (function () {
      function InternalSoftwareError() {

      };
      InternalSoftwareError.value = new InternalSoftwareError();
      return InternalSoftwareError;
  })();
  var SystemError = (function () {
      function SystemError() {

      };
      SystemError.value = new SystemError();
      return SystemError;
  })();
  var CriticalOSFileMissing = (function () {
      function CriticalOSFileMissing() {

      };
      CriticalOSFileMissing.value = new CriticalOSFileMissing();
      return CriticalOSFileMissing;
  })();
  var CannotCreateOutputFile = (function () {
      function CannotCreateOutputFile() {

      };
      CannotCreateOutputFile.value = new CannotCreateOutputFile();
      return CannotCreateOutputFile;
  })();
  var IOError = (function () {
      function IOError() {

      };
      IOError.value = new IOError();
      return IOError;
  })();
  var TemporaryFailure = (function () {
      function TemporaryFailure() {

      };
      TemporaryFailure.value = new TemporaryFailure();
      return TemporaryFailure;
  })();
  var RemoteError = (function () {
      function RemoteError() {

      };
      RemoteError.value = new RemoteError();
      return RemoteError;
  })();
  var PermissionDenied = (function () {
      function PermissionDenied() {

      };
      PermissionDenied.value = new PermissionDenied();
      return PermissionDenied;
  })();
  var ConfigurationError = (function () {
      function ConfigurationError() {

      };
      ConfigurationError.value = new ConfigurationError();
      return ConfigurationError;
  })();
  var CannotExecute = (function () {
      function CannotExecute() {

      };
      CannotExecute.value = new CannotExecute();
      return CannotExecute;
  })();
  var CommandNotFound = (function () {
      function CommandNotFound() {

      };
      CommandNotFound.value = new CommandNotFound();
      return CommandNotFound;
  })();
  var InvalidExitArgument = (function () {
      function InvalidExitArgument() {

      };
      InvalidExitArgument.value = new InvalidExitArgument();
      return InvalidExitArgument;
  })();
  var SIGHUP = (function () {
      function SIGHUP() {

      };
      SIGHUP.value = new SIGHUP();
      return SIGHUP;
  })();
  var SIGINT = (function () {
      function SIGINT() {

      };
      SIGINT.value = new SIGINT();
      return SIGINT;
  })();
  var SIGQUIT = (function () {
      function SIGQUIT() {

      };
      SIGQUIT.value = new SIGQUIT();
      return SIGQUIT;
  })();
  var SIGILL = (function () {
      function SIGILL() {

      };
      SIGILL.value = new SIGILL();
      return SIGILL;
  })();
  var SIGABRT = (function () {
      function SIGABRT() {

      };
      SIGABRT.value = new SIGABRT();
      return SIGABRT;
  })();
  var SIGFPE = (function () {
      function SIGFPE() {

      };
      SIGFPE.value = new SIGFPE();
      return SIGFPE;
  })();
  var SIGKILL = (function () {
      function SIGKILL() {

      };
      SIGKILL.value = new SIGKILL();
      return SIGKILL;
  })();
  var SIGSEGV = (function () {
      function SIGSEGV() {

      };
      SIGSEGV.value = new SIGSEGV();
      return SIGSEGV;
  })();
  var SIGPIPE = (function () {
      function SIGPIPE() {

      };
      SIGPIPE.value = new SIGPIPE();
      return SIGPIPE;
  })();
  var SIGALRM = (function () {
      function SIGALRM() {

      };
      SIGALRM.value = new SIGALRM();
      return SIGALRM;
  })();
  var SIGTERM = (function () {
      function SIGTERM() {

      };
      SIGTERM.value = new SIGTERM();
      return SIGTERM;
  })();
  var eqExitCode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Success && y instanceof Success) {
              return true;
          };
          if (x instanceof $$Error && y instanceof $$Error) {
              return true;
          };
          if (x instanceof MisuseOfShellBuiltins && y instanceof MisuseOfShellBuiltins) {
              return true;
          };
          if (x instanceof CLIUsageError && y instanceof CLIUsageError) {
              return true;
          };
          if (x instanceof DataFormatError && y instanceof DataFormatError) {
              return true;
          };
          if (x instanceof CannotOpenInput && y instanceof CannotOpenInput) {
              return true;
          };
          if (x instanceof AddresseeUnknown && y instanceof AddresseeUnknown) {
              return true;
          };
          if (x instanceof HostNameUnknown && y instanceof HostNameUnknown) {
              return true;
          };
          if (x instanceof ServiceUnavailable && y instanceof ServiceUnavailable) {
              return true;
          };
          if (x instanceof InternalSoftwareError && y instanceof InternalSoftwareError) {
              return true;
          };
          if (x instanceof SystemError && y instanceof SystemError) {
              return true;
          };
          if (x instanceof CriticalOSFileMissing && y instanceof CriticalOSFileMissing) {
              return true;
          };
          if (x instanceof CannotCreateOutputFile && y instanceof CannotCreateOutputFile) {
              return true;
          };
          if (x instanceof IOError && y instanceof IOError) {
              return true;
          };
          if (x instanceof TemporaryFailure && y instanceof TemporaryFailure) {
              return true;
          };
          if (x instanceof RemoteError && y instanceof RemoteError) {
              return true;
          };
          if (x instanceof PermissionDenied && y instanceof PermissionDenied) {
              return true;
          };
          if (x instanceof ConfigurationError && y instanceof ConfigurationError) {
              return true;
          };
          if (x instanceof CannotExecute && y instanceof CannotExecute) {
              return true;
          };
          if (x instanceof CommandNotFound && y instanceof CommandNotFound) {
              return true;
          };
          if (x instanceof InvalidExitArgument && y instanceof InvalidExitArgument) {
              return true;
          };
          if (x instanceof SIGHUP && y instanceof SIGHUP) {
              return true;
          };
          if (x instanceof SIGINT && y instanceof SIGINT) {
              return true;
          };
          if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
              return true;
          };
          if (x instanceof SIGILL && y instanceof SIGILL) {
              return true;
          };
          if (x instanceof SIGABRT && y instanceof SIGABRT) {
              return true;
          };
          if (x instanceof SIGFPE && y instanceof SIGFPE) {
              return true;
          };
          if (x instanceof SIGKILL && y instanceof SIGKILL) {
              return true;
          };
          if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
              return true;
          };
          if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
              return true;
          };
          if (x instanceof SIGALRM && y instanceof SIGALRM) {
              return true;
          };
          if (x instanceof SIGTERM && y instanceof SIGTERM) {
              return true;
          };
          return false;
      };
  });
  var ordExitCode = new Data_Ord.Ord(function () {
      return eqExitCode;
  }, function (x) {
      return function (y) {
          if (x instanceof Success && y instanceof Success) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Success) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Success) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof $$Error && y instanceof $$Error) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof $$Error) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof $$Error) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof MisuseOfShellBuiltins && y instanceof MisuseOfShellBuiltins) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof MisuseOfShellBuiltins) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof MisuseOfShellBuiltins) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CLIUsageError && y instanceof CLIUsageError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CLIUsageError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CLIUsageError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof DataFormatError && y instanceof DataFormatError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof DataFormatError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof DataFormatError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CannotOpenInput && y instanceof CannotOpenInput) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CannotOpenInput) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CannotOpenInput) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AddresseeUnknown && y instanceof AddresseeUnknown) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof AddresseeUnknown) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AddresseeUnknown) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HostNameUnknown && y instanceof HostNameUnknown) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HostNameUnknown) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HostNameUnknown) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ServiceUnavailable && y instanceof ServiceUnavailable) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ServiceUnavailable) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ServiceUnavailable) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof InternalSoftwareError && y instanceof InternalSoftwareError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof InternalSoftwareError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof InternalSoftwareError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SystemError && y instanceof SystemError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SystemError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SystemError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CriticalOSFileMissing && y instanceof CriticalOSFileMissing) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CriticalOSFileMissing) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CriticalOSFileMissing) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CannotCreateOutputFile && y instanceof CannotCreateOutputFile) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CannotCreateOutputFile) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CannotCreateOutputFile) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof IOError && y instanceof IOError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof IOError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof IOError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof TemporaryFailure && y instanceof TemporaryFailure) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof TemporaryFailure) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof TemporaryFailure) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof RemoteError && y instanceof RemoteError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof RemoteError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof RemoteError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PermissionDenied && y instanceof PermissionDenied) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PermissionDenied) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PermissionDenied) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ConfigurationError && y instanceof ConfigurationError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ConfigurationError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ConfigurationError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CannotExecute && y instanceof CannotExecute) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CannotExecute) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CannotExecute) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CommandNotFound && y instanceof CommandNotFound) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CommandNotFound) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CommandNotFound) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof InvalidExitArgument && y instanceof InvalidExitArgument) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof InvalidExitArgument) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof InvalidExitArgument) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGHUP && y instanceof SIGHUP) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGHUP) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGHUP) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGINT && y instanceof SIGINT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGINT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGINT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGQUIT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGQUIT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGILL && y instanceof SIGILL) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGILL) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGILL) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGABRT && y instanceof SIGABRT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGABRT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGABRT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGFPE && y instanceof SIGFPE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGFPE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGFPE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGKILL && y instanceof SIGKILL) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGKILL) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGKILL) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGSEGV) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGSEGV) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGPIPE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGPIPE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGALRM && y instanceof SIGALRM) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGALRM) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGALRM) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGTERM && y instanceof SIGTERM) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at ExitCodes (line 47, column 1 - line 47, column 44): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumExitCode = new Data_Enum.Enum(function () {
      return ordExitCode;
  }, function (v) {
      if (v instanceof Success) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof $$Error) {
          return new Data_Maybe.Just(Success.value);
      };
      if (v instanceof MisuseOfShellBuiltins) {
          return new Data_Maybe.Just($$Error.value);
      };
      if (v instanceof CLIUsageError) {
          return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
      };
      if (v instanceof DataFormatError) {
          return new Data_Maybe.Just(CLIUsageError.value);
      };
      if (v instanceof CannotOpenInput) {
          return new Data_Maybe.Just(DataFormatError.value);
      };
      if (v instanceof AddresseeUnknown) {
          return new Data_Maybe.Just(CannotOpenInput.value);
      };
      if (v instanceof HostNameUnknown) {
          return new Data_Maybe.Just(AddresseeUnknown.value);
      };
      if (v instanceof ServiceUnavailable) {
          return new Data_Maybe.Just(HostNameUnknown.value);
      };
      if (v instanceof InternalSoftwareError) {
          return new Data_Maybe.Just(ServiceUnavailable.value);
      };
      if (v instanceof SystemError) {
          return new Data_Maybe.Just(InternalSoftwareError.value);
      };
      if (v instanceof CriticalOSFileMissing) {
          return new Data_Maybe.Just(SystemError.value);
      };
      if (v instanceof CannotCreateOutputFile) {
          return new Data_Maybe.Just(CriticalOSFileMissing.value);
      };
      if (v instanceof IOError) {
          return new Data_Maybe.Just(CannotCreateOutputFile.value);
      };
      if (v instanceof TemporaryFailure) {
          return new Data_Maybe.Just(IOError.value);
      };
      if (v instanceof RemoteError) {
          return new Data_Maybe.Just(TemporaryFailure.value);
      };
      if (v instanceof PermissionDenied) {
          return new Data_Maybe.Just(RemoteError.value);
      };
      if (v instanceof ConfigurationError) {
          return new Data_Maybe.Just(PermissionDenied.value);
      };
      if (v instanceof CannotExecute) {
          return new Data_Maybe.Just(ConfigurationError.value);
      };
      if (v instanceof CommandNotFound) {
          return new Data_Maybe.Just(CannotExecute.value);
      };
      if (v instanceof InvalidExitArgument) {
          return new Data_Maybe.Just(CommandNotFound.value);
      };
      if (v instanceof SIGHUP) {
          return new Data_Maybe.Just(InvalidExitArgument.value);
      };
      if (v instanceof SIGINT) {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (v instanceof SIGQUIT) {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (v instanceof SIGILL) {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (v instanceof SIGABRT) {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (v instanceof SIGFPE) {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (v instanceof SIGKILL) {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (v instanceof SIGSEGV) {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (v instanceof SIGPIPE) {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (v instanceof SIGALRM) {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (v instanceof SIGTERM) {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      throw new Error("Failed pattern match at ExitCodes (line 87, column 1 - line 151, column 30): " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof Success) {
          return new Data_Maybe.Just($$Error.value);
      };
      if (v instanceof $$Error) {
          return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
      };
      if (v instanceof MisuseOfShellBuiltins) {
          return new Data_Maybe.Just(CLIUsageError.value);
      };
      if (v instanceof CLIUsageError) {
          return new Data_Maybe.Just(DataFormatError.value);
      };
      if (v instanceof DataFormatError) {
          return new Data_Maybe.Just(CannotOpenInput.value);
      };
      if (v instanceof CannotOpenInput) {
          return new Data_Maybe.Just(AddresseeUnknown.value);
      };
      if (v instanceof AddresseeUnknown) {
          return new Data_Maybe.Just(HostNameUnknown.value);
      };
      if (v instanceof HostNameUnknown) {
          return new Data_Maybe.Just(ServiceUnavailable.value);
      };
      if (v instanceof ServiceUnavailable) {
          return new Data_Maybe.Just(InternalSoftwareError.value);
      };
      if (v instanceof InternalSoftwareError) {
          return new Data_Maybe.Just(SystemError.value);
      };
      if (v instanceof SystemError) {
          return new Data_Maybe.Just(CriticalOSFileMissing.value);
      };
      if (v instanceof CriticalOSFileMissing) {
          return new Data_Maybe.Just(CannotCreateOutputFile.value);
      };
      if (v instanceof CannotCreateOutputFile) {
          return new Data_Maybe.Just(IOError.value);
      };
      if (v instanceof IOError) {
          return new Data_Maybe.Just(TemporaryFailure.value);
      };
      if (v instanceof TemporaryFailure) {
          return new Data_Maybe.Just(RemoteError.value);
      };
      if (v instanceof RemoteError) {
          return new Data_Maybe.Just(PermissionDenied.value);
      };
      if (v instanceof PermissionDenied) {
          return new Data_Maybe.Just(ConfigurationError.value);
      };
      if (v instanceof ConfigurationError) {
          return new Data_Maybe.Just(CannotExecute.value);
      };
      if (v instanceof CannotExecute) {
          return new Data_Maybe.Just(CommandNotFound.value);
      };
      if (v instanceof CommandNotFound) {
          return new Data_Maybe.Just(InvalidExitArgument.value);
      };
      if (v instanceof InvalidExitArgument) {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (v instanceof SIGHUP) {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (v instanceof SIGINT) {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (v instanceof SIGQUIT) {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (v instanceof SIGILL) {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (v instanceof SIGABRT) {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (v instanceof SIGFPE) {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (v instanceof SIGKILL) {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (v instanceof SIGSEGV) {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (v instanceof SIGPIPE) {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (v instanceof SIGALRM) {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      if (v instanceof SIGTERM) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at ExitCodes (line 87, column 1 - line 151, column 30): " + [ v.constructor.name ]);
  });
  var boundedExitCode = new Data_Bounded.Bounded(function () {
      return ordExitCode;
  }, Success.value, SIGTERM.value);
  var boundedEnumExitCode = new Data_Enum.BoundedEnum(function () {
      return boundedExitCode;
  }, function () {
      return enumExitCode;
  }, 32, function (v) {
      if (v instanceof Success) {
          return 0;
      };
      if (v instanceof $$Error) {
          return 1;
      };
      if (v instanceof MisuseOfShellBuiltins) {
          return 2;
      };
      if (v instanceof CLIUsageError) {
          return 64;
      };
      if (v instanceof DataFormatError) {
          return 65;
      };
      if (v instanceof CannotOpenInput) {
          return 66;
      };
      if (v instanceof AddresseeUnknown) {
          return 67;
      };
      if (v instanceof HostNameUnknown) {
          return 68;
      };
      if (v instanceof ServiceUnavailable) {
          return 69;
      };
      if (v instanceof InternalSoftwareError) {
          return 70;
      };
      if (v instanceof SystemError) {
          return 71;
      };
      if (v instanceof CriticalOSFileMissing) {
          return 72;
      };
      if (v instanceof CannotCreateOutputFile) {
          return 73;
      };
      if (v instanceof IOError) {
          return 74;
      };
      if (v instanceof TemporaryFailure) {
          return 75;
      };
      if (v instanceof RemoteError) {
          return 76;
      };
      if (v instanceof PermissionDenied) {
          return 77;
      };
      if (v instanceof ConfigurationError) {
          return 78;
      };
      if (v instanceof CannotExecute) {
          return 126;
      };
      if (v instanceof CommandNotFound) {
          return 127;
      };
      if (v instanceof InvalidExitArgument) {
          return 128;
      };
      if (v instanceof SIGHUP) {
          return 128 + 1 | 0;
      };
      if (v instanceof SIGINT) {
          return 128 + 2 | 0;
      };
      if (v instanceof SIGQUIT) {
          return 128 + 3 | 0;
      };
      if (v instanceof SIGILL) {
          return 128 + 4 | 0;
      };
      if (v instanceof SIGABRT) {
          return 128 + 6 | 0;
      };
      if (v instanceof SIGFPE) {
          return 128 + 8 | 0;
      };
      if (v instanceof SIGKILL) {
          return 128 + 9 | 0;
      };
      if (v instanceof SIGSEGV) {
          return 128 + 11 | 0;
      };
      if (v instanceof SIGPIPE) {
          return 128 + 13 | 0;
      };
      if (v instanceof SIGALRM) {
          return 128 + 14 | 0;
      };
      if (v instanceof SIGTERM) {
          return 128 + 15 | 0;
      };
      throw new Error("Failed pattern match at ExitCodes (line 153, column 1 - line 219, column 30): " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Success.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just($$Error.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
      };
      if (v === 64) {
          return new Data_Maybe.Just(CLIUsageError.value);
      };
      if (v === 65) {
          return new Data_Maybe.Just(DataFormatError.value);
      };
      if (v === 66) {
          return new Data_Maybe.Just(CannotOpenInput.value);
      };
      if (v === 67) {
          return new Data_Maybe.Just(AddresseeUnknown.value);
      };
      if (v === 68) {
          return new Data_Maybe.Just(HostNameUnknown.value);
      };
      if (v === 69) {
          return new Data_Maybe.Just(ServiceUnavailable.value);
      };
      if (v === 70) {
          return new Data_Maybe.Just(InternalSoftwareError.value);
      };
      if (v === 71) {
          return new Data_Maybe.Just(SystemError.value);
      };
      if (v === 72) {
          return new Data_Maybe.Just(CriticalOSFileMissing.value);
      };
      if (v === 73) {
          return new Data_Maybe.Just(CannotCreateOutputFile.value);
      };
      if (v === 74) {
          return new Data_Maybe.Just(IOError.value);
      };
      if (v === 75) {
          return new Data_Maybe.Just(TemporaryFailure.value);
      };
      if (v === 76) {
          return new Data_Maybe.Just(RemoteError.value);
      };
      if (v === 77) {
          return new Data_Maybe.Just(PermissionDenied.value);
      };
      if (v === 78) {
          return new Data_Maybe.Just(ConfigurationError.value);
      };
      if (v === 126) {
          return new Data_Maybe.Just(CannotExecute.value);
      };
      if (v === 127) {
          return new Data_Maybe.Just(CommandNotFound.value);
      };
      if (v === 128) {
          return new Data_Maybe.Just(InvalidExitArgument.value);
      };
      if (v === 129) {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (v === 130) {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (v === 131) {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (v === 132) {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (v === 134) {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (v === 136) {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (v === 137) {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (v === 139) {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (v === 141) {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (v === 142) {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (v === 143) {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      return Data_Maybe.Nothing.value;
  });
  exports["Success"] = Success;
  exports["Error"] = $$Error;
  exports["boundedEnumExitCode"] = boundedEnumExitCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];
  var Data_Show = $PS["Data.Show"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
  });
  exports["UTF8"] = UTF8;
  exports["showEncoding"] = showEncoding;
})(PS);
(function(exports) {
  "use strict";

  exports.handleCallbackImpl = function (left, right, f) {
    return function (err, value) {
      if (err) {
        f(left(err))();
      } else {
        f(right(value))();
      }
    };
  };
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.FS.Async"] = $PS["Node.FS.Async"] || {};
  var exports = $PS["Node.FS.Async"];
  var $foreign = $PS["Node.FS.Async"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var handleCallback = function (cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
  };
  var fs = Node_FS_Internal.unsafeRequireFS;                                                                                  
  var readFile = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFile(file, {}, handleCallback(cb));
          });
      };
  };
  var readTextFile = function (encoding) {
      return function (file) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.readFile(file, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  }, handleCallback(cb));
              });
          };
      };
  };
  var writeFile = function (file) {
      return function (buff) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.writeFile(file, buff, {}, handleCallback(cb));
              });
          };
      };
  };
  var writeTextFile = function (encoding) {
      return function (file) {
          return function (buff) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.writeFile(file, buff, {
                          encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                      }, handleCallback(cb));
                  });
              };
          };
      };
  };
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.FS.Aff"] = $PS["Node.FS.Aff"] || {};
  var exports = $PS["Node.FS.Aff"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_FS_Async = $PS["Node.FS.Async"];                
  var toAff = function (p) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
      });
  };                                        
  var toAff2 = function (f) {
      return function (a) {
          return function (b) {
              return toAff(f(a)(b));
          };
      };
  };                                              
  var toAff3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return toAff(f(a)(b)(c));
              };
          };
      };
  };                                        
  var writeTextFile = toAff3(Node_FS_Async.writeTextFile);
  var readTextFile = toAff2(Node_FS_Async.readTextFile);
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Types"] = $PS["Options.Applicative.Types"] || {};
  var exports = $PS["Options.Applicative.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];                                                  
  var ParserFailure = function (x) {
      return x;
  };
  var Internal = (function () {
      function Internal() {

      };
      Internal.value = new Internal();
      return Internal;
  })();
  var Hidden = (function () {
      function Hidden() {

      };
      Hidden.value = new Hidden();
      return Hidden;
  })();
  var Visible = (function () {
      function Visible() {

      };
      Visible.value = new Visible();
      return Visible;
  })();
  var Leaf = (function () {
      function Leaf(value0) {
          this.value0 = value0;
      };
      Leaf.create = function (value0) {
          return new Leaf(value0);
      };
      return Leaf;
  })();
  var MultNode = (function () {
      function MultNode(value0) {
          this.value0 = value0;
      };
      MultNode.create = function (value0) {
          return new MultNode(value0);
      };
      return MultNode;
  })();
  var AltNode = (function () {
      function AltNode(value0) {
          this.value0 = value0;
      };
      AltNode.create = function (value0) {
          return new AltNode(value0);
      };
      return AltNode;
  })();
  var OptProperties = function (x) {
      return x;
  };
  var OptShort = (function () {
      function OptShort(value0) {
          this.value0 = value0;
      };
      OptShort.create = function (value0) {
          return new OptShort(value0);
      };
      return OptShort;
  })();
  var OptLong = (function () {
      function OptLong(value0) {
          this.value0 = value0;
      };
      OptLong.create = function (value0) {
          return new OptLong(value0);
      };
      return OptLong;
  })();
  var OptHelpInfo = function (x) {
      return x;
  };
  var CmdStart = (function () {
      function CmdStart() {

      };
      CmdStart.value = new CmdStart();
      return CmdStart;
  })();
  var CmdCont = (function () {
      function CmdCont() {

      };
      CmdCont.value = new CmdCont();
      return CmdCont;
  })();
  var CompletionResult = function (x) {
      return x;
  };
  var Success = (function () {
      function Success(value0) {
          this.value0 = value0;
      };
      Success.create = function (value0) {
          return new Success(value0);
      };
      return Success;
  })();
  var Failure = (function () {
      function Failure(value0) {
          this.value0 = value0;
      };
      Failure.create = function (value0) {
          return new Failure(value0);
      };
      return Failure;
  })();
  var CompletionInvoked = (function () {
      function CompletionInvoked(value0) {
          this.value0 = value0;
      };
      CompletionInvoked.create = function (value0) {
          return new CompletionInvoked(value0);
      };
      return CompletionInvoked;
  })();
  var Completer = function (x) {
      return x;
  };
  var Backtrack = (function () {
      function Backtrack() {

      };
      Backtrack.value = new Backtrack();
      return Backtrack;
  })();
  var NoBacktrack = (function () {
      function NoBacktrack() {

      };
      NoBacktrack.value = new NoBacktrack();
      return NoBacktrack;
  })();
  var SubparserInline = (function () {
      function SubparserInline() {

      };
      SubparserInline.value = new SubparserInline();
      return SubparserInline;
  })();
  var ParserPrefs = function (x) {
      return x;
  };
  var Intersperse = (function () {
      function Intersperse() {

      };
      Intersperse.value = new Intersperse();
      return Intersperse;
  })();
  var NoIntersperse = (function () {
      function NoIntersperse() {

      };
      NoIntersperse.value = new NoIntersperse();
      return NoIntersperse;
  })();
  var AllPositionals = (function () {
      function AllPositionals() {

      };
      AllPositionals.value = new AllPositionals();
      return AllPositionals;
  })();
  var ForwardOptions = (function () {
      function ForwardOptions() {

      };
      ForwardOptions.value = new ForwardOptions();
      return ForwardOptions;
  })();
  var ParserInfo = function (x) {
      return x;
  };
  var NilP = (function () {
      function NilP(value0) {
          this.value0 = value0;
      };
      NilP.create = function (value0) {
          return new NilP(value0);
      };
      return NilP;
  })();
  var OptP = (function () {
      function OptP(value0) {
          this.value0 = value0;
      };
      OptP.create = function (value0) {
          return new OptP(value0);
      };
      return OptP;
  })();
  var MultP = (function () {
      function MultP(value0) {
          this.value0 = value0;
      };
      MultP.create = function (value0) {
          return new MultP(value0);
      };
      return MultP;
  })();
  var AltP = (function () {
      function AltP(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AltP.create = function (value0) {
          return function (value1) {
              return new AltP(value0, value1);
          };
      };
      return AltP;
  })();
  var BindP = (function () {
      function BindP(value0) {
          this.value0 = value0;
      };
      BindP.create = function (value0) {
          return new BindP(value0);
      };
      return BindP;
  })();
  var Option = function (x) {
      return x;
  };
  var OptReader = (function () {
      function OptReader(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OptReader.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OptReader(value0, value1, value2);
              };
          };
      };
      return OptReader;
  })();
  var FlagReader = (function () {
      function FlagReader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FlagReader.create = function (value0) {
          return function (value1) {
              return new FlagReader(value0, value1);
          };
      };
      return FlagReader;
  })();
  var ArgReader = (function () {
      function ArgReader(value0) {
          this.value0 = value0;
      };
      ArgReader.create = function (value0) {
          return new ArgReader(value0);
      };
      return ArgReader;
  })();
  var CmdReader = (function () {
      function CmdReader(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CmdReader.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CmdReader(value0, value1, value2);
              };
          };
      };
      return CmdReader;
  })();
  var CReader = function (x) {
      return x;
  };
  var ReadM = function (x) {
      return x;
  };
  var ErrorMsg = (function () {
      function ErrorMsg(value0) {
          this.value0 = value0;
      };
      ErrorMsg.create = function (value0) {
          return new ErrorMsg(value0);
      };
      return ErrorMsg;
  })();
  var InfoMsg = (function () {
      function InfoMsg(value0) {
          this.value0 = value0;
      };
      InfoMsg.create = function (value0) {
          return new InfoMsg(value0);
      };
      return InfoMsg;
  })();
  var ShowHelpText = (function () {
      function ShowHelpText() {

      };
      ShowHelpText.value = new ShowHelpText();
      return ShowHelpText;
  })();
  var MissingError = (function () {
      function MissingError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MissingError.create = function (value0) {
          return function (value1) {
              return new MissingError(value0, value1);
          };
      };
      return MissingError;
  })();
  var ExpectsArgError = (function () {
      function ExpectsArgError(value0) {
          this.value0 = value0;
      };
      ExpectsArgError.create = function (value0) {
          return new ExpectsArgError(value0);
      };
      return ExpectsArgError;
  })();
  var UnexpectedError = (function () {
      function UnexpectedError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UnexpectedError.create = function (value0) {
          return function (value1) {
              return new UnexpectedError(value0, value1);
          };
      };
      return UnexpectedError;
  })();
  var SomeParser = (function () {
      function SomeParser(value0) {
          this.value0 = value0;
      };
      SomeParser.create = function (value0) {
          return new SomeParser(value0);
      };
      return SomeParser;
  })();
  var MultPE = (function () {
      function MultPE(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MultPE.create = function (value0) {
          return function (value1) {
              return new MultPE(value0, value1);
          };
      };
      return MultPE;
  })();
  var Context = (function () {
      function Context(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Context.create = function (value0) {
          return function (value1) {
              return new Context(value0, value1);
          };
      };
      return Context;
  })();
  var ParserM = function (x) {
      return x;
  };
  var readerAsk = Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)));
  var readerAbort = (function () {
      var $247 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity));
      var $248 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($249) {
          return ReadM($247($248($249)));
      };
  })();
  var readerError = function ($250) {
      return readerAbort(ErrorMsg.create($250));
  }; 
  var readMFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(f)(v);
      };
  });
  var readMApply = new Control_Apply.Apply(function () {
      return readMFunctor;
  }, function (v) {
      return function (v1) {
          return ReadM(Control_Apply.apply(Control_Monad_Reader_Trans.applyReaderT(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity)))(v)(v1));
      };
  });
  var readMBind = new Control_Bind.Bind(function () {
      return readMApply;
  }, function (v) {
      return function (f) {
          return ReadM(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity)))(v)((function () {
              var $251 = Data_Newtype.un()(ReadM);
              return function ($252) {
                  return $251(f($252));
              };
          })()));
      };
  });
  var readMApplicative = new Control_Applicative.Applicative(function () {
      return readMApply;
  }, (function () {
      var $253 = Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
      return function ($254) {
          return ReadM($253($254));
      };
  })());
  var parserMMonadRec = Control_Monad_Free.freeMonadRec;
  var parserMBind = Control_Monad_Free.freeBind;  
  var parserMApplicative = Control_Monad_Free.freeApplicative;
  var parseErrorSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (m) {
          return m;
      };
  });     
  var optVisibilityEq = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Internal && y instanceof Internal) {
              return true;
          };
          if (x instanceof Hidden && y instanceof Hidden) {
              return true;
          };
          if (x instanceof Visible && y instanceof Visible) {
              return true;
          };
          return false;
      };
  });
  var optVisibilityOrd = new Data_Ord.Ord(function () {
      return optVisibilityEq;
  }, function (x) {
      return function (y) {
          if (x instanceof Internal && y instanceof Internal) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Internal) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Internal) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Hidden && y instanceof Hidden) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Hidden) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Hidden) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Visible && y instanceof Visible) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 160, column 1 - line 160, column 54): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var optShowDefault = (function () {
      var $255 = Data_Newtype.un()(OptProperties);
      var $256 = Data_Newtype.un()(Option);
      return function ($257) {
          return (function (v) {
              return v.propShowDefault;
          })($255((function (v) {
              return v.optProps;
          })($256($257))));
      };
  })();
  var optVisibility = (function () {
      var $258 = Data_Newtype.un()(OptProperties);
      var $259 = Data_Newtype.un()(Option);
      return function ($260) {
          return (function (v) {
              return v.propVisibility;
          })($258((function (v) {
              return v.optProps;
          })($259($260))));
      };
  })();  
  var optNameEq = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof OptShort && y instanceof OptShort) {
              return x.value0 === y.value0;
          };
          if (x instanceof OptLong && y instanceof OptLong) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var optNameOrd = new Data_Ord.Ord(function () {
      return optNameEq;
  }, function (x) {
      return function (y) {
          if (x instanceof OptShort && y instanceof OptShort) {
              return Data_Ord.compare(Data_Ord.ordChar)(x.value0)(y.value0);
          };
          if (x instanceof OptShort) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof OptShort) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof OptLong && y instanceof OptLong) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 148, column 1 - line 148, column 42): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var optMetaVar = (function () {
      var $261 = Data_Newtype.un()(OptProperties);
      var $262 = Data_Newtype.un()(Option);
      return function ($263) {
          return (function (v) {
              return v.propMetaVar;
          })($261((function (v) {
              return v.optProps;
          })($262($263))));
      };
  })();
  var optHelp = (function () {
      var $264 = Data_Newtype.un()(OptProperties);
      var $265 = Data_Newtype.un()(Option);
      return function ($266) {
          return (function (v) {
              return v.propHelp;
          })($264((function (v) {
              return v.optProps;
          })($265($266))));
      };
  })();
  var optDescMod = (function () {
      var $267 = Data_Newtype.un()(OptProperties);
      var $268 = Data_Newtype.un()(Option);
      return function ($269) {
          return (function (v) {
              return v.propDescMod;
          })($267((function (v) {
              return v.optProps;
          })($268($269))));
      };
  })();
  var oneM = function ($270) {
      return ParserM(Control_Monad_Free.liftF($270));
  };     
  var fromM = function (v) {
      return new BindP(v);
  };
  var completerSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Completer(function (s) {
              return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(v(s)))(v1(s));
          });
      };
  });
  var completerMonoid = new Data_Monoid.Monoid(function () {
      return completerSemigroup;
  }, Completer(function (v) {
      return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
  }));
  var cReaderFunctor = new Data_Functor.Functor(function (f) {
      return Data_Newtype.over()()(CReader)(function (r) {
          return {
              crReader: Data_Functor.map(readMFunctor)(f)(r.crReader),
              crCompleter: r.crCompleter
          };
      });
  });
  var parserInfoFunctor = new Data_Functor.Functor(function (f) {
      return Data_Newtype.over()()(ParserInfo)(function (i) {
          return {
              infoParser: Data_Functor.map(parserFunctor)(f)(i.infoParser),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoHeader: i.infoHeader,
              infoPolicy: i.infoPolicy,
              infoProgDesc: i.infoProgDesc
          };
      });
  });
  var parserFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof NilP) {
              return new NilP(f(v.value0));
          };
          if (v instanceof OptP) {
              return new OptP(Data_Functor.map(optionFunctor)(f)(v.value0));
          };
          if (v instanceof MultP) {
              return Data_Exists.runExists(function (v1) {
                  return MultP.create(Data_Exists.mkExists(new MultPE(Data_Functor.map(parserFunctor)(function (v2) {
                      return function ($271) {
                          return f(v2($271));
                      };
                  })(v1.value0), v1.value1)));
              })(v.value0);
          };
          if (v instanceof AltP) {
              return new AltP(Data_Functor.map(parserFunctor)(f)(v.value0), Data_Functor.map(parserFunctor)(f)(v.value1));
          };
          if (v instanceof BindP) {
              return BindP.create(Data_Functor.map(Control_Monad_Free.freeFunctor)(f)(v.value0));
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 317, column 1 - line 322, column 36): " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var optionFunctor = new Data_Functor.Functor(function (f) {
      return Data_Newtype.over()()(Option)(function (o) {
          return {
              optMain: Data_Functor.map(optReaderFunctor)(f)(o.optMain),
              optProps: o.optProps
          };
      });
  });
  var optReaderFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof OptReader) {
              return new OptReader(v.value0, Data_Functor.map(cReaderFunctor)(f)(v.value1), v.value2);
          };
          if (v instanceof FlagReader) {
              return new FlagReader(v.value0, f(v.value1));
          };
          if (v instanceof ArgReader) {
              return new ArgReader(Data_Functor.map(cReaderFunctor)(f)(v.value0));
          };
          if (v instanceof CmdReader) {
              return new CmdReader(v.value0, v.value1, (function () {
                  var $272 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(parserInfoFunctor)(f));
                  return function ($273) {
                      return $272(v.value2($273));
                  };
              })());
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 264, column 1 - line 268, column 68): " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var parserAlt = new Control_Alt.Alt(function () {
      return parserFunctor;
  }, AltP.create);
  var parserApply = new Control_Apply.Apply(function () {
      return parserFunctor;
  }, function (a) {
      return function (b) {
          return new MultP(Data_Exists.mkExists(new MultPE(a, b)));
      };
  });
  var parserApplicative = new Control_Applicative.Applicative(function () {
      return parserApply;
  }, NilP.create);
  var manyM = function (p) {
      var go = function (acc) {
          return Control_Bind.bind(parserMBind)(oneM(Control_Alt.alt(parserAlt)(Data_Functor.map(parserFunctor)(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(parserApplicative)(new Control_Monad_Rec_Class.Done(Data_Unit.unit)))))(function (aa) {
              return Control_Applicative.pure(parserMApplicative)(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
                  return new Data_List_Types.Cons(v, acc);
              })(function (v) {
                  return Data_List.reverse(acc);
              })(aa));
          });
      };
      return Control_Monad_Rec_Class.tailRecM(parserMMonadRec)(go)(Data_List_Types.Nil.value);
  };
  var many = function ($274) {
      return fromM(manyM($274));
  };       
  var argPolicyEq = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Intersperse && y instanceof Intersperse) {
              return true;
          };
          if (x instanceof NoIntersperse && y instanceof NoIntersperse) {
              return true;
          };
          if (x instanceof AllPositionals && y instanceof AllPositionals) {
              return true;
          };
          if (x instanceof ForwardOptions && y instanceof ForwardOptions) {
              return true;
          };
          return false;
      };
  });
  exports["ErrorMsg"] = ErrorMsg;
  exports["InfoMsg"] = InfoMsg;
  exports["ShowHelpText"] = ShowHelpText;
  exports["MissingError"] = MissingError;
  exports["ExpectsArgError"] = ExpectsArgError;
  exports["UnexpectedError"] = UnexpectedError;
  exports["ParserInfo"] = ParserInfo;
  exports["ParserPrefs"] = ParserPrefs;
  exports["Option"] = Option;
  exports["OptShort"] = OptShort;
  exports["OptLong"] = OptLong;
  exports["OptReader"] = OptReader;
  exports["FlagReader"] = FlagReader;
  exports["ArgReader"] = ArgReader;
  exports["CmdReader"] = CmdReader;
  exports["OptProperties"] = OptProperties;
  exports["Internal"] = Internal;
  exports["Hidden"] = Hidden;
  exports["Visible"] = Visible;
  exports["Backtrack"] = Backtrack;
  exports["NoBacktrack"] = NoBacktrack;
  exports["SubparserInline"] = SubparserInline;
  exports["ReadM"] = ReadM;
  exports["readerAsk"] = readerAsk;
  exports["readerAbort"] = readerAbort;
  exports["readerError"] = readerError;
  exports["CReader"] = CReader;
  exports["NilP"] = NilP;
  exports["OptP"] = OptP;
  exports["MultP"] = MultP;
  exports["AltP"] = AltP;
  exports["BindP"] = BindP;
  exports["Completer"] = Completer;
  exports["CompletionResult"] = CompletionResult;
  exports["ParserFailure"] = ParserFailure;
  exports["Success"] = Success;
  exports["Failure"] = Failure;
  exports["CompletionInvoked"] = CompletionInvoked;
  exports["Intersperse"] = Intersperse;
  exports["NoIntersperse"] = NoIntersperse;
  exports["AllPositionals"] = AllPositionals;
  exports["ForwardOptions"] = ForwardOptions;
  exports["OptHelpInfo"] = OptHelpInfo;
  exports["Leaf"] = Leaf;
  exports["MultNode"] = MultNode;
  exports["AltNode"] = AltNode;
  exports["SomeParser"] = SomeParser;
  exports["Context"] = Context;
  exports["CmdStart"] = CmdStart;
  exports["CmdCont"] = CmdCont;
  exports["optVisibility"] = optVisibility;
  exports["optMetaVar"] = optMetaVar;
  exports["optHelp"] = optHelp;
  exports["optShowDefault"] = optShowDefault;
  exports["optDescMod"] = optDescMod;
  exports["many"] = many;
  exports["parseErrorSemigroup"] = parseErrorSemigroup;
  exports["optNameEq"] = optNameEq;
  exports["optNameOrd"] = optNameOrd;
  exports["optVisibilityEq"] = optVisibilityEq;
  exports["optVisibilityOrd"] = optVisibilityOrd;
  exports["readMApplicative"] = readMApplicative;
  exports["readMBind"] = readMBind;
  exports["parserFunctor"] = parserFunctor;
  exports["parserApply"] = parserApply;
  exports["parserApplicative"] = parserApplicative;
  exports["parserAlt"] = parserAlt;
  exports["completerMonoid"] = completerMonoid;
  exports["argPolicyEq"] = argPolicyEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Internal"] = $PS["Options.Applicative.Internal"] || {};
  var exports = $PS["Options.Applicative.Internal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader = $PS["Control.Monad.Reader"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];                
  var TNil = (function () {
      function TNil() {

      };
      TNil.value = new TNil();
      return TNil;
  })();
  var TCons = (function () {
      function TCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TCons.create = function (value0) {
          return function (value1) {
              return new TCons(value0, value1);
          };
      };
      return TCons;
  })();
  var P = function (x) {
      return x;
  };
  var MonadP = function (Alt1, Monad0, enterContext, errorP, exitContext, exitP, getPrefs, missingArgP) {
      this.Alt1 = Alt1;
      this.Monad0 = Monad0;
      this.enterContext = enterContext;
      this.errorP = errorP;
      this.exitContext = exitContext;
      this.exitP = exitP;
      this.getPrefs = getPrefs;
      this.missingArgP = missingArgP;
  };
  var ListT = function (x) {
      return x;
  };
  var NondetT = function (x) {
      return x;
  };
  var ComplParser = (function () {
      function ComplParser(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ComplParser.create = function (value0) {
          return function (value1) {
              return new ComplParser(value0, value1);
          };
      };
      return ComplParser;
  })();
  var ComplOption = (function () {
      function ComplOption(value0) {
          this.value0 = value0;
      };
      ComplOption.create = function (value0) {
          return new ComplOption(value0);
      };
      return ComplOption;
  })();
  var ComplResult = (function () {
      function ComplResult(value0) {
          this.value0 = value0;
      };
      ComplResult.create = function (value0) {
          return new ComplResult(value0);
      };
      return ComplResult;
  })();
  var Completion = function (x) {
      return x;
  };
  var withReadM = function (f) {
      var f$prime = function (v) {
          if (v instanceof Options_Applicative_Types.ErrorMsg) {
              return new Options_Applicative_Types.ErrorMsg(f(v.value0));
          };
          return v;
      };
      var $136 = Control_Monad_Reader_Trans.mapReaderT(Control_Monad_Except.withExcept(f$prime));
      var $137 = Data_Newtype.un()(Options_Applicative_Types.ReadM);
      return function ($138) {
          return Options_Applicative_Types.ReadM($136($137($138)));
      };
  };
  var stepListT = function (v) {
      return v;
  };
  var runP = function (v) {
      return Control_Monad_Reader.runReader(Data_Function.flip(Control_Monad_State_Trans.runStateT)([  ])(Control_Monad_Except_Trans.runExceptT(v)));
  };
  var runNondetT = function (v) {
      return v;
  };
  var runListT = function (dictMonad) {
      return function (xs) {
          return Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
              if (s instanceof TNil) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
              };
              if (s instanceof TCons) {
                  return Control_Monad.liftM1(dictMonad)(Data_List_Types.Cons.create(s.value0))(runListT(dictMonad)(s.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Internal (line 200, column 3 - line 202, column 53): " + [ s.constructor.name ]);
          });
      };
  };
  var runCompletion = function (v) {
      return function (prefs) {
          var v1 = Control_Monad_Reader_Trans.runReaderT(Control_Monad_Except_Trans.runExceptT(v))(prefs);
          if (v1 instanceof ComplResult) {
              return Data_Maybe.Nothing.value;
          };
          if (v1 instanceof ComplParser) {
              return Data_Maybe.Just.create(new Data_Either.Left(new Data_Tuple.Tuple(v1.value0, v1.value1)));
          };
          if (v1 instanceof ComplOption) {
              return Data_Maybe.Just.create(new Data_Either.Right(v1.value0));
          };
          throw new Error("Failed pattern match at Options.Applicative.Internal (line 170, column 38 - line 173, column 42): " + [ v1.constructor.name ]);
      };
  };
  var pFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return P(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity))))(f)(v));
      };
  });
  var pApply = new Control_Apply.Apply(function () {
      return pFunctor;
  }, function (v) {
      return function (v1) {
          return P(Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(v1));
      };
  });
  var pBind = new Control_Bind.Bind(function () {
      return pApply;
  }, function (v) {
      return function (k) {
          return P(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(function (a) {
              var v1 = k(a);
              return v1;
          }));
      };
  });
  var pApplicative = new Control_Applicative.Applicative(function () {
      return pApply;
  }, function (a) {
      return P(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(a));
  });
  var pMonad = new Control_Monad.Monad(function () {
      return pApplicative;
  }, function () {
      return pBind;
  });
  var pAlt = new Control_Alt.Alt(function () {
      return pFunctor;
  }, function (v) {
      return function (v1) {
          return P(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Options_Applicative_Types.parseErrorSemigroup)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(v1));
      };
  });
  var missingArgP = function (dict) {
      return dict.missingArgP;
  };
  var getPrefs = function (dict) {
      return dict.getPrefs;
  };
  var exitP = function (dict) {
      return dict.exitP;
  };
  var exitContext = function (dict) {
      return dict.exitContext;
  };
  var errorP = function (dict) {
      return dict.errorP;
  };
  var hoistEither = function (dictMonadP) {
      return Data_Either.either(errorP(dictMonadP))(Control_Applicative.pure((dictMonadP.Monad0()).Applicative0()));
  };
  var runReadM = function (dictMonadP) {
      return function (v) {
          return function (s) {
              return hoistEither(dictMonadP)(Control_Monad_Except.runExcept(Control_Monad_Reader_Trans.runReaderT(v)(s)));
          };
      };
  };
  var hoistMaybe = function (dictMonadP) {
      return function (err) {
          return Data_Maybe.maybe(errorP(dictMonadP)(err))(Control_Applicative.pure((dictMonadP.Monad0()).Applicative0()));
      };
  };
  var pMonadP = new MonadP(function () {
      return pAlt;
  }, function () {
      return pMonad;
  }, function (name) {
      return function (pinfo) {
          return P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Data_Array.cons(new Options_Applicative_Types.Context(name, Data_Exists.mkExists(pinfo))))));
      };
  }, (function () {
      var $139 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))));
      return function ($140) {
          return P($139($140));
      };
  })(), P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Data_Array.drop(1)))), function (i) {
      return function (v) {
          return function (p) {
              var $141 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Options_Applicative_Types.MissingError.create(i)(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p)))))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))));
              return function ($142) {
                  return P($141($142));
              };
          };
      };
  }, P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))), function (e) {
      return function (v) {
          return errorP(pMonadP)(e);
      };
  });
  var enterContext = function (dict) {
      return dict.enterContext;
  };
  var contextNames = function (ns) {
      var go = function (v) {
          return v.value0;
      };
      return Data_Array.reverse(Data_Functor.map(Data_Functor.functorArray)(go)(ns));
  };
  var complResultMonad = new Control_Monad.Monad(function () {
      return complResultApplicative;
  }, function () {
      return complResultBind;
  });
  var complResultFunctor = new Data_Functor.Functor(Control_Monad.liftM1(complResultMonad));
  var complResultBind = new Control_Bind.Bind(function () {
      return complResultApply;
  }, function (m) {
      return function (f) {
          if (m instanceof ComplResult) {
              return f(m.value0);
          };
          if (m instanceof ComplParser) {
              return new ComplParser(m.value0, m.value1);
          };
          if (m instanceof ComplOption) {
              return new ComplOption(m.value0);
          };
          throw new Error("Failed pattern match at Options.Applicative.Internal (line 134, column 14 - line 137, column 35): " + [ m.constructor.name ]);
      };
  });
  var complResultApply = new Control_Apply.Apply(function () {
      return complResultFunctor;
  }, Control_Monad.ap(complResultMonad));
  var complResultApplicative = new Control_Applicative.Applicative(function () {
      return complResultApply;
  }, ComplResult.create);
  var completionFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Completion(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Reader_Trans.functorReaderT(complResultFunctor)))(f)(v));
      };
  });
  var completionAlt = new Control_Alt.Alt(function () {
      return completionFunctor;
  }, function (v) {
      return function (v1) {
          return Completion(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Options_Applicative_Types.parseErrorSemigroup)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(v1));
      };
  });
  var completionApply = new Control_Apply.Apply(function () {
      return completionFunctor;
  }, function (v) {
      return function (v1) {
          return Completion(Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(v1));
      };
  });
  var completionApplicative = new Control_Applicative.Applicative(function () {
      return completionApply;
  }, function (a) {
      return Completion(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(a));
  });
  var completionBind = new Control_Bind.Bind(function () {
      return completionApply;
  }, function (v) {
      return function (k) {
          return Completion(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(function (a) {
              var v1 = k(a);
              return v1;
          }));
      };
  });
  var completionMonad = new Control_Monad.Monad(function () {
      return completionApplicative;
  }, function () {
      return completionBind;
  });
  var completionMonadP = new MonadP(function () {
      return completionAlt;
  }, function () {
      return completionMonad;
  }, function (v) {
      return function (v1) {
          return Control_Applicative.pure(completionApplicative)(Data_Unit.unit);
      };
  }, (function () {
      var $143 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)));
      return function ($144) {
          return Completion($143($144));
      };
  })(), Control_Applicative.pure(completionApplicative)(Data_Unit.unit), function (v) {
      return function (a) {
          return function (p) {
              return function (v1) {
                  return Completion(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(complResultMonad)(new ComplParser(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p)), a))));
              };
          };
      };
  }, Completion(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(complResultMonad)))), function (v) {
      var $145 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad));
      var $146 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(complResultMonad);
      return function ($147) {
          return Completion($145($146(ComplOption.create($147))));
      };
  });
  var bimapTStep = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof TNil) {
                  return TNil.value;
              };
              if (v2 instanceof TCons) {
                  return new TCons(v(v2.value0), v1(v2.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Internal (line 186, column 1 - line 186, column 77): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var listTFunctor = function (dictMonad) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return ListT(Control_Monad.liftM1(dictMonad)(bimapTStep(f)(Data_Functor.map(listTFunctor(dictMonad))(f)))(stepListT(v)));
          };
      });
  };
  var listTAlt = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return listTFunctor(dictMonad);
      }, function (xs) {
          return function (ys) {
              return ListT(Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
                  if (s instanceof TNil) {
                      return stepListT(ys);
                  };
                  if (s instanceof TCons) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new TCons(s.value0, Control_Alt.alt(listTAlt(dictMonad))(s.value1)(ys)));
                  };
                  throw new Error("Failed pattern match at Options.Applicative.Internal (line 227, column 5 - line 229, column 49): " + [ s.constructor.name ]);
              }));
          };
      });
  };
  var listTPlus = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return listTAlt(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0())(TNil.value));
  };
  var hoistList = function (dictMonad) {
      return Data_Array.foldr(function (x) {
          return function (xt) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new TCons(x, xt));
          };
      })(Control_Plus.empty(listTPlus(dictMonad)));
  };
  var listTMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      var $148 = Control_Monad.liftM1(dictMonad)(function (v) {
          return new TCons(v, Control_Plus.empty(listTPlus(dictMonad)));
      });
      return function ($149) {
          return ListT($148($149));
      };
  });
  var cut = function (dictMonad) {
      return NondetT(Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonad))(true)));
  };
  var nondetTMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      var $150 = Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad));
      var $151 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad);
      return function ($152) {
          return NondetT($150($151($152)));
      };
  });
  var listTMonad = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return listTApplicative(dictMonad);
      }, function () {
          return listTBind(dictMonad);
      });
  };
  var listTBind = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return listTApply(dictMonad);
      }, function (xs) {
          return function (f) {
              return ListT(Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
                  if (s instanceof TNil) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(TNil.value);
                  };
                  if (s instanceof TCons) {
                      return stepListT(Control_Alt.alt(listTAlt(dictMonad))(f(s.value0))(Control_Bind.bind(listTBind(dictMonad))(s.value1)(f)));
                  };
                  throw new Error("Failed pattern match at Options.Applicative.Internal (line 218, column 5 - line 220, column 53): " + [ s.constructor.name ]);
              }));
          };
      });
  };
  var listTApply = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return listTFunctor(dictMonad);
      }, Control_Monad.ap(listTMonad(dictMonad)));
  };
  var listTApplicative = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return listTApply(dictMonad);
      }, (function () {
          var $153 = hoistList(dictMonad);
          var $154 = Control_Applicative.pure(Control_Applicative.applicativeArray);
          return function ($155) {
              return $153($154($155));
          };
      })());
  };
  var listTAlternative = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return listTApplicative(dictMonad);
      }, function () {
          return listTPlus(dictMonad);
      });
  };
  var nondetTAltOp = function (dictMonad) {
      return function (m1) {
          return function (m2) {
              return NondetT(Control_Alt.alt(listTAlt(Control_Monad_State_Trans.monadStateT(dictMonad)))(runNondetT(m1))(Control_Bind.bind(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonad))))(function (s) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Alternative.guard(listTAlternative(Control_Monad_State_Trans.monadStateT(dictMonad)))(!s))(function () {
                      return runNondetT(m2);
                  });
              })));
          };
      };
  };
  var nondetTFunctor = function (dictMonad) {
      return new Data_Functor.Functor(function (f) {
          var $156 = Data_Functor.map(listTFunctor(Control_Monad_State_Trans.monadStateT(dictMonad)))(f);
          return function ($157) {
              return NondetT($156(runNondetT($157)));
          };
      });
  };
  var nondetTAlt = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return nondetTFunctor(dictMonad);
      }, function (v) {
          return function (v1) {
              return Control_Alt.alt(listTAlt(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(v1);
          };
      });
  };
  var nondetTPlus = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return nondetTAlt(dictMonad);
      }, Control_Plus.empty(listTPlus(Control_Monad_State_Trans.monadStateT(dictMonad))));
  };
  var nondetTApply = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return nondetTFunctor(dictMonad);
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(listTApply(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(v1);
          };
      });
  };
  var nondetTApplicative = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return nondetTApply(dictMonad);
      }, (function () {
          var $158 = Control_Applicative.pure(listTApplicative(Control_Monad_State_Trans.monadStateT(dictMonad)));
          return function ($159) {
              return NondetT($158($159));
          };
      })());
  };
  var nondetTBind = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return nondetTApply(dictMonad);
      }, function (v) {
          return function (f) {
              return NondetT(Control_Bind.bind(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(function ($160) {
                  return runNondetT(f($160));
              }));
          };
      });
  };
  var takeListT = function (dictMonad) {
      return function (v) {
          if (v === 0) {
              return Data_Function["const"](Control_Plus.empty(listTPlus(dictMonad)));
          };
          var $161 = Control_Monad.liftM1(dictMonad)(bimapTStep(Control_Category.identity(Control_Category.categoryFn))(takeListT(dictMonad)(v - 1 | 0)));
          return function ($162) {
              return ListT($161(stepListT($162)));
          };
      };
  };
  var disamb = function (dictMonad) {
      return function (allow_amb) {
          return function (xs) {
              return Control_Bind.bind(dictMonad.Bind1())((function (v) {
                  return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(v)(false);
              })(runListT(Control_Monad_State_Trans.monadStateT(dictMonad))(takeListT(Control_Monad_State_Trans.monadStateT(dictMonad))((function () {
                  if (allow_amb) {
                      return 1;
                  };
                  return 2;
              })())(runNondetT(xs)))))(function (xs$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                      if (xs$prime instanceof Data_List_Types.Cons && xs$prime.value1 instanceof Data_List_Types.Nil) {
                          return new Data_Maybe.Just(xs$prime.value0);
                      };
                      return Data_Maybe.Nothing.value;
                  })());
              });
          };
      };
  };
  exports["enterContext"] = enterContext;
  exports["exitContext"] = exitContext;
  exports["getPrefs"] = getPrefs;
  exports["missingArgP"] = missingArgP;
  exports["errorP"] = errorP;
  exports["exitP"] = exitP;
  exports["hoistMaybe"] = hoistMaybe;
  exports["runReadM"] = runReadM;
  exports["withReadM"] = withReadM;
  exports["runP"] = runP;
  exports["runCompletion"] = runCompletion;
  exports["contextNames"] = contextNames;
  exports["cut"] = cut;
  exports["nondetTAltOp"] = nondetTAltOp;
  exports["disamb"] = disamb;
  exports["pMonadP"] = pMonadP;
  exports["completionMonadP"] = completionMonadP;
  exports["nondetTFunctor"] = nondetTFunctor;
  exports["nondetTApplicative"] = nondetTApplicative;
  exports["nondetTBind"] = nondetTBind;
  exports["nondetTAlt"] = nondetTAlt;
  exports["nondetTPlus"] = nondetTPlus;
  exports["nondetTMonadTrans"] = nondetTMonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Internal.Utils"] = $PS["Options.Applicative.Internal.Utils"] || {};
  var exports = $PS["Options.Applicative.Internal.Utils"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var whitespaceRegex = (function () {
      var v = Data_String_Regex.regex("\\s+")(Data_String_Regex_Flags.noFlags);
      if (v instanceof Data_Either.Left) {
          return Partial_Unsafe.unsafeCrashWith("whitespaceRegex: `\\s+` seems to be invlaid, err: " + v.value0);
      };
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Options.Applicative.Internal.Utils (line 39, column 19 - line 41, column 15): " + [ v.constructor.name ]);
  })();
  var words = function (v) {
      if (v === "") {
          return [  ];
      };
      return Data_String_Regex.split(whitespaceRegex)(v);
  };
  var unWords = function (dictFoldable) {
      return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(" ");
  };
  var unLines = function (dictFoldable) {
      return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)("\x0a");
  };
  var startsWith = function (p) {
      return function (s) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf(p)(s))(new Data_Maybe.Just(0));
      };
  };
  var lines = function (v) {
      if (v === "") {
          return [  ];
      };
      return Data_String_Common.split("\x0a")(v);
  };
  var apApplyFlipped = function (dictApply) {
      return Control_Apply.lift2(dictApply)(Data_Function.applyFlipped);
  };
  exports["unLines"] = unLines;
  exports["unWords"] = unWords;
  exports["lines"] = lines;
  exports["words"] = words;
  exports["startsWith"] = startsWith;
  exports["apApplyFlipped"] = apApplyFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Common"] = $PS["Options.Applicative.Common"] || {};
  var exports = $PS["Options.Applicative.Common"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];                
  var OptWord = (function () {
      function OptWord(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OptWord.create = function (value0) {
          return function (value1) {
              return new OptWord(value0, value1);
          };
      };
      return OptWord;
  })();
  var unexpectedError = function (arg) {
      return function (p) {
          return Options_Applicative_Types.UnexpectedError.create(arg)(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p)));
      };
  };
  var simplify = function (v) {
      if (v instanceof Options_Applicative_Types.Leaf) {
          return new Options_Applicative_Types.Leaf(v.value0);
      };
      if (v instanceof Options_Applicative_Types.MultNode) {
          var remove_mult = function (v1) {
              if (v1 instanceof Options_Applicative_Types.MultNode) {
                  return v1.value0;
              };
              return [ v1 ];
          };
          var v1 = Control_Bind.bind(Control_Bind.bindArray)(v.value0)(function ($221) {
              return remove_mult(simplify($221));
          });
          if (v1.length === 1) {
              return v1[0];
          };
          return new Options_Applicative_Types.MultNode(v1);
      };
      if (v instanceof Options_Applicative_Types.AltNode) {
          var remove_alt = function (v1) {
              if (v1 instanceof Options_Applicative_Types.AltNode) {
                  return v1.value0;
              };
              if (v1 instanceof Options_Applicative_Types.MultNode && v1.value0.length === 0) {
                  return [  ];
              };
              return [ v1 ];
          };
          var v1 = Control_Bind.bind(Control_Bind.bindArray)(v.value0)(function ($222) {
              return remove_alt(simplify($222));
          });
          if (v1.length === 0) {
              return new Options_Applicative_Types.MultNode([  ]);
          };
          if (v1.length === 1) {
              return v1[0];
          };
          return new Options_Applicative_Types.AltNode(v1);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 279, column 1 - line 279, column 45): " + [ v.constructor.name ]);
  };
  var showOption = function (v) {
      if (v instanceof Options_Applicative_Types.OptLong) {
          return "--" + v.value0;
      };
      if (v instanceof Options_Applicative_Types.OptShort) {
          return Data_String_CodeUnits.fromCharArray([ "-", v.value0 ]);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 42, column 1 - line 42, column 32): " + [ v.constructor.name ]);
  };
  var parseWord = (function () {
      var go = function (v) {
          if (v instanceof Data_List_Types.Cons && (v.value0 === "-" && (v.value1 instanceof Data_List_Types.Cons && v.value1.value0 === "-"))) {
              return Data_Maybe.Just.create((function () {
                  var v1 = (function () {
                      var v2 = Data_List.span(function (v3) {
                          return v3 !== "=";
                      })(v.value1.value1);
                      if (v2.rest instanceof Data_List_Types.Nil) {
                          return new Data_Tuple.Tuple(v.value1.value1, Data_Maybe.Nothing.value);
                      };
                      if (v2.rest instanceof Data_List_Types.Cons) {
                          return new Data_Tuple.Tuple(v2.init, new Data_Maybe.Just(v2.rest.value1));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 106, column 23 - line 108, column 70): " + [ v2.constructor.name ]);
                  })();
                  return new OptWord(new Options_Applicative_Types.OptLong(Data_String_CodeUnits.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)(v1.value0))), Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                      var $223 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                      return function ($224) {
                          return Data_String_CodeUnits.fromCharArray($223($224));
                      };
                  })())(v1.value1));
              })());
          };
          if (v instanceof Data_List_Types.Cons && v.value0 === "-") {
              if (v.value1 instanceof Data_List_Types.Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v.value1 instanceof Data_List_Types.Cons) {
                  return Data_Maybe.Just.create((function () {
                      var arg = Data_Functor.voidRight(Data_Maybe.functorMaybe)(v.value1.value1)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!Data_List["null"](v.value1.value1)));
                      return new OptWord(new Options_Applicative_Types.OptShort(v.value1.value0), Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                          var $225 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                          return function ($226) {
                              return Data_String_CodeUnits.fromCharArray($225($226));
                          };
                      })())(arg));
                  })());
              };
              throw new Error("Failed pattern match at Options.Applicative.Common (line 110, column 25 - line 114, column 79): " + [ v.value1.constructor.name ]);
          };
          return Data_Maybe.Nothing.value;
      };
      var $227 = Data_List.fromFoldable(Data_Foldable.foldableArray);
      return function ($228) {
          return go($227(Data_String_CodeUnits.toCharArray($228)));
      };
  })();
  var optionNames = function (v) {
      if (v instanceof Options_Applicative_Types.OptReader) {
          return v.value0;
      };
      if (v instanceof Options_Applicative_Types.FlagReader) {
          return v.value0;
      };
      return [  ];
  };
  var liftOpt = Options_Applicative_Types.OptP.create;
  var isOptionPrefix = function (v) {
      return function (v1) {
          if (v instanceof Options_Applicative_Types.OptShort && v1 instanceof Options_Applicative_Types.OptShort) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Options_Applicative_Types.OptLong && v1 instanceof Options_Applicative_Types.OptLong) {
              return Options_Applicative_Internal_Utils.startsWith(v.value0)(v1.value0);
          };
          return false;
      };
  };
  var optMatches = function (dictMonadP) {
      return function (disambiguate) {
          return function (opt) {
              return function (v) {
                  var is_short = function (v1) {
                      if (v1 instanceof Options_Applicative_Types.OptShort) {
                          return true;
                      };
                      if (v1 instanceof Options_Applicative_Types.OptLong) {
                          return false;
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 89, column 5 - line 89, column 33): " + [ v1.constructor.name ]);
                  };
                  var has_name = function (a) {
                      if (disambiguate) {
                          return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isOptionPrefix(a));
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Foldable.elem(Data_Foldable.foldableArray)(Options_Applicative_Types.optNameEq)(a);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 92, column 5 - line 94, column 27): " + [ a.constructor.name ]);
                  };
                  var errorFor = function (name) {
                      return function (msg) {
                          return "option " + (showOption(name) + (": " + msg));
                      };
                  };
                  if (opt instanceof Options_Applicative_Types.OptReader) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(has_name(v.value0)(opt.value0)))(function () {
                          return Data_Maybe.Just.create(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0())))(function (args) {
                              var missing_arg = Options_Applicative_Internal.missingArgP(dictMonadP)(opt.value2(showOption(v.value0)))((Data_Newtype.un()(Options_Applicative_Types.CReader)(opt.value1)).crCompleter);
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))((function () {
                                  var v1 = Data_Maybe.maybe(args)(function (v2) {
                                      return new Data_List_Types.Cons(v2, args);
                                  })(v.value1);
                                  if (v1 instanceof Data_List_Types.Nil) {
                                      return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadP.Monad0())(missing_arg);
                                  };
                                  if (v1 instanceof Data_List_Types.Cons) {
                                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(dictMonadP.Monad0()))(new Data_Tuple.Tuple(v1.value0, v1.value1));
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Common (line 67, column 27 - line 69, column 56): " + [ v1.constructor.name ]);
                              })())(function (v1) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0()))(v1.value1))(function () {
                                      return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadP.Monad0())(Options_Applicative_Internal.runReadM(dictMonadP)(Options_Applicative_Internal.withReadM(errorFor(v.value0))((Data_Newtype.un()(Options_Applicative_Types.CReader)(opt.value1)).crReader))(v1.value0));
                                  });
                              });
                          }));
                      });
                  };
                  if (opt instanceof Options_Applicative_Types.FlagReader) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(has_name(v.value0)(opt.value0)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(is_short(v.value0) || Data_Maybe.isNothing(v.value1)))(function () {
                              return Data_Maybe.Just.create(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0())))(function (args) {
                                  var val$prime = Data_Functor.map(Data_Maybe.functorMaybe)(function ($229) {
                                      return (function (s) {
                                          return Data_Array.cons("-")(s);
                                      })(Data_String_CodeUnits.toCharArray($229));
                                  })(v.value1);
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0()))(Data_Maybe.maybe(args)((function () {
                                      var $230 = Data_Function.flip(Data_List_Types.Cons.create)(args);
                                      return function ($231) {
                                          return $230(Data_String_CodeUnits.fromCharArray($231));
                                      };
                                  })())(val$prime)))(function () {
                                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(dictMonadP.Monad0()))(opt.value1);
                                  });
                              }));
                          });
                      });
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
      };
  };
  var isArg = function (v) {
      if (v instanceof Options_Applicative_Types.ArgReader) {
          return true;
      };
      return false;
  };
  var evalParser = function (v) {
      if (v instanceof Options_Applicative_Types.NilP) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof Options_Applicative_Types.OptP) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Options_Applicative_Types.MultP) {
          return Data_Exists.runExists(function (v1) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(evalParser(v1.value0))(evalParser(v1.value1));
          })(v.value0);
      };
      if (v instanceof Options_Applicative_Types.AltP) {
          return Control_Alt.alt(Data_Maybe.altMaybe)(evalParser(v.value0))(evalParser(v.value1));
      };
      if (v instanceof Options_Applicative_Types.BindP) {
          return Control_Monad_Free["resume'"](function (p) {
              return function (k) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(evalParser(p))(function ($232) {
                      return evalParser(Options_Applicative_Types.BindP.create(k($232)));
                  });
              };
          })(Data_Maybe.Just.create)(v.value0);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 219, column 1 - line 219, column 44): " + [ v.constructor.name ]);
  };
  var searchParser = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Options_Applicative_Types.NilP) {
                  return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad));
              };
              if (v1 instanceof Options_Applicative_Types.OptP) {
                  return v(v1.value0);
              };
              if (v1 instanceof Options_Applicative_Types.MultP) {
                  return Data_Exists.runExists(function (v2) {
                      var b = Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(v2.value1))(function (p2$prime) {
                          return Control_Apply.apply(Options_Applicative_Types.parserApply)(v2.value0)(p2$prime);
                      });
                      var a = Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(v2.value0))(function (p1$prime) {
                          return Control_Apply.apply(Options_Applicative_Types.parserApply)(p1$prime)(v2.value1);
                      });
                      return Options_Applicative_Internal.nondetTAltOp(dictMonad)(a)(b);
                  })(v1.value0);
              };
              if (v1 instanceof Options_Applicative_Types.AltP) {
                  return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Options_Applicative_Internal.nondetTPlus(dictMonad))([ searchParser(dictMonad)(v)(v1.value0), searchParser(dictMonad)(v)(v1.value1) ]);
              };
              if (v1 instanceof Options_Applicative_Types.BindP) {
                  return Control_Monad_Free["resume'"](function (p) {
                      return function (k) {
                          return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Options_Applicative_Internal.nondetTPlus(dictMonad))([ Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(p))(function (p$prime) {
                              return Options_Applicative_Types.BindP.create(Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Monad_Free.liftF(p$prime))(k));
                          }), (function () {
                              var v2 = evalParser(p);
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad));
                              };
                              if (v2 instanceof Data_Maybe.Just) {
                                  return searchParser(dictMonad)(v)(Options_Applicative_Types.BindP.create(k(v2.value0)));
                              };
                              throw new Error("Failed pattern match at Options.Applicative.Common (line 134, column 7 - line 136, column 49): " + [ v2.constructor.name ]);
                          })() ]);
                      };
                  })(Data_Function["const"](Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad))))(v1.value0);
              };
              throw new Error("Failed pattern match at Options.Applicative.Common (line 117, column 1 - line 119, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var searchOpt = function (dictMonadP) {
      return function (pprefs) {
          return function (w) {
              return searchParser(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(function (opt) {
                  var disambiguate = (Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefDisambiguate && Data_Ord.greaterThan(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Internal.value);
                  var v = optMatches(dictMonadP)(disambiguate)((Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain)(w);
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(Data_Functor.map(Control_Monad_State_Trans.functorStateT((dictMonadP.Alt1()).Functor0()))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(v.value0));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())));
                  };
                  throw new Error("Failed pattern match at Options.Applicative.Common (line 143, column 3 - line 145, column 21): " + [ v.constructor.name ]);
              });
          };
      };
  };
  var stepParser = function (dictMonadP) {
      return function (pprefs) {
          return function (v) {
              return function (arg) {
                  return function (p) {
                      if (v instanceof Options_Applicative_Types.AllPositionals) {
                          return searchArg(dictMonadP)(pprefs)(arg)(p);
                      };
                      if (v instanceof Options_Applicative_Types.ForwardOptions) {
                          var v1 = parseWord(arg);
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Alt.alt(Options_Applicative_Internal.nondetTAlt(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())))(searchOpt(dictMonadP)(pprefs)(v1.value0)(p))(searchArg(dictMonadP)(pprefs)(arg)(p));
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return searchArg(dictMonadP)(pprefs)(arg)(p);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 173, column 42 - line 175, column 36): " + [ v1.constructor.name ]);
                      };
                      var v1 = parseWord(arg);
                      if (v1 instanceof Data_Maybe.Just) {
                          return searchOpt(dictMonadP)(pprefs)(v1.value0)(p);
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return searchArg(dictMonadP)(pprefs)(arg)(p);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 176, column 29 - line 178, column 36): " + [ v1.constructor.name ]);
                  };
              };
          };
      };
  };
  var searchArg = function (dictMonadP) {
      return function (prefs) {
          return function (arg) {
              return searchParser(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(function (opt) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Options_Applicative_Internal.nondetTBind(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())))(Control_Applicative.when(Options_Applicative_Internal.nondetTApplicative(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())))(isArg((Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain))(Options_Applicative_Internal.cut(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))))(function () {
                      var v = (Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain;
                      if (v instanceof Options_Applicative_Types.CmdReader) {
                          var v1 = new Data_Tuple.Tuple(v.value2(arg), (Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(prefs)).prefBacktrack);
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.NoBacktrack) {
                              return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Apply.applyFirst(Control_Monad_State_Trans.applyStateT(dictMonadP.Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0())))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0()))(Data_List_Types.Nil.value)))(function (args) {
                                  return Data_Functor.map(Control_Monad_State_Trans.functorStateT((dictMonadP.Alt1()).Functor0()))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadP.Monad0())(Control_Apply.applyFirst(((dictMonadP.Monad0()).Bind1()).Apply0())(Control_Apply.applySecond(((dictMonadP.Monad0()).Bind1()).Apply0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0))(runParserInfo(dictMonadP)(v1.value0.value0)(args)))(Options_Applicative_Internal.exitContext(dictMonadP))));
                              }));
                          };
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.Backtrack) {
                              return Data_Functor.map(Options_Applicative_Internal.nondetTFunctor(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(Control_Monad_State_Trans.StateT(function (args) {
                                  return Control_Apply.applyFirst(((dictMonadP.Monad0()).Bind1()).Apply0())(Control_Apply.applySecond(((dictMonadP.Monad0()).Bind1()).Apply0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0))(runParser(dictMonadP)((Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoPolicy)(Options_Applicative_Types.CmdStart.value)((Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoParser)(args)))(Options_Applicative_Internal.exitContext(dictMonadP));
                              })));
                          };
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.SubparserInline) {
                              return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadP.Monad0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0)))(function () {
                                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(dictMonadP.Monad0()))((Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoParser);
                              }));
                          };
                          if (v1.value0 instanceof Data_Maybe.Nothing) {
                              return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())));
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 153, column 7 - line 165, column 38): " + [ v1.constructor.name ]);
                      };
                      if (v instanceof Options_Applicative_Types.ArgReader) {
                          return Data_Functor.map(Options_Applicative_Internal.nondetTFunctor(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadP.Monad0())(Options_Applicative_Internal.runReadM(dictMonadP)((Data_Newtype.un()(Options_Applicative_Types.CReader)(v.value0)).crReader)(arg))));
                      };
                      return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())));
                  });
              });
          };
      };
  };
  var runParserInfo = function (dictMonadP) {
      return function (i) {
          return runParserFully(dictMonadP)((Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(i)).infoPolicy)((Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(i)).infoParser);
      };
  };
  var runParserFully = function (dictMonadP) {
      return function (policy) {
          return function (p) {
              return function (args) {
                  return Control_Bind.bind((dictMonadP.Monad0()).Bind1())(runParser(dictMonadP)(policy)(Options_Applicative_Types.CmdStart.value)(p)(args))(function (v) {
                      if (v.value1 instanceof Data_List_Types.Nil) {
                          return Control_Applicative.pure((dictMonadP.Monad0()).Applicative0())(v.value0);
                      };
                      if (v.value1 instanceof Data_List_Types.Cons) {
                          return Options_Applicative_Internal.errorP(dictMonadP)(unexpectedError(v.value1.value0)(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(Data_Unit.unit)));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 213, column 3 - line 215, column 66): " + [ v.value1.constructor.name ]);
                  });
              };
          };
      };
  };
  var runParser = function (dictMonadP) {
      return function (policy) {
          return function (isCmdStart) {
              return function (p) {
                  return function (args) {
                      var result = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(evalParser(p)))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(args));
                      var newPolicy = function (a) {
                          if (policy instanceof Options_Applicative_Types.NoIntersperse) {
                              var $180 = Data_Maybe.isJust(parseWord(a));
                              if ($180) {
                                  return Options_Applicative_Types.NoIntersperse.value;
                              };
                              return Options_Applicative_Types.AllPositionals.value;
                          };
                          return policy;
                      };
                      var do_step = function (prefs) {
                          return function (arg) {
                              return function (argt) {
                                  return (function (v) {
                                      return Control_Monad_State_Trans.runStateT(v)(argt);
                                  })(Options_Applicative_Internal.disamb(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(!(Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(prefs)).prefDisambiguate)(stepParser(dictMonadP)(prefs)(policy)(arg)(p)));
                              };
                          };
                      };
                      if (args instanceof Data_List_Types.Nil) {
                          return Options_Applicative_Internal.exitP(dictMonadP)(isCmdStart)(policy)(p)(result);
                      };
                      if (args instanceof Data_List_Types.Cons && (args.value0 === "--" && Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(policy)(Options_Applicative_Types.AllPositionals.value))) {
                          return runParser(dictMonadP)(Options_Applicative_Types.AllPositionals.value)(Options_Applicative_Types.CmdCont.value)(p)(args.value1);
                      };
                      if (args instanceof Data_List_Types.Cons) {
                          return Control_Bind.bind((dictMonadP.Monad0()).Bind1())(Options_Applicative_Internal.getPrefs(dictMonadP))(function (prefs) {
                              return Control_Bind.bind((dictMonadP.Monad0()).Bind1())(do_step(prefs)(args.value0)(args.value1))(function (v) {
                                  if (v.value0 instanceof Data_Maybe.Nothing) {
                                      return Options_Applicative_Internal.hoistMaybe(dictMonadP)(unexpectedError(args.value0)(p))(result);
                                  };
                                  if (v.value0 instanceof Data_Maybe.Just) {
                                      return runParser(dictMonadP)(newPolicy(args.value0))(Options_Applicative_Types.CmdCont.value)(v.value0.value0)(v.value1);
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Common (line 191, column 5 - line 193, column 60): " + [ v.value0.constructor.name ]);
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 185, column 38 - line 193, column 60): " + [ args.constructor.name ]);
                  };
              };
          };
      };
  };
  var treeMapParser = function (g) {
      var has_default = function (p) {
          return Data_Maybe.isJust(evalParser(p));
      };
      var hasArg = function (v) {
          if (v instanceof Options_Applicative_Types.NilP) {
              return false;
          };
          if (v instanceof Options_Applicative_Types.OptP) {
              return isArg((Data_Newtype.un()(Options_Applicative_Types.Option)(v.value0)).optMain);
          };
          if (v instanceof Options_Applicative_Types.MultP) {
              return Data_Exists.runExists(function (v1) {
                  return hasArg(v1.value0) || hasArg(v1.value1);
              })(v.value0);
          };
          if (v instanceof Options_Applicative_Types.AltP) {
              return hasArg(v.value0) || hasArg(v.value1);
          };
          if (v instanceof Options_Applicative_Types.BindP) {
              return Control_Monad_Free["resume'"](function (p) {
                  return function (v1) {
                      return hasArg(p);
                  };
              })(Data_Function["const"](false))(v.value0);
          };
          throw new Error("Failed pattern match at Options.Applicative.Common (line 271, column 5 - line 271, column 44): " + [ v.constructor.name ]);
      };
      var go = function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          if (v4 instanceof Options_Applicative_Types.NilP) {
                              return new Options_Applicative_Types.MultNode([  ]);
                          };
                          if (v4 instanceof Options_Applicative_Types.OptP) {
                              if (Data_Ord.greaterThan(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.optVisibility(v4.value0))(Options_Applicative_Types.Internal.value)) {
                                  return new Options_Applicative_Types.Leaf(v3({
                                      hinfoMulti: v,
                                      hinfoDefault: v1,
                                      hinfoUnreachableArgs: v2
                                  })(v4.value0));
                              };
                              if (Data_Boolean.otherwise) {
                                  return new Options_Applicative_Types.MultNode([  ]);
                              };
                          };
                          if (v4 instanceof Options_Applicative_Types.MultP) {
                              return Data_Exists.runExists(function (v5) {
                                  var r$prime = v2 || hasArg(v5.value0);
                                  return new Options_Applicative_Types.MultNode([ go(v)(v1)(v2)(v3)(v5.value0), go(v)(v1)(r$prime)(v3)(v5.value1) ]);
                              })(v4.value0);
                          };
                          if (v4 instanceof Options_Applicative_Types.AltP) {
                              var d$prime = v1 || (has_default(v4.value0) || has_default(v4.value1));
                              return new Options_Applicative_Types.AltNode([ go(v)(d$prime)(v2)(v3)(v4.value0), go(v)(d$prime)(v2)(v3)(v4.value1) ]);
                          };
                          if (v4 instanceof Options_Applicative_Types.BindP) {
                              return Control_Monad_Free["resume'"](function (p) {
                                  return function (k) {
                                      var go$prime = go(true)(v1)(v2)(v3)(p);
                                      var v5 = evalParser(p);
                                      if (v5 instanceof Data_Maybe.Nothing) {
                                          return go$prime;
                                      };
                                      if (v5 instanceof Data_Maybe.Just) {
                                          return new Options_Applicative_Types.MultNode([ go$prime, go(true)(v1)(v2)(v3)(Options_Applicative_Types.BindP.create(k(v5.value0))) ]);
                                      };
                                      throw new Error("Failed pattern match at Options.Applicative.Common (line 266, column 12 - line 268, column 68): " + [ v5.constructor.name ]);
                                  };
                              })(Data_Function["const"](new Options_Applicative_Types.MultNode([  ])))(v4.value0);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 247, column 5 - line 250, column 21): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name, v4.constructor.name ]);
                      };
                  };
              };
          };
      };
      var $233 = go(false)(false)(false)(g);
      return function ($234) {
          return simplify($233($234));
      };
  };
  var mapParser = function (f) {
      var flatten = function (v) {
          if (v instanceof Options_Applicative_Types.Leaf) {
              return [ v.value0 ];
          };
          if (v instanceof Options_Applicative_Types.MultNode) {
              return Control_Bind.bind(Control_Bind.bindArray)(v.value0)(flatten);
          };
          if (v instanceof Options_Applicative_Types.AltNode) {
              return Control_Bind.bind(Control_Bind.bindArray)(v.value0)(flatten);
          };
          throw new Error("Failed pattern match at Options.Applicative.Common (line 234, column 5 - line 234, column 27): " + [ v.constructor.name ]);
      };
      var $235 = treeMapParser(f);
      return function ($236) {
          return flatten($235($236));
      };
  };
  exports["liftOpt"] = liftOpt;
  exports["showOption"] = showOption;
  exports["runParserInfo"] = runParserInfo;
  exports["mapParser"] = mapParser;
  exports["treeMapParser"] = treeMapParser;
  exports["optionNames"] = optionNames;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.PrettyPrint.Leijen"] = $PS["Text.PrettyPrint.Leijen"] || {};
  var exports = $PS["Text.PrettyPrint.Leijen"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var SFail = (function () {
      function SFail() {

      };
      SFail.value = new SFail();
      return SFail;
  })();
  var SEmpty = (function () {
      function SEmpty() {

      };
      SEmpty.value = new SEmpty();
      return SEmpty;
  })();
  var SChar = (function () {
      function SChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SChar.create = function (value0) {
          return function (value1) {
              return new SChar(value0, value1);
          };
      };
      return SChar;
  })();
  var SText = (function () {
      function SText(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SText.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SText(value0, value1, value2);
              };
          };
      };
      return SText;
  })();
  var SLine = (function () {
      function SLine(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SLine.create = function (value0) {
          return function (value1) {
              return new SLine(value0, value1);
          };
      };
      return SLine;
  })();
  var SFail$prime = (function () {
      function SFail$prime() {

      };
      SFail$prime.value = new SFail$prime();
      return SFail$prime;
  })();
  var SEmpty$prime = (function () {
      function SEmpty$prime() {

      };
      SEmpty$prime.value = new SEmpty$prime();
      return SEmpty$prime;
  })();
  var SChar$prime = (function () {
      function SChar$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SChar$prime.create = function (value0) {
          return function (value1) {
              return new SChar$prime(value0, value1);
          };
      };
      return SChar$prime;
  })();
  var SText$prime = (function () {
      function SText$prime(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SText$prime.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SText$prime(value0, value1, value2);
              };
          };
      };
      return SText$prime;
  })();
  var SLine$prime = (function () {
      function SLine$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SLine$prime.create = function (value0) {
          return function (value1) {
              return new SLine$prime(value0, value1);
          };
      };
      return SLine$prime;
  })();
  var Fail = (function () {
      function Fail() {

      };
      Fail.value = new Fail();
      return Fail;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var Char = (function () {
      function Char(value0) {
          this.value0 = value0;
      };
      Char.create = function (value0) {
          return new Char(value0);
      };
      return Char;
  })();
  var Text = (function () {
      function Text(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Text.create = function (value0) {
          return function (value1) {
              return new Text(value0, value1);
          };
      };
      return Text;
  })();
  var Line = (function () {
      function Line() {

      };
      Line.value = new Line();
      return Line;
  })();
  var FlatAlt = (function () {
      function FlatAlt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FlatAlt.create = function (value0) {
          return function (value1) {
              return new FlatAlt(value0, value1);
          };
      };
      return FlatAlt;
  })();
  var Cat = (function () {
      function Cat(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cat.create = function (value0) {
          return function (value1) {
              return new Cat(value0, value1);
          };
      };
      return Cat;
  })();
  var Nest = (function () {
      function Nest(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Nest.create = function (value0) {
          return function (value1) {
              return new Nest(value0, value1);
          };
      };
      return Nest;
  })();
  var Union = (function () {
      function Union(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Union.create = function (value0) {
          return function (value1) {
              return new Union(value0, value1);
          };
      };
      return Union;
  })();
  var Column = (function () {
      function Column(value0) {
          this.value0 = value0;
      };
      Column.create = function (value0) {
          return new Column(value0);
      };
      return Column;
  })();
  var Columns = (function () {
      function Columns(value0) {
          this.value0 = value0;
      };
      Columns.create = function (value0) {
          return new Columns(value0);
      };
      return Columns;
  })();
  var Nesting = (function () {
      function Nesting(value0) {
          this.value0 = value0;
      };
      Nesting.create = function (value0) {
          return new Nesting(value0);
      };
      return Nesting;
  })();
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Cons(value0, value1, value2);
              };
          };
      };
      return Cons;
  })();
  var text = function (v) {
      if (v === "") {
          return Empty.value;
      };
      return new Text(Data_String_CodePoints.length(v), v);
  };                         
  var spaces = function (n) {
      if (n <= 0) {
          return "";
      };
      if (Data_Boolean.otherwise) {
          return Data_String_CodeUnits.fromCharArray(Data_Array.replicate(n)(" "));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 908, column 1 - line 908, column 24): " + [ n.constructor.name ]);
  };
  var space = new Char(" ");
  var rparen = new Char(")");
  var rbracket = new Char("]");
  var nesting = function (f) {
      return new Nesting(f);
  };
  var nest = function (i) {
      return function (x) {
          return new Nest(i, x);
      };
  };
  var lparen = new Char("(");
  var line = new FlatAlt(Line.value, space);
  var lbracket = new Char("[");
  var indentation = function (n) {
      return spaces(n);
  }; 
  var forceSimpleDoc = function (v) {
      if (v instanceof SFail$prime) {
          return SFail.value;
      };
      if (v instanceof SEmpty$prime) {
          return SEmpty.value;
      };
      if (v instanceof SChar$prime) {
          return new SChar(v.value0, forceSimpleDoc(Data_Lazy.force(v.value1)));
      };
      if (v instanceof SText$prime) {
          return new SText(v.value0, v.value1, forceSimpleDoc(Data_Lazy.force(v.value2)));
      };
      if (v instanceof SLine$prime) {
          return new SLine(v.value0, forceSimpleDoc(Data_Lazy.force(v.value1)));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 600, column 18 - line 605, column 51): " + [ v.constructor.name ]);
  };
  var renderFits = function (fits) {
      return function (rfrac) {
          return function (w) {
              return function (headNode) {
                  var r = Data_Ord.max(Data_Ord.ordInt)(0)(Data_Ord.min(Data_Ord.ordInt)(w)(Data_Int.round(Data_Int.toNumber(w) * rfrac)));
                  var nicest$prime = function (n) {
                      return function (k) {
                          return function (i) {
                              return function (ds) {
                                  return function (x) {
                                      return function (y) {
                                          var x$prime = best(n)(k)(new Cons(i, x, ds));
                                          var width$prime = Data_Ord.min(Data_Ord.ordInt)(w - k | 0)((r - k | 0) + n | 0);
                                          var $170 = fits(w)(Data_Ord.min(Data_Ord.ordInt)(n)(k))(width$prime)(x$prime);
                                          if ($170) {
                                              return x$prime;
                                          };
                                          var y$prime = best(n)(k)(new Cons(i, y, ds));
                                          return y$prime;
                                      };
                                  };
                              };
                          };
                      };
                  };
                  var best = function (n) {
                      return function (k) {
                          return function (v) {
                              if (v instanceof Nil) {
                                  return SEmpty$prime.value;
                              };
                              if (v instanceof Cons) {
                                  if (v.value1 instanceof Fail) {
                                      return SFail$prime.value;
                                  };
                                  if (v.value1 instanceof Empty) {
                                      return best(n)(k)(v.value2);
                                  };
                                  if (v.value1 instanceof Char) {
                                      var k$prime = k + 1 | 0;
                                      return new SChar$prime(v.value1.value0, Data_Lazy.defer(function (v1) {
                                          return best(n)(k$prime)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof Text) {
                                      var k$prime = k + v.value1.value0 | 0;
                                      return new SText$prime(v.value1.value0, v.value1.value1, Data_Lazy.defer(function (v1) {
                                          return best(n)(k$prime)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof Line) {
                                      return new SLine$prime(v.value0, Data_Lazy.defer(function (v1) {
                                          return best(v.value0)(v.value0)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof FlatAlt) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0, v.value2));
                                  };
                                  if (v.value1 instanceof Cat) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0, new Cons(v.value0, v.value1.value1, v.value2)));
                                  };
                                  if (v.value1 instanceof Nest) {
                                      var i$prime = v.value0 + v.value1.value0 | 0;
                                      return best(n)(k)(new Cons(i$prime, v.value1.value1, v.value2));
                                  };
                                  if (v.value1 instanceof Union) {
                                      return nicest$prime(n)(k)(v.value0)(v.value2)(v.value1.value0)(v.value1.value1);
                                  };
                                  if (v.value1 instanceof Column) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(k), v.value2));
                                  };
                                  if (v.value1 instanceof Columns) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(new Data_Maybe.Just(w)), v.value2));
                                  };
                                  if (v.value1 instanceof Nesting) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(v.value0), v.value2));
                                  };
                                  throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 788, column 11 - line 802, column 56): " + [ v.value1.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 785, column 7 - line 785, column 50): " + [ n.constructor.name, k.constructor.name, v.constructor.name ]);
                          };
                      };
                  };
                  return forceSimpleDoc(best(0)(0)(new Cons(0, headNode, Nil.value)));
              };
          };
      };
  };
  var foldr1 = function (dictMonoid) {
      return function (f) {
          return function ($246) {
              return (function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(v.value0.last)(v.value0.init);
                  };
                  throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 122, column 29 - line 124, column 43): " + [ v.constructor.name ]);
              })(Data_Array.unsnoc($246));
          };
      };
  };
  var flatten = function (v) {
      if (v instanceof FlatAlt) {
          return v.value1;
      };
      if (v instanceof Cat) {
          return new Cat(flatten(v.value0), flatten(v.value1));
      };
      if (v instanceof Nest) {
          return new Nest(v.value0, flatten(v.value1));
      };
      if (v instanceof Line) {
          return Fail.value;
      };
      if (v instanceof Union) {
          return flatten(v.value0);
      };
      if (v instanceof Column) {
          return new Column(function ($247) {
              return flatten(v.value0($247));
          });
      };
      if (v instanceof Columns) {
          return new Columns(function ($248) {
              return flatten(v.value0($248));
          });
      };
      if (v instanceof Nesting) {
          return new Nesting(function ($249) {
              return flatten(v.value0($249));
          });
      };
      return v;
  };
  var group = function (x) {
      return new Union(flatten(x), x);
  };
  var softline = group(line);         
  var fits1 = function ($copy_v) {
      return function ($copy_v1) {
          return function ($copy_w) {
              return function ($copy_v2) {
                  var $tco_var_v = $copy_v;
                  var $tco_var_v1 = $copy_v1;
                  var $tco_var_w = $copy_w;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, v1, w, v2) {
                      if (w < 0) {
                          $tco_done = true;
                          return false;
                      };
                      if (v2 instanceof SFail$prime) {
                          $tco_done = true;
                          return false;
                      };
                      if (v2 instanceof SEmpty$prime) {
                          $tco_done = true;
                          return true;
                      };
                      if (v2 instanceof SChar$prime) {
                          $tco_var_v = v;
                          $tco_var_v1 = v1;
                          $tco_var_w = w - 1 | 0;
                          $copy_v2 = Data_Lazy.force(v2.value1);
                          return;
                      };
                      if (v2 instanceof SText$prime) {
                          $tco_var_v = v;
                          $tco_var_v1 = v1;
                          $tco_var_w = w - v2.value0 | 0;
                          $copy_v2 = Data_Lazy.force(v2.value2);
                          return;
                      };
                      if (v2 instanceof SLine$prime) {
                          $tco_done = true;
                          return true;
                      };
                      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 819, column 1 - line 819, column 55): " + [ v.constructor.name, v1.constructor.name, w.constructor.name, v2.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $tco_var_w, $copy_v2);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var renderPretty = renderFits(fits1);
  var empty = Empty.value;
  var linebreak = new FlatAlt(Line.value, empty);
  var displayS = function (v) {
      if (v instanceof SFail) {
          return Partial_Unsafe.unsafeCrashWith("@SFail@ can not appear uncaught in a rendered @SimpleDoc@");
      };
      if (v instanceof SEmpty) {
          return "";
      };
      if (v instanceof SChar) {
          return Data_String_CodeUnits.fromCharArray([ v.value0 ]) + displayS(v.value1);
      };
      if (v instanceof SText) {
          return v.value1 + displayS(v.value2);
      };
      if (v instanceof SLine) {
          return "\x0a" + (indentation(v.value0) + displayS(v.value1));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 893, column 1 - line 893, column 32): " + [ v.constructor.name ]);
  };
  var column = function (f) {
      return new Column(f);
  };                        
  var $$char = function (v) {
      if (v === "\x0a") {
          return line;
      };
      return new Char(v);
  };
  var beside = function (x) {
      return function (y) {
          return new Cat(x, y);
      };
  };
  var docSemigroup = new Data_Semigroup.Semigroup(beside);
  var docMonoid = new Data_Monoid.Monoid(function () {
      return docSemigroup;
  }, empty);
  var string = (function () {
      var $252 = Data_Foldable.intercalate(Data_Foldable.foldableArray)(docMonoid)(line);
      var $253 = Data_Functor.map(Data_Functor.functorArray)(text);
      var $254 = Data_String_Common.split("\x0a");
      return function ($255) {
          return $252($253($254($255)));
      };
  })();
  var enclose = function (l) {
      return function (r) {
          return function (x) {
              return Data_Semigroup.append(docSemigroup)(l)(Data_Semigroup.append(docSemigroup)(x)(r));
          };
      };
  };                                   
  var brackets = enclose(lbracket)(rbracket);
  var parens = enclose(lparen)(rparen);
  var width = function (d) {
      return function (f) {
          return column(function (k1) {
              return Data_Semigroup.append(docSemigroup)(d)(column(function (k2) {
                  return f(k2 - k1 | 0);
              }));
          });
      };
  };
  var fillBreak = function (f) {
      return function (x) {
          return width(x)(function (w) {
              var $241 = w > f;
              if ($241) {
                  return nest(f)(linebreak);
              };
              return text(spaces(f - w | 0));
          });
      };
  };                             
  var appendWithSpace = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(space)(y));
      };
  };
  var hsep = foldr1(docMonoid)(appendWithSpace);
  var appendWithSoftline = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(softline)(y));
      };
  };                                                   
  var appendWithLinebreak = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(linebreak)(y));
      };
  };
  var vcat = foldr1(docMonoid)(appendWithLinebreak);
  var appendWithLine = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(line)(y));
      };
  };                                   
  var align = function (d) {
      return column(function (k) {
          return nesting(function (i) {
              return nest(k - i | 0)(d);
          });
      });
  };                                             
  var hang = function (i) {
      return function (d) {
          return align(nest(i)(d));
      };
  };
  var indent = function (i) {
      return function (d) {
          return hang(i)(Data_Semigroup.append(docSemigroup)(text(spaces(i)))(d));
      };
  };
  exports["hsep"] = hsep;
  exports["vcat"] = vcat;
  exports["appendWithSpace"] = appendWithSpace;
  exports["appendWithSoftline"] = appendWithSoftline;
  exports["appendWithLine"] = appendWithLine;
  exports["parens"] = parens;
  exports["brackets"] = brackets;
  exports["string"] = string;
  exports["fillBreak"] = fillBreak;
  exports["indent"] = indent;
  exports["align"] = align;
  exports["char"] = $$char;
  exports["text"] = text;
  exports["renderPretty"] = renderPretty;
  exports["displayS"] = displayS;
  exports["docSemigroup"] = docSemigroup;
  exports["docMonoid"] = docMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Help.Chunk"] = $PS["Options.Applicative.Help.Chunk"] || {};
  var exports = $PS["Options.Applicative.Help.Chunk"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var Chunk = function (x) {
      return x;
  };
  var chunked = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return v2;
              };
              if (v2 instanceof Data_Maybe.Nothing) {
                  return v1;
              };
              if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(v(v1.value0)(v2.value0));
              };
              throw new Error("Failed pattern match at Options.Applicative.Help.Chunk (line 59, column 1 - line 60, column 41): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var chunkSemigroup = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(chunked(Data_Semigroup.append(dictSemigroup)));
  }; 
  var extractChunk = function (dictMonoid) {
      var $31 = Data_Maybe.fromMaybe(Data_Monoid.mempty(dictMonoid));
      var $32 = Data_Newtype.un()(Chunk);
      return function ($33) {
          return $31($32($33));
      };
  };
  var isEmpty = (function () {
      var $34 = Data_Newtype.un()(Chunk);
      return function ($35) {
          return Data_Maybe.isNothing($34($35));
      };
  })();
  var chunkMonoid = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return chunkSemigroup(dictSemigroup);
      }, Data_Maybe.Nothing.value);
  };
  var vcatChunks = Data_Foldable.foldr(Data_Foldable.foldableArray)(chunked(Text_PrettyPrint_Leijen.appendWithLine))(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
  var vsepChunks = Data_Foldable.foldr(Data_Foldable.foldableArray)(chunked(function (x) {
      return function (y) {
          return Text_PrettyPrint_Leijen.appendWithLine(x)(Text_PrettyPrint_Leijen.appendWithLine(Data_Monoid.mempty(Text_PrettyPrint_Leijen.docMonoid))(y));
      };
  }))(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
  var chunkFunctor = Data_Maybe.functorMaybe;
  var chunkBesideOrBelow = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
  var chunkBeside = chunked(Text_PrettyPrint_Leijen.appendWithSpace);
  var chunkApply = Data_Maybe.applyMaybe;
  var chunkApplicative = Data_Maybe.applicativeMaybe;
  var listToChunk = function (dictMonoid) {
      return function (v) {
          if (v.length === 0) {
              return Data_Monoid.mempty(chunkMonoid(dictMonoid.Semigroup0()));
          };
          return Control_Applicative.pure(chunkApplicative)(Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid)(v));
      };
  };
  var stringChunk = function (v) {
      if (v === "") {
          return Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
      };
      return Control_Applicative.pure(chunkApplicative)(Text_PrettyPrint_Leijen.text(v));
  };
  var paragraph = (function () {
      var $36 = Data_Foldable.foldr(Data_Foldable.foldableArray)((function () {
          var $38 = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
          return function ($39) {
              return $38(stringChunk($39));
          };
      })())(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
      return function ($37) {
          return $36(Options_Applicative_Internal_Utils.words($37));
      };
  })();
  var tabulate$prime = function (v) {
      return function (v1) {
          if (v1.length === 0) {
              return Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
          };
          return Control_Applicative.pure(chunkApplicative)(Text_PrettyPrint_Leijen.vcat(Data_Functor.mapFlipped(Data_Functor.functorArray)(v1)(function (v2) {
              return Text_PrettyPrint_Leijen.indent(2)(Text_PrettyPrint_Leijen.appendWithSpace(Text_PrettyPrint_Leijen.fillBreak(v)(v2.value0))(v2.value1));
          })));
      };
  };
  var tabulate = tabulate$prime(24);
  exports["Chunk"] = Chunk;
  exports["chunked"] = chunked;
  exports["listToChunk"] = listToChunk;
  exports["chunkBeside"] = chunkBeside;
  exports["chunkBesideOrBelow"] = chunkBesideOrBelow;
  exports["vcatChunks"] = vcatChunks;
  exports["vsepChunks"] = vsepChunks;
  exports["isEmpty"] = isEmpty;
  exports["stringChunk"] = stringChunk;
  exports["paragraph"] = paragraph;
  exports["extractChunk"] = extractChunk;
  exports["tabulate"] = tabulate;
  exports["chunkFunctor"] = chunkFunctor;
  exports["chunkApply"] = chunkApply;
  exports["chunkApplicative"] = chunkApplicative;
  exports["chunkSemigroup"] = chunkSemigroup;
  exports["chunkMonoid"] = chunkMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Builder.Internal"] = $PS["Options.Applicative.Builder.Internal"] || {};
  var exports = $PS["Options.Applicative.Builder.Internal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var OptionFields = function (x) {
      return x;
  };
  var HasValue = function (hasValueDummy) {
      this.hasValueDummy = hasValueDummy;
  };
  var HasName = function (name) {
      this.name = name;
  };
  var HasMetavar = function (hasMetavarDummy) {
      this.hasMetavarDummy = hasMetavarDummy;
  };
  var FlagFields = function (x) {
      return x;
  };
  var DefaultProp = (function () {
      function DefaultProp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DefaultProp.create = function (value0) {
          return function (value1) {
              return new DefaultProp(value0, value1);
          };
      };
      return DefaultProp;
  })();
  var Mod = (function () {
      function Mod(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Mod.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Mod(value0, value1, value2);
              };
          };
      };
      return Mod;
  })();
  var optionFieldsHasValue = new HasValue(function (v) {
      return Data_Unit.unit;
  });
  var optionFieldsHasMetavar = new HasMetavar(function (v) {
      return Data_Unit.unit;
  });
  var optionFieldsHasName = new HasName(function (n) {
      return Data_Newtype.over()()(OptionFields)(function (fields) {
          return {
              optNames: Data_Semigroup.append(Data_Semigroup.semigroupArray)([ n ])(fields.optNames),
              optCompleter: fields.optCompleter,
              optNoArgError: fields.optNoArgError
          };
      });
  });
  var name = function (dict) {
      return dict.name;
  };
  var flagFieldsHasName = new HasName(function (n) {
      return Data_Newtype.over()()(FlagFields)(function (fields) {
          return {
              flagNames: Data_Semigroup.append(Data_Semigroup.semigroupArray)([ n ])(fields.flagNames),
              flagActive: fields.flagActive
          };
      });
  });
  var defaultPropSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new DefaultProp(Control_Alt.alt(Data_Maybe.altMaybe)(v.value0)(v1.value0), Control_Alt.alt(Data_Maybe.altMaybe)(v.value1)(v1.value1));
      };
  });
  var modSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new Mod(function ($49) {
              return v1.value0(v.value0($49));
          }, Data_Semigroup.append(defaultPropSemigroup)(v1.value1)(v.value1), function ($50) {
              return v1.value2(v.value2($50));
          });
      };
  });
  var defaultPropMonoid = new Data_Monoid.Monoid(function () {
      return defaultPropSemigroup;
  }, new DefaultProp(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value));
  var fieldMod = function (f) {
      return new Mod(f, Data_Monoid.mempty(defaultPropMonoid), Control_Category.identity(Control_Category.categoryFn));
  };
  var modMonoid = new Data_Monoid.Monoid(function () {
      return modSemigroup;
  }, new Mod(Control_Category.identity(Control_Category.categoryFn), Data_Monoid.mempty(defaultPropMonoid), Control_Category.identity(Control_Category.categoryFn)));
  var optionMod = Mod.create(Control_Category.identity(Control_Category.categoryFn))(Data_Monoid.mempty(defaultPropMonoid));
  var internal = optionMod(Data_Newtype.over()()(Options_Applicative_Types.OptProperties)(function (p) {
      return {
          propVisibility: Options_Applicative_Types.Internal.value,
          propDescMod: p.propDescMod,
          propHelp: p.propHelp,
          propMetaVar: p.propMetaVar,
          propShowDefault: p.propShowDefault
      };
  }));
  var baseProps = {
      propMetaVar: "",
      propVisibility: Options_Applicative_Types.Visible.value,
      propHelp: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
      propShowDefault: Data_Maybe.Nothing.value,
      propDescMod: Data_Maybe.Nothing.value
  };
  var mkProps = function (v) {
      return function (g) {
          var props = Data_Newtype.over()()(Options_Applicative_Types.OptProperties)(function (r) {
              return {
                  propShowDefault: Control_Apply.apply(Data_Maybe.applyMaybe)(v.value1)(v.value0),
                  propDescMod: r.propDescMod,
                  propHelp: r.propHelp,
                  propMetaVar: r.propMetaVar,
                  propVisibility: r.propVisibility
              };
          })(g(baseProps));
          return props;
      };
  };
  var mkOption = function (d) {
      return function (g) {
          return function (rdr) {
              return {
                  optMain: rdr,
                  optProps: mkProps(d)(g)
              };
          };
      };
  };
  var mkParser = function (v) {
      return function (g) {
          return function (rdr) {
              var o = Options_Applicative_Common.liftOpt(mkOption(v)(g)(rdr));
              return Data_Maybe.maybe(o)(function (a) {
                  return Control_Alt.alt(Options_Applicative_Types.parserAlt)(o)(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(a));
              })(v.value0);
          };
      };
  };
  exports["Mod"] = Mod;
  exports["name"] = name;
  exports["OptionFields"] = OptionFields;
  exports["DefaultProp"] = DefaultProp;
  exports["optionMod"] = optionMod;
  exports["fieldMod"] = fieldMod;
  exports["mkParser"] = mkParser;
  exports["internal"] = internal;
  exports["optionFieldsHasName"] = optionFieldsHasName;
  exports["flagFieldsHasName"] = flagFieldsHasName;
  exports["optionFieldsHasValue"] = optionFieldsHasValue;
  exports["optionFieldsHasMetavar"] = optionFieldsHasMetavar;
  exports["modMonoid"] = modMonoid;
  exports["modSemigroup"] = modSemigroup;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Builder"] = $PS["Options.Applicative.Builder"] || {};
  var exports = $PS["Options.Applicative.Builder"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var ExitCodes = $PS["ExitCodes"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var PrefsMod = function (x) {
      return x;
  };
  var InfoMod = function (x) {
      return x;
  };
  var value = function (dictHasValue) {
      return function (x) {
          return new Options_Applicative_Builder_Internal.Mod(Control_Category.identity(Control_Category.categoryFn), new Options_Applicative_Builder_Internal.DefaultProp(new Data_Maybe.Just(x), Data_Maybe.Nothing.value), Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var str = Options_Applicative_Types.readerAsk;
  var $$short = function (dictHasName) {
      var $81 = Options_Applicative_Builder_Internal.name(dictHasName);
      return function ($82) {
          return Options_Applicative_Builder_Internal.fieldMod($81(Options_Applicative_Types.OptShort.create($82)));
      };
  };
  var progDesc = function (s) {
      return InfoMod(Data_Newtype.over()()(Options_Applicative_Types.ParserInfo)(function (i) {
          return {
              infoProgDesc: Options_Applicative_Help_Chunk.paragraph(s),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoHeader: i.infoHeader,
              infoParser: i.infoParser,
              infoPolicy: i.infoPolicy
          };
      }));
  };  
  var noArgError = function (e) {
      return Options_Applicative_Builder_Internal.fieldMod(Data_Newtype.over()()(Options_Applicative_Builder_Internal.OptionFields)(function (p) {
          return {
              optNoArgError: Data_Function["const"](e),
              optCompleter: p.optCompleter,
              optNames: p.optNames
          };
      }));
  }; 
  var prefs = function (m) {
      var base = {
          prefMultiSuffix: "",
          prefDisambiguate: false,
          prefShowHelpOnError: false,
          prefShowHelpOnEmpty: false,
          prefBacktrack: Options_Applicative_Types.Backtrack.value,
          prefColumns: 80
      };
      return Data_Newtype.un()(PrefsMod)(m)(base);
  };
  var prefsModSemigroup = new Data_Semigroup.Semigroup(function (m1) {
      return function (m2) {
          return PrefsMod((function () {
              var $83 = Data_Newtype.un()(PrefsMod)(m2);
              var $84 = Data_Newtype.un()(PrefsMod)(m1);
              return function ($85) {
                  return $83($84($85));
              };
          })());
      };
  });
  var prefsModMonoid = new Data_Monoid.Monoid(function () {
      return prefsModSemigroup;
  }, Control_Category.identity(Control_Category.categoryFn));
  var metavar = function (dictHasMetavar) {
      return function ($$var) {
          return Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over()()(Options_Applicative_Types.OptProperties)(function (p) {
              return {
                  propMetaVar: $$var,
                  propDescMod: p.propDescMod,
                  propHelp: p.propHelp,
                  propShowDefault: p.propShowDefault,
                  propVisibility: p.propVisibility
              };
          }));
      };
  };
  var option = function (r) {
      return function (m) {
          var v = Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("ARG"))(m);
          var v1 = v.value0({
              optNames: [  ],
              optCompleter: Data_Monoid.mempty(Options_Applicative_Types.completerMonoid),
              optNoArgError: Options_Applicative_Types.ExpectsArgError.create
          });
          var crdr = {
              crCompleter: v1.optCompleter,
              crReader: r
          };
          var rdr = new Options_Applicative_Types.OptReader(v1.optNames, crdr, v1.optNoArgError);
          return Options_Applicative_Builder_Internal.mkParser(v.value1)(v.value2)(rdr);
      };
  };
  var strOption = option(str);
  var $$long = function (dictHasName) {
      var $86 = Options_Applicative_Builder_Internal.name(dictHasName);
      return function ($87) {
          return Options_Applicative_Builder_Internal.fieldMod($86(Options_Applicative_Types.OptLong.create($87)));
      };
  };
  var infoModSemigroup = new Data_Semigroup.Semigroup(function (m1) {
      return function (m2) {
          return InfoMod((function () {
              var $88 = Data_Newtype.un()(InfoMod)(m2);
              var $89 = Data_Newtype.un()(InfoMod)(m1);
              return function ($90) {
                  return $88($89($90));
              };
          })());
      };
  });                                                        
  var info = function (parser) {
      return function (m) {
          var base = {
              infoParser: parser,
              infoFullDesc: true,
              infoProgDesc: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoHeader: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoFooter: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoFailureCode: ExitCodes["Error"].value,
              infoPolicy: Options_Applicative_Types.Intersperse.value
          };
          return Data_Newtype.un()(InfoMod)(m)(base);
      };
  };
  var idm = function (dictMonoid) {
      return Data_Monoid.mempty(dictMonoid);
  };
  var hidden = Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over()()(Options_Applicative_Types.OptProperties)(function (p) {
      return {
          propVisibility: Data_Ord.min(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.Hidden.value)(p.propVisibility),
          propDescMod: p.propDescMod,
          propHelp: p.propHelp,
          propMetaVar: p.propMetaVar,
          propShowDefault: p.propShowDefault
      };
  }));
  var help = function (s) {
      return Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over()()(Options_Applicative_Types.OptProperties)(function (p) {
          return {
              propHelp: Options_Applicative_Help_Chunk.paragraph(s),
              propDescMod: p.propDescMod,
              propMetaVar: p.propMetaVar,
              propShowDefault: p.propShowDefault,
              propVisibility: p.propVisibility
          };
      }));
  };
  var header = function (s) {
      return InfoMod(Data_Newtype.over()()(Options_Applicative_Types.ParserInfo)(function (i) {
          return {
              infoHeader: Options_Applicative_Help_Chunk.paragraph(s),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoParser: i.infoParser,
              infoPolicy: i.infoPolicy,
              infoProgDesc: i.infoProgDesc
          };
      }));
  };
  var fullDesc = InfoMod(Data_Newtype.over()()(Options_Applicative_Types.ParserInfo)(function (i) {
      return {
          infoFullDesc: true,
          infoFailureCode: i.infoFailureCode,
          infoFooter: i.infoFooter,
          infoHeader: i.infoHeader,
          infoParser: i.infoParser,
          infoPolicy: i.infoPolicy,
          infoProgDesc: i.infoProgDesc
      };
  }));
  var flag$prime = function (actv) {
      return function (v) {
          var rdr = (function () {
              var v1 = v.value0({
                  flagNames: [  ],
                  flagActive: actv
              });
              return new Options_Applicative_Types.FlagReader(v1.flagNames, v1.flagActive);
          })();
          return Options_Applicative_Builder_Internal.mkParser(v.value1)(v.value2)(rdr);
      };
  };
  var eitherReader = function (f) {
      return Control_Bind.bind(Options_Applicative_Types.readMBind)(Options_Applicative_Types.readerAsk)((function () {
          var $91 = Data_Either.either(Options_Applicative_Types.readerError)(Control_Applicative.pure(Options_Applicative_Types.readMApplicative));
          return function ($92) {
              return $91(f($92));
          };
      })());
  };
  var $$int = eitherReader(function (s) {
      var v = Data_Int.fromString(s);
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Either.Left.create("Can't parse as Int: `" + (Data_Show.show(Data_Show.showString)(s) + "`"));
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v.value0);
      };
      throw new Error("Failed pattern match at Options.Applicative.Builder (line 124, column 28 - line 126, column 20): " + [ v.constructor.name ]);
  });                                                                     
  var defaultPrefs = prefs(idm(prefsModMonoid));
  var abortOption = function (err) {
      return function (m) {
          return option(Options_Applicative_Types.readerAbort(err))((function (v) {
              return Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(v)(m);
          })(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ noArgError(err), value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Control_Category.identity(Control_Category.categoryFn)), metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("") ])));
      };
  };
  exports["flag'"] = flag$prime;
  exports["abortOption"] = abortOption;
  exports["strOption"] = strOption;
  exports["option"] = option;
  exports["short"] = $$short;
  exports["long"] = $$long;
  exports["help"] = help;
  exports["value"] = value;
  exports["metavar"] = metavar;
  exports["hidden"] = hidden;
  exports["int"] = $$int;
  exports["fullDesc"] = fullDesc;
  exports["header"] = header;
  exports["progDesc"] = progDesc;
  exports["info"] = info;
  exports["defaultPrefs"] = defaultPrefs;
  exports["infoModSemigroup"] = infoModSemigroup;
})(PS);
(function(exports) {
  "use strict";

  exports.process = process;

  exports.exit = function (code) {
    return function () {
      process.exit(code);
    };
  };

  exports.copyArray = function (xs) {
    return function () {
      return xs.slice();
    };
  };
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];             
  var stdout = $foreign.process.stdout;           
  var stderr = $foreign.process.stderr;
  var argv = $foreign.copyArray($foreign.process.argv);
  exports["argv"] = argv;
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["exit"] = $foreign.exit;
})(PS);
(function(exports) {
  /* global Buffer */
  "use strict";

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Node.Stream"] = $PS["Node.Stream"] || {};
  var exports = $PS["Node.Stream"];
  var $foreign = $PS["Node.Stream"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  exports["writeString"] = writeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.BashCompletion"] = $PS["Options.Applicative.BashCompletion"] || {};
  var exports = $PS["Options.Applicative.BashCompletion"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var Standard = (function () {
      function Standard() {

      };
      Standard.value = new Standard();
      return Standard;
  })();
  var Enriched = (function () {
      function Enriched(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Enriched.create = function (value0) {
          return function (value1) {
              return new Enriched(value0, value1);
          };
      };
      return Enriched;
  })();
  var zshCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ "#compdef " + progn, "", "local request", "local completions", "local word", "local index=$((CURRENT - 1))", "", "request=(--bash-completion-enriched --bash-completion-index $index)", "for arg in ${words[@]}; do", "  request=(${request[@]} --bash-completion-word $arg)", "done", "", "IFS=$'\\n' completions=($( " + (prog + " \"${request[@]}\" ))"), "", "for word in $completions; do", "  local -a parts", "", "  # Split the line at a tab if there is one.", "  IFS=$'\\t' parts=($( echo $word ))", "", "  if [[ -n $parts[2] ]]; then", "     if [[ $word[1] == \"-\" ]]; then", "       local desc=(\"$parts[1] ($parts[2])\")", "       compadd -d desc -- $parts[1]", "     else", "       local desc=($(print -f  \"%-019s -- %s\" $parts[1] $parts[2]))", "       compadd -l -d desc -- $parts[1]", "     fi", "  else", "    compadd -f -- $word", "  fi", "done" ]);
      };
  }; 
  var fishCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ " function _" + progn, "    set -l cl (commandline --tokenize --current-process)", "    # Hack around fish issue #3934", "    set -l cn (commandline --tokenize --cut-at-cursor --current-process)", "    set -l cn (count $cn)", "    set -l tmpline --bash-completion-enriched --bash-completion-index $cn", "    for arg in $cl", "      set tmpline $tmpline --bash-completion-word $arg", "    end", "    for opt in (" + (prog + " $tmpline)"), "      if test -d $opt", "        echo -E \"$opt/\"", "      else", "        echo -E \"$opt\"", "      end", "    end", "end", "", "complete --no-files --command " + (progn + (" --arguments '(_" + (progn + ")'"))) ]);
      };
  };
  var bashCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ "_" + (progn + "()"), "{", "    local CMDLINE", "    local IFS=$'\\n'", "    CMDLINE=(--bash-completion-index $COMP_CWORD)", "", "    for arg in ${COMP_WORDS[@]}; do", "        CMDLINE=(${CMDLINE[@]} --bash-completion-word $arg)", "    done", "", "    COMPREPLY=( $(" + (prog + " \"${CMDLINE[@]}\") )"), "}", "", "complete -o filenames -F _" + (progn + (" " + progn)) ]);
      };
  };
  var arraySplitAt = function (idx) {
      return function (arr) {
          if (idx === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          return {
              init: Data_Array.slice(0)(idx)(arr),
              rest: Data_Array.slice(idx)(Data_Array.length(arr))(arr)
          };
      };
  };
  var bashCompletionQuery = function (pinfo) {
      return function (pprefs) {
          return function (richness) {
              return function (ws) {
                  return function (i) {
                      return function (v) {
                          var v1 = arraySplitAt(i)(ws);
                          var run_completer = function (c) {
                              return Data_Newtype.un()(Options_Applicative_Types.Completer)(c)(Data_Maybe.fromMaybe("")(Data_Array.head(v1.rest)));
                          };
                          var render_line = function (len) {
                              return function (doc) {
                                  var v2 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.uncons)(Data_Array_NonEmpty.fromArray(Options_Applicative_Internal_Utils.lines(Text_PrettyPrint_Leijen.displayS(Text_PrettyPrint_Leijen.renderPretty(1.0)(len)(doc)))));
                                  if (v2 instanceof Data_Maybe.Nothing) {
                                      return "";
                                  };
                                  if (v2 instanceof Data_Maybe.Just && v2.value0.tail.length === 0) {
                                      return v2.value0.head;
                                  };
                                  if (v2 instanceof Data_Maybe.Just) {
                                      return v2.value0.head + "...";
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 162, column 27 - line 165, column 43): " + [ v2.constructor.name ]);
                              };
                          };
                          var is_completion = (function () {
                              var v2 = Data_Array.head(v1.rest);
                              if (v2 instanceof Data_Maybe.Just) {
                                  return Options_Applicative_Internal_Utils.startsWith(v2.value0);
                              };
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return Data_Function["const"](true);
                              };
                              throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 175, column 7 - line 177, column 30): " + [ v2.constructor.name ]);
                          })();
                          var filter_names = Data_Array.filter(is_completion);
                          var show_names = (function () {
                              var $84 = Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption);
                              return function ($85) {
                                  return filter_names($84($85));
                              };
                          })();
                          var compl = Options_Applicative_Common.runParserInfo(Options_Applicative_Internal.completionMonadP)(pinfo)(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Array.drop(1)(v1.init)));
                          var add_opt_help = function (dictFunctor) {
                              return function (opt) {
                                  if (richness instanceof Standard) {
                                      return Control_Category.identity(Control_Category.categoryFn);
                                  };
                                  if (richness instanceof Enriched) {
                                      return Data_Functor.map(dictFunctor)(function (o) {
                                          var h = Data_Newtype.un()(Options_Applicative_Help_Chunk.Chunk)(Options_Applicative_Types.optHelp(opt));
                                          return Data_Maybe.maybe(o)(function (h$prime) {
                                              return o + ("\x09" + render_line(richness.value0)(h$prime));
                                          })(h);
                                      });
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 138, column 24 - line 143, column 79): " + [ richness.constructor.name ]);
                              };
                          };
                          var add_cmd_help = function (dictFunctor) {
                              return function (p) {
                                  if (richness instanceof Standard) {
                                      return Control_Category.identity(Control_Category.categoryFn);
                                  };
                                  if (richness instanceof Enriched) {
                                      return Data_Functor.map(dictFunctor)(function (cmd) {
                                          var h = Control_Bind.bind(Data_Maybe.bindMaybe)(p(cmd))((function () {
                                              var $86 = Data_Newtype.un()(Options_Applicative_Help_Chunk.Chunk);
                                              var $87 = Data_Newtype.un()(Options_Applicative_Types.ParserInfo);
                                              return function ($88) {
                                                  return $86((function (v2) {
                                                      return v2.infoProgDesc;
                                                  })($87($88)));
                                              };
                                          })());
                                          return Data_Maybe.maybe(cmd)(function (h$prime) {
                                              return cmd + ("\x09" + render_line(richness.value1)(h$prime));
                                          })(h);
                                      });
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 148, column 22 - line 153, column 85): " + [ richness.constructor.name ]);
                              };
                          };
                          var opt_completions = function (argPolicy) {
                              return function (hinfo) {
                                  return function (opt) {
                                      var v2 = (Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain;
                                      if (v2 instanceof Options_Applicative_Types.OptReader) {
                                          if (Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(argPolicy)(Options_Applicative_Types.AllPositionals.value)) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_opt_help(Data_Functor.functorArray)(opt)(show_names(v2.value0)));
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.FlagReader) {
                                          if (Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(argPolicy)(Options_Applicative_Types.AllPositionals.value)) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_opt_help(Data_Functor.functorArray)(opt)(show_names(v2.value0)));
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.ArgReader) {
                                          if ((Data_Newtype.un()(Options_Applicative_Types.OptHelpInfo)(hinfo)).hinfoUnreachableArgs) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return run_completer((Data_Newtype.un()(Options_Applicative_Types.CReader)(v2.value0)).crCompleter);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.CmdReader) {
                                          if ((Data_Newtype.un()(Options_Applicative_Types.OptHelpInfo)(hinfo)).hinfoUnreachableArgs) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_cmd_help(Data_Functor.functorArray)(v2.value2)(filter_names(v2.value1)));
                                          };
                                      };
                                      throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 113, column 43 - line 133, column 53): " + [ v2.constructor.name ]);
                                  };
                              };
                          };
                          var list_options = function (a) {
                              var $89 = Data_Functor.map(Effect.functorEffect)(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray));
                              var $90 = Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect);
                              var $91 = Options_Applicative_Common.mapParser(opt_completions(a));
                              return function ($92) {
                                  return $89($90($91($92)));
                              };
                          };
                          var v2 = Options_Applicative_Internal.runCompletion(compl)(pprefs);
                          if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof Data_Either.Left) {
                              return Data_Exists.runExists(function (p) {
                                  return list_options(v2.value0.value0.value1)(p);
                              })(v2.value0.value0.value0.value0);
                          };
                          if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof Data_Either.Right) {
                              return run_completer(v2.value0.value0);
                          };
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 83, column 52 - line 89, column 15): " + [ v2.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var bashCompletionParser = function (pinfo) {
      return function (pprefs) {
          var failure = function (opts) {
              return {
                  execCompletion: function (progn) {
                      return Data_Functor.map(Effect.functorEffect)(Options_Applicative_Internal_Utils.unLines(Data_Foldable.foldableArray))(opts(progn));
                  }
              };
          };
          var complParser = Control_Alt.alt(Options_Applicative_Types.parserAlt)(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(bashCompletionQuery(pinfo)(pprefs))(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Options_Applicative_Builder["flag'"](Enriched.create)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.flagFieldsHasName)("bash-completion-enriched"))(Options_Applicative_Builder_Internal.internal)))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-option-desc-length"))(Options_Applicative_Builder_Internal.internal))(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(40)))))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-command-desc-length"))(Options_Applicative_Builder_Internal.internal))(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(40)))))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(Standard.value))))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Array.fromFoldable(Data_List_Types.foldableList))(Options_Applicative_Types.many(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-word"))(Options_Applicative_Builder_Internal.internal))))))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-index"))(Options_Applicative_Builder_Internal.internal)))))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(bashCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-script"))(Options_Applicative_Builder_Internal.internal))))))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(fishCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("fish-completion-script"))(Options_Applicative_Builder_Internal.internal))))))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(zshCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("zsh-completion-script"))(Options_Applicative_Builder_Internal.internal)))));
          return complParser;
      };
  };
  exports["bashCompletionParser"] = bashCompletionParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Help.Types"] = $PS["Options.Applicative.Help.Types"] || {};
  var exports = $PS["Options.Applicative.Help.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var ParserHelp = function (x) {
      return x;
  }
  var parserHelpMonoid = Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpBody";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpError";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpFooter";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpHeader";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpSuggestions";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpUsage";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordNil)))))));
  var helpText = function (v) {
      return Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(Options_Applicative_Help_Chunk.vsepChunks([ v.helpError, v.helpSuggestions, v.helpHeader, v.helpUsage, v.helpBody, v.helpFooter ]));
  };
  var renderHelp = function (cols) {
      var $2 = Text_PrettyPrint_Leijen.renderPretty(1.0)(cols);
      return function ($3) {
          return Text_PrettyPrint_Leijen.displayS($2(helpText($3)));
      };
  };
  exports["ParserHelp"] = ParserHelp;
  exports["renderHelp"] = renderHelp;
  exports["parserHelpMonoid"] = parserHelpMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Help.Core"] = $PS["Options.Applicative.Help.Core"] || {};
  var exports = $PS["Options.Applicative.Help.Core"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Help_Types = $PS["Options.Applicative.Help.Types"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var OptDescStyle = function (x) {
      return x;
  };
  var usageHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpUsage: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var suggestionsHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpSuggestions: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  }; 
  var intersperse = function (sep) {
      var $28 = Data_Array.fold(Data_Monoid.monoidArray);
      var $29 = Data_Array.mapWithIndex(function (idx) {
          return function (e) {
              var $13 = idx === 0;
              if ($13) {
                  return [ e ];
              };
              return [ sep, e ];
          };
      });
      return function ($30) {
          return $28($29($30));
      };
  };
  var optDesc = function (pprefs) {
      return function (style) {
          return function (info) {
              return function (opt) {
                  var suffix = (function () {
                      if ((Data_Newtype.un()(Options_Applicative_Types.OptHelpInfo)(info)).hinfoMulti) {
                          return Options_Applicative_Help_Chunk.stringChunk((Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefMultiSuffix);
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 58, column 7 - line 62, column 17): " + [  ]);
                  })();
                  var show_opt = (function () {
                      if ((Data_Newtype.un()(Options_Applicative_Types.OptHelpInfo)(info)).hinfoDefault && !(Data_Newtype.un()(OptDescStyle)(style)).descOptional) {
                          return false;
                      };
                      if (Data_Eq.eq(Options_Applicative_Types.optVisibilityEq)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Hidden.value)) {
                          return (Data_Newtype.un()(OptDescStyle)(style)).descHidden;
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Eq.eq(Options_Applicative_Types.optVisibilityEq)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Visible.value);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 51, column 7 - line 57, column 39): " + [  ]);
                  })();
                  var ns = Options_Applicative_Common.optionNames((Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain);
                  var mv = Options_Applicative_Help_Chunk.stringChunk(Options_Applicative_Types.optMetaVar(opt));
                  var descs = Data_Functor.map(Data_Functor.functorArray)(function ($31) {
                      return Text_PrettyPrint_Leijen.string(Options_Applicative_Common.showOption($31));
                  })(Data_Array.sort(Options_Applicative_Types.optNameOrd)(ns));
                  var render = function (chunk) {
                      if (!show_opt) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (Options_Applicative_Help_Chunk.isEmpty(chunk) || !(Data_Newtype.un()(OptDescStyle)(style)).descSurround) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(chunk)(suffix);
                      };
                      if ((Data_Newtype.un()(Options_Applicative_Types.OptHelpInfo)(info)).hinfoDefault) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.brackets)(chunk))(suffix);
                      };
                      if (Data_Array["null"](Data_Array.drop(1)(descs))) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(chunk)(suffix);
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.parens)(chunk))(suffix);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 63, column 7 - line 73, column 43): " + [ chunk.constructor.name ]);
                  };
                  var desc$prime = Options_Applicative_Help_Chunk.chunkBeside(Options_Applicative_Help_Chunk.listToChunk(Text_PrettyPrint_Leijen.docMonoid)(intersperse((Data_Newtype.un()(OptDescStyle)(style)).descSep)(descs)))(mv);
                  return Data_Maybe.maybe(Control_Category.identity(Control_Category.categoryFn))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor))(Options_Applicative_Types.optDescMod(opt))(render(desc$prime));
              };
          };
      };
  };
  var headerHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpHeader: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var fullDesc = function (pprefs) {
      var style = {
          descSep: Text_PrettyPrint_Leijen.string(","),
          descHidden: true,
          descOptional: true,
          descSurround: false
      };
      var doc = function (info) {
          return function (opt) {
              var show_def = function (s) {
                  return Text_PrettyPrint_Leijen.parens(Text_PrettyPrint_Leijen.appendWithSpace(Text_PrettyPrint_Leijen.string("default:"))(Text_PrettyPrint_Leijen.string(s)));
              };
              var n = optDesc(pprefs)(style)(info)(opt);
              var hdef = Options_Applicative_Help_Chunk.Chunk(Data_Functor.map(Data_Maybe.functorMaybe)(show_def)(Options_Applicative_Types.optShowDefault(opt)));
              var h = Options_Applicative_Types.optHelp(opt);
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!Options_Applicative_Help_Chunk.isEmpty(n)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!Options_Applicative_Help_Chunk.isEmpty(h)))(function () {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(n), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(Options_Applicative_Help_Chunk.chunkBeside(h)(hdef)))));
                  });
              });
          };
      };
      var $32 = Options_Applicative_Common.mapParser(doc);
      return function ($33) {
          return Options_Applicative_Help_Chunk.tabulate(Data_Array.catMaybes($32($33)));
      };
  };
  var footerHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpFooter: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var fold_tree = function (v) {
      if (v instanceof Options_Applicative_Types.Leaf) {
          return v.value0;
      };
      if (v instanceof Options_Applicative_Types.MultNode) {
          return Data_Array.foldr(function ($34) {
              return Options_Applicative_Help_Chunk.chunkBesideOrBelow(fold_tree($34));
          })(Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)))(v.value0);
      };
      if (v instanceof Options_Applicative_Types.AltNode) {
          var alt_node = function (v1) {
              if (v1.length === 1) {
                  return v1[0];
              };
              return Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.parens)(Data_Array.foldr(Options_Applicative_Help_Chunk.chunked(function (x) {
                  return function (y) {
                      return Text_PrettyPrint_Leijen.appendWithSoftline(x)(Text_PrettyPrint_Leijen.appendWithSoftline(Text_PrettyPrint_Leijen["char"]("|"))(y));
                  };
              }))(Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)))(v1));
          };
          return alt_node(Data_Array.filter((function () {
              var $35 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              return function ($36) {
                  return $35(Options_Applicative_Help_Chunk.isEmpty($36));
              };
          })())(Data_Functor.map(Data_Functor.functorArray)(fold_tree)(v.value0)));
      };
      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 116, column 1 - line 116, column 46): " + [ v.constructor.name ]);
  };
  var errorHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpError: chunk,
              helpBody: v.helpBody,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var cmdDesc = (function () {
      var desc = function (v) {
          return function (opt) {
              var v1 = (Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain;
              if (v1 instanceof Options_Applicative_Types.CmdReader) {
                  return Data_Tuple.Tuple.create(v1.value0)(Options_Applicative_Help_Chunk.tabulate(Control_Bind.bind(Control_Bind.bindArray)(Data_Array.reverse(v1.value1))(function (cmd) {
                      return Control_Bind.bind(Control_Bind.bindArray)(Data_Maybe.maybe([  ])(Control_Applicative.pure(Control_Applicative.applicativeArray))(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                          var $37 = Data_Newtype.un()(Options_Applicative_Types.ParserInfo);
                          return function ($38) {
                              return (function (v2) {
                                  return v2.infoProgDesc;
                              })($37($38));
                          };
                      })())(v1.value2(cmd))))(function (d) {
                          return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(Text_PrettyPrint_Leijen.string(cmd), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(d))));
                      });
                  })));
              };
              return Data_Monoid.mempty(Data_Tuple.monoidTuple(Data_Maybe.monoidMaybe(Data_Semigroup.semigroupString))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
          };
      };
      return Options_Applicative_Common.mapParser(desc);
  })();
  var briefDesc$prime = function (showOptional) {
      return function (pprefs) {
          var style = {
              descSep: Text_PrettyPrint_Leijen.string("|"),
              descHidden: false,
              descOptional: showOptional,
              descSurround: true
          };
          var $39 = Options_Applicative_Common.treeMapParser(optDesc(pprefs)(style));
          return function ($40) {
              return fold_tree($39($40));
          };
      };
  };
  var missingDesc = briefDesc$prime(false);
  var briefDesc = briefDesc$prime(true);
  var parserUsage = function (pprefs) {
      return function (p) {
          return function (progn) {
              return Text_PrettyPrint_Leijen.hsep([ Text_PrettyPrint_Leijen.string("Usage:"), Text_PrettyPrint_Leijen.string(progn), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(briefDesc(pprefs)(p))) ]);
          };
      };
  };
  var bodyHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpBody: chunk,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var parserHelp = function (pprefs) {
      return function (p) {
          var with_title = function (title) {
              return Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(function (v) {
                  return Text_PrettyPrint_Leijen.appendWithLine(Text_PrettyPrint_Leijen.string(title))(v);
              });
          };
          var group_title = function (arr) {
              var v = Data_Array_NonEmpty.uncons(arr);
              return with_title(Data_Maybe.fromMaybe("Available commands:")(Data_Tuple.fst(v.head)))(Options_Applicative_Help_Chunk.vcatChunks(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Data_Tuple.snd(v.head) ])(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v.tail))));
          };
          var cs = Data_Array.groupBy(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString)))(Data_Tuple.fst))(cmdDesc(p));
          return bodyHelp(Options_Applicative_Help_Chunk.vsepChunks(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ with_title("Available options:")(fullDesc(pprefs)(p)) ])(Data_Functor.map(Data_Functor.functorArray)(group_title)(cs))));
      };
  };
  exports["missingDesc"] = missingDesc;
  exports["errorHelp"] = errorHelp;
  exports["headerHelp"] = headerHelp;
  exports["suggestionsHelp"] = suggestionsHelp;
  exports["usageHelp"] = usageHelp;
  exports["footerHelp"] = footerHelp;
  exports["parserHelp"] = parserHelp;
  exports["parserUsage"] = parserUsage;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Help.Levenshtein"] = $PS["Options.Applicative.Help.Levenshtein"] || {};
  var exports = $PS["Options.Applicative.Help.Levenshtein"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function_Memoize = $PS["Data.Function.Memoize"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];                
  var editDistance = function (dictEq) {
      return function (xs) {
          return function (ys) {
              var dist$prime = Data_Function_Memoize.memoize2(Data_Function_Memoize.tabulateNat)(Data_Function_Memoize.tabulateNat)(function (a) {
                  return function (b) {
                      return dist(a)(b);
                  };
              });
              var dist = function (v) {
                  return function (v1) {
                      if (v === 0) {
                          return v1;
                      };
                      if (v1 === 0) {
                          return v;
                      };
                      return Data_Semigroup_Foldable.minimum(Data_Ord.ordInt)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(dist$prime(v - 1 | 0)(v1) + 1 | 0, [ dist$prime(v)(v1 - 1 | 0) + 1 | 0, (function (dictPartial) {
                          var $6 = Data_Eq.eq(dictEq)(xs[v - 1 | 0])(ys[v1 - 1 | 0]);
                          if ($6) {
                              return dist$prime(v - 1 | 0)(v1 - 1 | 0);
                          };
                          return 1 + dist$prime(v - 1 | 0)(v1 - 1 | 0) | 0;
                      })() ]));
                  };
              };
              return dist$prime(Data_Array.length(xs))(Data_Array.length(ys));
          };
      };
  };
  exports["editDistance"] = editDistance;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Options.Applicative.Extra"] = $PS["Options.Applicative.Extra"] || {};
  var exports = $PS["Options.Applicative.Extra"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var ExitCodes = $PS["ExitCodes"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Process = $PS["Node.Process"];
  var Node_Stream = $PS["Node.Stream"];
  var Options_Applicative_BashCompletion = $PS["Options.Applicative.BashCompletion"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Help_Core = $PS["Options.Applicative.Help.Core"];
  var Options_Applicative_Help_Levenshtein = $PS["Options.Applicative.Help.Levenshtein"];
  var Options_Applicative_Help_Types = $PS["Options.Applicative.Help.Types"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var renderFailure = function (failure) {
      return function (progn) {
          var v = Data_Newtype.un()(Options_Applicative_Types.ParserFailure)(failure)(progn);
          return new Data_Tuple.Tuple(Options_Applicative_Help_Types.renderHelp(v.value1.value1.value0)(v.value0), v.value1.value0);
      };
  };
  var parserFailure = function (pprefs) {
      return function (pinfo) {
          return function (msg) {
              return function (ctx) {
                  var with_context = function (arr) {
                      return function (i) {
                          return function (f) {
                              var v = Data_Array.head(arr);
                              if (v instanceof Data_Maybe.Nothing) {
                                  return f([  ])(i);
                              };
                              if (v instanceof Data_Maybe.Just) {
                                  return Data_Exists.runExists(function (i$prime) {
                                      return f(Options_Applicative_Internal.contextNames(arr))(i$prime);
                                  })(v.value0.value1);
                              };
                              throw new Error("Failed pattern match at Options.Applicative.Extra (line 183, column 28 - line 185, column 73): " + [ v.constructor.name ]);
                          };
                      };
                  };
                  var usage_help = function (progn) {
                      return function (names) {
                          return function (v) {
                              if (msg instanceof Options_Applicative_Types.InfoMsg) {
                                  return Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid);
                              };
                              return Options_Applicative_Help_Core.usageHelp(Options_Applicative_Help_Chunk.vcatChunks([ Control_Applicative.pure(Options_Applicative_Help_Chunk.chunkApplicative)(Options_Applicative_Help_Core.parserUsage(pprefs)(v.infoParser)(Options_Applicative_Internal_Utils.unWords(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ progn ])(names)))), Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.indent(2))(v.infoProgDesc) ]));
                          };
                      };
                  };
                  var suggestion_help = Options_Applicative_Help_Core.suggestionsHelp((function () {
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          var opt_completions = function (v) {
                              return function (v1) {
                                  if (v1.optMain instanceof Options_Applicative_Types.OptReader) {
                                      return Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption)(v1.optMain.value0);
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.FlagReader) {
                                      return Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption)(v1.optMain.value0);
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.ArgReader) {
                                      return [  ];
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.CmdReader) {
                                      if (v.hinfoUnreachableArgs) {
                                          return [  ];
                                      };
                                      if (Data_Boolean.otherwise) {
                                          return v1.optMain.value1;
                                      };
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Extra (line 273, column 64 - line 280, column 37): " + [ v1.optMain.constructor.name ]);
                              };
                          };
                          var possibles = Data_Array.fold(Data_Monoid.monoidArray)(Data_Exists.runExists(function (zz) {
                              return Options_Applicative_Common.mapParser(opt_completions)(zz);
                          })(msg.value1.value0));
                          var isClose = function (a) {
                              return Data_Function.on(Options_Applicative_Help_Levenshtein.editDistance(Data_Eq.eqChar))(Data_String_CodeUnits.toCharArray)(a)(msg.value0) < 3;
                          };
                          var good = Data_Array.filter(isClose)(possibles);
                          var prose = (function () {
                              var $43 = Data_Array.length(good) < 2;
                              if ($43) {
                                  return Options_Applicative_Help_Chunk.stringChunk("Did you mean this?");
                              };
                              return Options_Applicative_Help_Chunk.stringChunk("Did you mean one of these?");
                          })();
                          var suggestions = Control_Apply.apply(Options_Applicative_Help_Chunk.chunkApply)(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.appendWithLine)(prose))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.indent(4))(Options_Applicative_Help_Chunk.vcatChunks(Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Help_Chunk.stringChunk)(good))));
                          return suggestions;
                      };
                      return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                  })());
                  var show_full_help = (function () {
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return true;
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError && (msg.value0 instanceof Options_Applicative_Types.CmdStart && (Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnEmpty)) {
                          return true;
                      };
                      return (Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnError;
                  })();
                  var exit_code = (function () {
                      if (msg instanceof Options_Applicative_Types.ErrorMsg) {
                          return (Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError) {
                          return (Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.ExpectsArgError) {
                          return (Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          return (Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return ExitCodes.Success.value;
                      };
                      if (msg instanceof Options_Applicative_Types.InfoMsg) {
                          return ExitCodes.Success.value;
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Extra (line 171, column 17 - line 177, column 44): " + [ msg.constructor.name ]);
                  })();
                  var error_help = Options_Applicative_Help_Core.errorHelp((function () {
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (msg instanceof Options_Applicative_Types.ErrorMsg) {
                          return Options_Applicative_Help_Chunk.stringChunk(msg.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.InfoMsg) {
                          return Options_Applicative_Help_Chunk.stringChunk(msg.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError && (msg.value0 instanceof Options_Applicative_Types.CmdStart && (Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnEmpty)) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError) {
                          return Data_Exists.runExists(function (x) {
                              return Options_Applicative_Help_Chunk.chunkBeside(Options_Applicative_Help_Chunk.stringChunk("Missing:"))(Options_Applicative_Help_Core.missingDesc(pprefs)(x));
                          })(msg.value1.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.ExpectsArgError) {
                          return Options_Applicative_Help_Chunk.stringChunk("The option `" + (msg.value0 + "` expects an argument."));
                      };
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          var msg$prime = (function () {
                              var $67 = Options_Applicative_Internal_Utils.startsWith("-")(msg.value0);
                              if ($67) {
                                  return "Invalid option `" + (msg.value0 + "'");
                              };
                              return "Invalid argument `" + (msg.value0 + "'");
                          })();
                          return Options_Applicative_Help_Chunk.stringChunk(msg$prime);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Extra (line 196, column 30 - line 225, column 30): " + [ msg.constructor.name ]);
                  })());
                  var base_help = function (v) {
                      var h = Options_Applicative_Help_Core.headerHelp(v.infoHeader);
                      var f = Options_Applicative_Help_Core.footerHelp(v.infoFooter);
                      if (show_full_help) {
                          return Data_Array.fold(Options_Applicative_Help_Types.parserHelpMonoid)([ h, f, Options_Applicative_Help_Core.parserHelp(pprefs)(v.infoParser) ]);
                      };
                      return Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid);
                  };
                  return Options_Applicative_Types.ParserFailure(function (progn) {
                      var h = with_context(ctx)(pinfo)(function (names) {
                          return function (pinfo$prime) {
                              return Data_Array.fold(Options_Applicative_Help_Types.parserHelpMonoid)([ base_help(pinfo$prime), usage_help(progn)(names)(pinfo$prime), suggestion_help, error_help ]);
                          };
                      });
                      return new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(exit_code, new Data_Tuple.Tuple((Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefColumns, Data_Unit.unit)));
                  });
              };
          };
      };
  };
  var helper = Options_Applicative_Builder.abortOption(Options_Applicative_Types.ShowHelpText.value)(Data_Array.fold(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("help"), Options_Applicative_Builder["short"](Options_Applicative_Builder_Internal.optionFieldsHasName)("h"), Options_Applicative_Builder.help("Show this help text"), Options_Applicative_Builder.hidden ]));
  var getProgName = Data_Functor.mapFlipped(Effect.functorEffect)(Node_Process.argv)(function (args) {
      return Data_Maybe.fromMaybe("")(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(args)(1))(function (executablePath) {
          return Data_Array.last(Data_String_Common.split("/")(executablePath));
      }));
  });
  var getArgs = Data_Functor.mapFlipped(Effect.functorEffect)(Node_Process.argv)(Data_Array.drop(2));
  var exitWith = function (c) {
      return Node_Process.exit(Data_Enum.fromEnum(ExitCodes.boundedEnumExitCode)(c));
  };
  var exitSuccess = Node_Process.exit(Data_Enum.fromEnum(ExitCodes.boundedEnumExitCode)(ExitCodes.Success.value));
  var handleParseResult = function (v) {
      if (v instanceof Options_Applicative_Types.Success) {
          return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
      };
      if (v instanceof Options_Applicative_Types.Failure) {
          return function __do() {
              var progn = getProgName();
              var v1 = renderFailure(v.value0)(progn);
              var stream = (function () {
                  if (v1.value1 instanceof ExitCodes.Success) {
                      return Node_Process.stdout;
                  };
                  return Node_Process.stderr;
              })();
              Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(stream)(Node_Encoding.UTF8.value)(v1.value0 + "\x0a")(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))))();
              return exitWith(v1.value1)();
          };
      };
      if (v instanceof Options_Applicative_Types.CompletionInvoked) {
          return function __do() {
              var progn = getProgName();
              var msg = (Data_Newtype.un()(Options_Applicative_Types.CompletionResult)(v.value0)).execCompletion(progn)();
              Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(Node_Process.stdout)(Node_Encoding.UTF8.value)(msg)(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))))();
              return exitSuccess();
          };
      };
      throw new Error("Failed pattern match at Options.Applicative.Extra (line 110, column 1 - line 110, column 58): " + [ v.constructor.name ]);
  };
  var execParserPure = function (pprefs) {
      return function (pinfo) {
          return function (args) {
              var pinfo$prime = Data_Newtype.over()()(Options_Applicative_Types.ParserInfo)(function (i) {
                  return {
                      infoParser: Control_Alt.alt(Options_Applicative_Types.parserAlt)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Either.Left.create)(Options_Applicative_BashCompletion.bashCompletionParser(pinfo)(pprefs)))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Either.Right.create)(i.infoParser)),
                      infoFailureCode: i.infoFailureCode,
                      infoFooter: i.infoFooter,
                      infoFullDesc: i.infoFullDesc,
                      infoHeader: i.infoHeader,
                      infoPolicy: i.infoPolicy,
                      infoProgDesc: i.infoProgDesc
                  };
              })(pinfo);
              var p = Options_Applicative_Common.runParserInfo(Options_Applicative_Internal.pMonadP)(pinfo$prime)(Data_List.fromFoldable(Data_Foldable.foldableArray)(args));
              var v = Options_Applicative_Internal.runP(p)(pprefs);
              if (v.value0 instanceof Data_Either.Right && v.value0.value0 instanceof Data_Either.Right) {
                  return new Options_Applicative_Types.Success(v.value0.value0.value0);
              };
              if (v.value0 instanceof Data_Either.Right && v.value0.value0 instanceof Data_Either.Left) {
                  return new Options_Applicative_Types.CompletionInvoked(v.value0.value0.value0);
              };
              if (v.value0 instanceof Data_Either.Left) {
                  return Options_Applicative_Types.Failure.create(parserFailure(pprefs)(pinfo)(v.value0.value0)(v.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Extra (line 144, column 3 - line 147, column 73): " + [ v.constructor.name ]);
          };
      };
  };
  var customExecParser = function (pprefs) {
      return function (pinfo) {
          return Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(execParserPure(pprefs)(pinfo))(getArgs))(handleParseResult);
      };
  };
  var execParser = customExecParser(Options_Applicative_Builder.defaultPrefs);
  exports["helper"] = helper;
  exports["execParser"] = execParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.Parser.Pos"] = $PS["Text.Parsing.Parser.Pos"] || {};
  var exports = $PS["Text.Parsing.Parser.Pos"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_String_Common = $PS["Data.String.Common"];
  var updatePosString = function (pos$prime) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\x0a") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x0d") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x09") {
                      return {
                          line: v.line,
                          column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
                      };
                  };
                  return {
                      line: v.line,
                      column: v.column + 1 | 0
                  };
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap()(""))(str));
      };
  }; 
  var initialPos = {
      line: 1,
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.Parser"] = $PS["Text.Parsing.Parser"] || {};
  var exports = $PS["Text.Parsing.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  };
  var parseErrorMessage = function (v) {
      return v.value0;
  }; 
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(initialState);
          };
      };
  };
  var runParser = function (s) {
      var $88 = Data_Newtype.unwrap();
      var $89 = runParserT(Data_Identity.monadIdentity)(s);
      return function ($90) {
          return $88($89($90));
      };
  }; 
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };   
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)((function () {
          var $96 = Data_Newtype.unwrap();
          return function ($97) {
              return Control_Monad_Except_Trans.runExceptT($96(f($97)));
          };
      })());
  });                           
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (pos) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applyParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (p1) {
          return function (p2) {
              return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                      if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                          return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p2)))(v);
                      };
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                  });
              })));
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return plusParserT(dictMonad);
      });
  };
  exports["ParseError"] = ParseError;
  exports["parseErrorMessage"] = parseErrorMessage;
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["lazyParserT"] = lazyParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.Parser.Combinators"] = $PS["Text.Parsing.Parser.Combinators"] || {};
  var exports = $PS["Text.Parsing.Parser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var tryRethrow = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var $$try = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap()(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var skipMany1 = function (dictMonad) {
      return function (p) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(skipMany(dictMonad)(p))(function () {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
              });
          });
      };
  };
  var skipMany = function (dictMonad) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(skipMany1(dictMonad)(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
      };
  };
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (as) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_NonEmpty["cons'"](a)(as));
                  });
              });
          };
      };
  };
  var sepBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (as) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(a, as));
                  });
              }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
          };
      };
  };
  var optional = function (dictMonad) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
      };
  };
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };
  var notFollowedBy = function (dictMonad) {
      return function (p) {
          return $$try(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))($$try(dictMonad)(p))(Text_Parsing_Parser.fail(dictMonad)("Negated parser succeeded")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit)));
      };
  };
  var choice = function (dictFoldable) {
      return function (dictMonad) {
          return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad)))(Control_Plus.empty(Text_Parsing_Parser.plusParserT(dictMonad)));
      };
  };
  var between = function (dictMonad) {
      return function (open) {
          return function (close) {
              return function (p) {
                  return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(open)(p))(close);
              };
          };
      };
  };
  var asErrorMessage = function (dictMonad) {
      return Data_Function.flip(withErrorMessage(dictMonad));
  };
  exports["withErrorMessage"] = withErrorMessage;
  exports["asErrorMessage"] = asErrorMessage;
  exports["between"] = between;
  exports["option"] = option;
  exports["optional"] = optional;
  exports["try"] = $$try;
  exports["tryRethrow"] = tryRethrow;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
  exports["choice"] = choice;
  exports["skipMany"] = skipMany;
  exports["skipMany1"] = skipMany1;
  exports["notFollowedBy"] = notFollowedBy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.Parser.String"] = $PS["Text.Parsing.Parser.String"] || {};
  var exports = $PS["Text.Parsing.Parser.String"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var StringLike = function (drop, $$null, stripPrefix, uncons) {
      this.drop = drop;
      this["null"] = $$null;
      this.stripPrefix = stripPrefix;
      this.uncons = uncons;
  };
  var uncons = function (dict) {
      return dict.uncons;
  };
  var stripPrefix = function (dict) {
      return dict.stripPrefix;
  };
  var stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_Common["null"], Data_String_CodeUnits.stripPrefix, Data_String_CodeUnits.uncons);
  var string = function (dictStringLike) {
      return function (dictMonad) {
          return function (str) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                  return v.value0;
              }))(function (input) {
                  var v = stripPrefix(dictStringLike)(Data_Newtype.wrap()(str))(input);
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                          return new Text_Parsing_Parser.ParseState(v.value0, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(str), true);
                      }))(function () {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                      });
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
              });
          };
      };
  };
  var drop = function (dict) {
      return dict.drop;
  };
  var anyChar = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (input) {
              var v = uncons(dictStringLike)(input);
              if (v instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                      return new Text_Parsing_Parser.ParseState(v.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(Data_String_CodeUnits.singleton(v.value0.head)), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): " + [ v.constructor.name ]);
          });
      };
  };
  var satisfy = function (dictStringLike) {
      return function (dictMonad) {
          return function (f) {
              return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (c) {
                  var $52 = f(c);
                  if ($52) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String_CodeUnits.singleton(c) + "' did not satisfy predicate"));
              }));
          };
      };
  };
  var $$char = function (dictStringLike) {
      return function (dictMonad) {
          return function (c) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function (v) {
                  return v === c;
              }))(Data_Show.show(Data_Show.showChar)(c));
          };
      };
  };
  var noneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  var oneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  exports["string"] = string;
  exports["satisfy"] = satisfy;
  exports["char"] = $$char;
  exports["oneOf"] = oneOf;
  exports["noneOf"] = noneOf;
  exports["stringLikeString"] = stringLikeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.Parser.Token"] = $PS["Text.Parsing.Parser.Token"] || {};
  var exports = $PS["Text.Parsing.Parser.Token"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_CodePoint_Unicode = $PS["Data.CodePoint.Unicode"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Unicode = $PS["Data.String.Unicode"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var $$Math = $PS["Math"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var unGenLanguageDef = function (v) {
      return v;
  };
  var theReservedNames = function (dictMonad) {
      return function (v) {
          if (v.caseSensitive) {
              return Data_Array.sort(Data_Ord.ordString)(v.reservedNames);
          };
          if (Data_Boolean.otherwise) {
              return Data_Array.sort(Data_Ord.ordString)(Data_Functor.map(Data_Functor.functorArray)(Data_String_Common.toLower)(v.reservedNames));
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 728, column 1 - line 728, column 82): " + [ v.constructor.name ]);
      };
  };
  var satisfyCP = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function ($117) {
              return p(Data_String_CodePoints.codePointFromChar($117));
          });
      };
  };
  var simpleSpace = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isSpace));
  };
  var space = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isSpace))("space");
  };
  var upper = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isUpper))("uppercase letter");
  };
  var oneLineComment = function (dictMonad) {
      return function (v) {
          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentLine)))(Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (v1) {
              return v1 !== "\x0a";
          })));
      };
  };
  var octDigit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isOctDigit))("oct digit");
  };
  var letter = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isAlpha))("letter");
  };
  var isReserved = function ($copy_names) {
      return function ($copy_name) {
          var $tco_var_names = $copy_names;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(names, name) {
              var v = Data_Array.uncons(names);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return false;
              };
              if (v instanceof Data_Maybe.Just) {
                  var v1 = Data_Ord.compare(Data_Ord.ordString)(v.value0.head)(name);
                  if (v1 instanceof Data_Ordering.LT) {
                      $tco_var_names = v.value0.tail;
                      $copy_name = name;
                      return;
                  };
                  if (v1 instanceof Data_Ordering.EQ) {
                      $tco_done = true;
                      return true;
                  };
                  if (v1 instanceof Data_Ordering.GT) {
                      $tco_done = true;
                      return false;
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 723, column 39 - line 726, column 53): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 721, column 5 - line 726, column 53): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_names, $copy_name);
          };
          return $tco_result;
      };
  };
  var isReservedName = function (dictMonad) {
      return function (v) {
          return function (name) {
              var caseName = (function () {
                  if (v.caseSensitive) {
                      return name;
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_String_Common.toLower(name);
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 716, column 5 - line 717, column 57): " + [  ]);
              })();
              return isReserved(theReservedNames(dictMonad)(v))(caseName);
          };
      };
  };
  var inCommentSingle = function (dictMonad) {
      return function (v) {
          var startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String_CodeUnits.toCharArray(v.commentEnd))(Data_String_CodeUnits.toCharArray(v.commentStart));
          return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd))(p)))("end of comment");
          });
      };
  };
  var multiLineComment = function (dictMonad) {
      return function (v) {
          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentStart)))(inComment(dictMonad)(v));
      };
  };
  var inCommentMulti = function (dictMonad) {
      return function (v) {
          var startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String_CodeUnits.toCharArray(v.commentEnd))(Data_String_CodeUnits.toCharArray(v.commentStart));
          return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(multiLineComment(dictMonad)(v))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd))(p)))("end of comment");
          });
      };
  };
  var inComment = function (dictMonad) {
      return function (v) {
          if (v.nestedComments) {
              return inCommentMulti(dictMonad)(v);
          };
          return inCommentSingle(dictMonad)(v);
      };
  };
  var whiteSpace$prime = function (dictMonad) {
      return function (v) {
          if (Data_String_Common["null"](v.commentLine) && Data_String_Common["null"](v.commentStart)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(simpleSpace(dictMonad))(""));
          };
          if (Data_String_Common["null"](v.commentLine)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(multiLineComment(dictMonad)(v)))(""));
          };
          if (Data_String_Common["null"](v.commentStart)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(""));
          };
          if (Data_Boolean.otherwise) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(multiLineComment(dictMonad)(v)))(""));
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 737, column 1 - line 737, column 86): " + [ v.constructor.name ]);
      };
  };
  var hexDigit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isHexDigit))("hex digit");
  };
  var digit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isDecDigit))("digit");
  };
  var makeTokenParser = function (dictMonad) {
      return function (v) {
          var stringLetter = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (c) {
              return c !== "\"" && (c !== "\\" && c > "\x1a");
          });
          var sign = function (dictRing) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("-"))(Data_Ring.negate(dictRing)))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("+"))(Control_Category.identity(Control_Category.categoryFn))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
          };
          var oper = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.opStart)(function (c) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.opLetter))(function (cs) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.singleton(c) + Data_String_CodeUnits.fromCharArray(cs));
                  });
              });
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("operator");
          })();
          var number = function (base) {
              return function (baseDigit) {
                  var folder = function (v1) {
                      return function (v2) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Data_Maybe.Nothing.value;
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                                  return (base * v1.value0 | 0) + v3 | 0;
                              })(Data_CodePoint_Unicode.hexDigitToInt(Data_String_CodePoints.codePointFromChar(v2)));
                          };
                          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 603, column 9 - line 603, column 49): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                  };
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(baseDigit))(function (digits) {
                      return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digits"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(new Data_Maybe.Just(0))(digits));
                  });
              };
          };
          var octal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "o", "O" ]))(number(8)(octDigit(dictMonad)));
          var lexeme = function (p) {
              return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(whiteSpace$prime(dictMonad)(v));
          };
          var reservedOp = function (name) {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name))(function () {
                  return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.opLetter))("end of " + name);
              });
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          };
          var symbol = function (name) {
              return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(lexeme(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name)))(name);
          };
          var parens = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("("))(symbol(")"))(p);
          };
          var semi = symbol(";");
          var semiSep = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(semi);
          };
          var semiSep1 = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(semi);
          };
          var isReservedOp = function (name) {
              return isReserved(Data_Array.sort(Data_Ord.ordString)(v.reservedOpNames))(name);
          };
          var operator = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(oper)(function (name) {
                  var $85 = isReservedOp(name);
                  if ($85) {
                      return Text_Parsing_Parser.fail(dictMonad)("reserved operator " + name);
                  };
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(name);
              });
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          })();
          var ident = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.identStart)(function (c) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.identLetter))(function (cs) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.singleton(c) + Data_String_CodeUnits.fromCharArray(cs));
                  });
              });
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("identifier");
          })();
          var identifier = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(ident)(function (name) {
                  var $86 = isReservedName(dictMonad)(v)(name);
                  if ($86) {
                      return Text_Parsing_Parser.fail(dictMonad)("reserved word " + Data_Show.show(Data_Show.showString)(name));
                  };
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(name);
              });
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          })();
          var hexadecimal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "x", "X" ]))(number(16)(hexDigit(dictMonad)));
          var fraction = (function () {
              var op = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_CodePoint_Unicode.hexDigitToInt(Data_String_CodePoints.codePointFromChar(v1)))(function (int$prime) {
                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((v2.value0 + Data_Int.toNumber(int$prime)) / 10.0);
                          });
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 553, column 9 - line 553, column 51): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("fraction")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("."))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(digit(dictMonad)))("fraction"))(function (digits) {
                      return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digit"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Foldable.foldr(Data_Foldable.foldableArray)(op)(new Data_Maybe.Just(0.0))(digits));
                  });
              }));
          })();
          var escapeGap = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(space(dictMonad)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\")))("end of string gap");
          var escapeEmpty = Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("&");
          var escMap = Data_Array.zip([ "a", "b", "f", "n", "r", "t", "v", "\\", "\"", "'" ])([ "\x07", "\x08", "\x0c", "\x0a", "\x0d", "\x09", "\x0b", "\\", "\"", "'" ]);
          var dot = symbol(".");
          var decimal = number(10)(digit(dictMonad));
          var exponent$prime = (function () {
              var power = function (e) {
                  if (e < 0) {
                      return 1.0 / power(-e | 0);
                  };
                  if (Data_Boolean.otherwise) {
                      return $$Math.pow(10.0)(Data_Int.toNumber(e));
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 566, column 9 - line 566, column 31): " + [ e.constructor.name ]);
              };
              return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("exponent")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "e", "E" ]))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sign(Data_Ring.ringInt))(function (f) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(decimal)("exponent"))(function (e) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(power(f(e)));
                      });
                  });
              }));
          })();
          var fractExponent = function (n) {
              var justExponent = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(exponent$prime)(function (expo) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Int.toNumber(n) * expo);
              });
              var fractExponent$prime = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(fraction)(function (fract) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.option(dictMonad)(1.0)(exponent$prime))(function (expo) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))((Data_Int.toNumber(n) + fract) * expo);
                  });
              });
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(fractExponent$prime)(justExponent);
          };
          var fractFloat = function (n) {
              return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Either.Right.create)(fractExponent(n));
          };
          var decimalFloat = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(function (n) {
              return Text_Parsing_Parser_Combinators.option(dictMonad)(new Data_Either.Left(n))(fractFloat(n));
          });
          var zeroNumFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Either.Left.create)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal)))(decimalFloat))(fractFloat(0)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_Either.Left(0)));
          var natFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("0"))(zeroNumFloat))(decimalFloat);
          var naturalOrFloat = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(natFloat))("number");
          var floating = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(fractExponent);
          var $$float = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(floating))("float");
          var zeroNumber = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("0"))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal))(decimal))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(0))))("");
          var nat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(zeroNumber)(decimal);
          var $$int = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lexeme(sign(Data_Ring.ringInt)))(function (f) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nat)(function (n) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f(n));
              });
          });
          var integer = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme($$int))("integer");
          var natural = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(nat))("natural");
          var comma = symbol(",");
          var commaSep = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(comma);
          };
          var commaSep1 = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(comma);
          };
          var colon = symbol(":");
          var charNum = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(decimal)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("o"))(number(8)(octDigit(dictMonad)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("x"))(number(16)(hexDigit(dictMonad)))))(function (code) {
              var $91 = code > 1114111;
              if ($91) {
                  return Text_Parsing_Parser.fail(dictMonad)("invalid escape sequence");
              };
              var v1 = Data_Char.fromCharCode(code);
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0);
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("invalid character code (should not happen)");
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 451, column 17 - line 453, column 81): " + [ v1.constructor.name ]);
          });
          var charLetter = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (c) {
              return c !== "'" && (c !== "\\" && c > "\x1a");
          });
          var charEsc = (function () {
              var parseEsc = function (v1) {
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v1.value0))(v1.value1);
              };
              return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseEsc)(escMap));
          })();
          var charControl = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("^"))(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(upper(dictMonad))(function (code) {
                  var v1 = Data_Char.fromCharCode((Data_Char.toCharCode(code) - Data_Char.toCharCode("A") | 0) + 1 | 0);
                  if (v1 instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Text_Parsing_Parser.fail(dictMonad)("invalid character code (should not happen)");
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 440, column 9 - line 442, column 73): " + [ v1.constructor.name ]);
              });
          });
          var caseString = function (name) {
              if (v.caseSensitive) {
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name))(name);
              };
              if (Data_Boolean.otherwise) {
                  var msg = Data_Show.show(Data_Show.showString)(name);
                  var caseChar = function (c) {
                      var v1 = function (v2) {
                          if (Data_Boolean.otherwise) {
                              return Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(c);
                          };
                          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 307, column 1 - line 307, column 92): " + [ c.constructor.name ]);
                      };
                      var $102 = Data_CodePoint_Unicode.isAlpha(Data_String_CodePoints.codePointFromChar(c));
                      if ($102) {
                          var $103 = Data_String_CodeUnits.toChar(Data_String_Unicode.toLowerSimple(Data_String_CodeUnits.singleton(c)));
                          if ($103 instanceof Data_Maybe.Just) {
                              var $104 = Data_String_CodeUnits.toChar(Data_String_Unicode.toUpperSimple(Data_String_CodeUnits.singleton(c)));
                              if ($104 instanceof Data_Maybe.Just) {
                                  return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)($103.value0))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)($104.value0));
                              };
                              return v1(true);
                          };
                          return v1(true);
                      };
                      return v1(true);
                  };
                  var walk = function (name$prime) {
                      var v1 = Data_String_CodeUnits.uncons(name$prime);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(caseChar(v1.value0.head))(msg))(walk(v1.value0.tail));
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 657, column 22 - line 659, column 86): " + [ v1.constructor.name ]);
                  };
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(walk(name))(name);
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 652, column 5 - line 652, column 52): " + [ name.constructor.name ]);
          };
          var reserved = function (name) {
              var go = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(caseString(name))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.identLetter))("end of " + name));
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          };
          var brackets = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("["))(symbol("]"))(p);
          };
          var braces = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("{"))(symbol("}"))(p);
          };
          var ascii3codes = [ "NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "SUB", "ESC", "DEL" ];
          var ascii3 = [ "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x1a", "\x1b", "\x7f" ];
          var ascii2codes = [ "BS", "HT", "LF", "VT", "FF", "CR", "SO", "SI", "EM", "FS", "GS", "RS", "US", "SP" ];
          var ascii2 = [ "\x08", "\x09", "\x0a", "\x0b", "\x0c", "\x0d", "\x0e", "\x0f", "\x19", "\x1c", "\x1d", "\x1e", "\x1f", " " ];
          var asciiMap = Data_Array.zip(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3codes)(ascii2codes))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3)(ascii2));
          var charAscii = (function () {
              var parseAscii = function (v1) {
                  return Text_Parsing_Parser_Combinators["try"](dictMonad)(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v1.value0))(v1.value1));
              };
              return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseAscii)(asciiMap));
          })();
          var escapeCode = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charEsc)(charNum))(charAscii))(charControl))("escape code");
          var charEscape = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(escapeCode);
          var characterChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charLetter)(charEscape))("literal character");
          var charLiteral = (function () {
              var go = Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))("end of character"))(characterChar);
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(go))("character");
          })();
          var stringEscape = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(function () {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(escapeGap)(Data_Maybe.Nothing.value))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(escapeEmpty)(Data_Maybe.Nothing.value)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(escapeCode));
          });
          var stringChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(stringLetter))(stringEscape))("string character");
          var stringLiteral = (function () {
              var folder = function (v1) {
                  return function (chars) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return chars;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return new Data_List_Types.Cons(v1.value0, chars);
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 407, column 9 - line 407, column 55): " + [ v1.constructor.name, chars.constructor.name ]);
                  };
              };
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\""))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\""))("end of string"))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(stringChar)))(function (maybeChars) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.fromCharArray(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Foldable.foldr(Data_List_Types.foldableList)(folder)(Data_List_Types.Nil.value)(maybeChars))));
              });
              return lexeme(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("literal string"));
          })();
          var angles = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("<"))(symbol(">"))(p);
          };
          return {
              identifier: identifier,
              reserved: reserved,
              operator: operator,
              reservedOp: reservedOp,
              charLiteral: charLiteral,
              stringLiteral: stringLiteral,
              natural: natural,
              integer: integer,
              "float": $$float,
              naturalOrFloat: naturalOrFloat,
              decimal: decimal,
              hexadecimal: hexadecimal,
              octal: octal,
              symbol: symbol,
              lexeme: lexeme,
              whiteSpace: whiteSpace$prime(dictMonad)(v),
              parens: parens,
              braces: braces,
              angles: angles,
              brackets: brackets,
              semi: semi,
              comma: comma,
              colon: colon,
              dot: dot,
              semiSep: semiSep,
              semiSep1: semiSep1,
              commaSep: commaSep,
              commaSep1: commaSep1
          };
      };
  };
  var alphaNum = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfyCP(dictMonad)(Data_CodePoint_Unicode.isAlphaNum))("letter or digit");
  };
  exports["unGenLanguageDef"] = unGenLanguageDef;
  exports["makeTokenParser"] = makeTokenParser;
  exports["letter"] = letter;
  exports["alphaNum"] = alphaNum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Text.Parsing.Parser.Language"] = $PS["Text.Parsing.Parser.Language"] || {};
  var exports = $PS["Text.Parsing.Parser.Language"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Identity = $PS["Data.Identity"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];                
  var emptyDef = (function () {
      var op$prime = function (dictMonad) {
          return Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ ":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~" ]);
      };
      return {
          commentStart: "",
          commentEnd: "",
          commentLine: "",
          nestedComments: true,
          identStart: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("_")),
          identLetter: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.alphaNum(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "_", "'" ])),
          opStart: op$prime(Data_Identity.monadIdentity),
          opLetter: op$prime(Data_Identity.monadIdentity),
          reservedOpNames: [  ],
          reservedNames: [  ],
          caseSensitive: true
      };
  })();
  exports["emptyDef"] = emptyDef;
})(PS);
(function($PS) {
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Extra = $PS["Data.String.Extra"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Extra = $PS["Options.Applicative.Extra"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Language = $PS["Text.Parsing.Parser.Language"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];                
  var printClassName = function (name) {
      var pname = Data_String_Extra.camelCase(name);
      return Data_String_Common.joinWith("\x0a")([ "", pname + " :: ClassName", pname + (" = ClassName \"" + (name + "\"")) ]);
  };
  var printModule = function (classNames) {
      return Data_String_Common.joinWith("\x0a")(Data_Array.cons("module Tailwind where")(Data_Array.cons("")(Data_Array.cons("import Web.HTML.Common (ClassName(..))")(Data_Functor.map(Data_Functor.functorArray)(printClassName)(classNames)))));
  };
  var options = Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(function (v) {
      return function (v1) {
          return {
              input: v,
              output: v1
          };
      };
  })(Options_Applicative_Builder.strOption(Data_Array.fold(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("input"), Options_Applicative_Builder["short"](Options_Applicative_Builder_Internal.optionFieldsHasName)("i"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("INPUT_FILE"), Options_Applicative_Builder.help("Input file (tailwind.css)") ]))))(Options_Applicative_Builder.strOption(Data_Array.fold(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("output"), Options_Applicative_Builder["short"](Options_Applicative_Builder_Internal.optionFieldsHasName)("o"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("OUTPUT_FILE"), Options_Applicative_Builder.help("Output file (Tailwind.purs)") ])));
  var cssStyle = (function () {
      var v = Text_Parsing_Parser_Token.unGenLanguageDef(Text_Parsing_Parser_Language.emptyDef);
      return {
          commentStart: "/*",
          commentEnd: "*/",
          commentLine: "//",
          nestedComments: true,
          identStart: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "-", "_" ])),
          identLetter: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.alphaNum(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "-", "_", "$" ])),
          opStart: v.opStart,
          opLetter: v.opLetter,
          reservedNames: v.reservedNames,
          reservedOpNames: v.reservedOpNames,
          caseSensitive: false
      };
  })();
  var lang = Text_Parsing_Parser_Token.makeTokenParser(Data_Identity.monadIdentity)(cssStyle);
  var cssIdent = lang.identifier;
  var selectorParser = (function () {
    
      // https://www.w3.org/TR/selectors/#the-universal-selector
  var universal = Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))([  ])(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(lang.lexeme(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("*")))("universal selector"));
      var pseudo = Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))([  ])(Text_Parsing_Parser_Combinators.asErrorMessage(Data_Identity.monadIdentity)("pseudo element selector")(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"))(Text_Parsing_Parser_Combinators.optional(Data_Identity.monadIdentity)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"))))(cssIdent)));
      var class_ = Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Control_Applicative.pure(Control_Applicative.applicativeArray))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."))(cssIdent)))("class selector");
      var attributeSpec = (function () {
          var inside = Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(function (v) {
              return v !== "]";
          })));
          return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))([  ])(lang.brackets(inside)))("attributes spec");
      })();
      var element = Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))([  ])(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(cssIdent))(Text_Parsing_Parser_Combinators.optional(Data_Identity.monadIdentity)(attributeSpec)))(Text_Parsing_Parser_Combinators.optional(Data_Identity.monadIdentity)(pseudo))))("element selector");
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(class_)(universal))(element))(attributeSpec);
  })();
  var selectorsParser = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
      var $12 = Data_Array.fromFoldable(Data_List_Types.foldableList);
      return function ($13) {
          return Data_Array.concat($12($13));
      };
  })())(lang.commaSep(selectorParser));
  var blockParser = Text_Parsing_Parser_Combinators.asErrorMessage(Data_Identity.monadIdentity)("block")(lang.braces(Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(function (v) {
      return v !== "}";
  })))));
  var ruleParser = Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(selectorsParser)(blockParser))(lang.whiteSpace);
  var mediaParser = (function () {
      var argsParser = Text_Parsing_Parser_Combinators.asErrorMessage(Data_Identity.monadIdentity)("arguments")(lang.parens(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(function (v) {
          return v !== ")";
      }))));
      return Data_Functor.voidRight(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))([  ])(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(lang.lexeme(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("@media")))(argsParser))(lang.braces(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(ruleParser))))(lang.whiteSpace));
  })();
  var classNamesParser = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(lang.whiteSpace)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Array.concat)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(ruleParser)(mediaParser))))(lang.whiteSpace));
  var extractClassNames = function (css) {
      return Data_Either.either((function () {
          var $14 = Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff);
          return function ($15) {
              return $14(Effect_Exception.error(Text_Parsing_Parser.parseErrorMessage($15)));
          };
      })())(Control_Applicative.pure(Effect_Aff.applicativeAff))(Text_Parsing_Parser.runParser(css)(classNamesParser));
  };
  var useOptions = function (v) {
      return Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(v.input))(function (css) {
          return Control_Bind.bind(Effect_Aff.bindAff)(extractClassNames(css))(function (classNames) {
              return Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(v.output)(printModule(classNames));
          });
      }));
  };
  var main = (function () {
      var opts = Options_Applicative_Builder.info(Options_Applicative_Internal_Utils.apApplyFlipped(Options_Applicative_Types.parserApply)(options)(Options_Applicative_Extra.helper))(Data_Semigroup.append(Options_Applicative_Builder.infoModSemigroup)(Options_Applicative_Builder.fullDesc)(Data_Semigroup.append(Options_Applicative_Builder.infoModSemigroup)(Options_Applicative_Builder.progDesc("Parses Tailwind CSS file (INPUT_FILE) and generates PureScript module (OUTPUT_FILE)"))(Options_Applicative_Builder.header("Tailwind CSS parser/codegenerator"))));
      return Control_Bind.bind(Effect.bindEffect)(Options_Applicative_Extra.execParser(opts))(useOptions);
  })();
  exports["options"] = options;
  exports["main"] = main;
  exports["useOptions"] = useOptions;
  exports["extractClassNames"] = extractClassNames;
  exports["classNamesParser"] = classNamesParser;
  exports["ruleParser"] = ruleParser;
  exports["mediaParser"] = mediaParser;
  exports["selectorsParser"] = selectorsParser;
  exports["blockParser"] = blockParser;
  exports["selectorParser"] = selectorParser;
  exports["cssIdent"] = cssIdent;
  exports["lang"] = lang;
  exports["cssStyle"] = cssStyle;
  exports["printModule"] = printModule;
  exports["printClassName"] = printClassName;
})(PS);
PS["Main"].main();
